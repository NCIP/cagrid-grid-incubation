package org.cagrid.gaards.csm.service.globus;


import java.rmi.RemoteException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import javax.security.auth.Subject;
import javax.xml.namespace.QName;
import javax.xml.rpc.handler.MessageContext;

import gov.nih.nci.cagrid.introduce.servicetools.security.AuthorizationExtension;
import org.globus.wsrf.impl.security.authorization.exceptions.AuthorizationException;
import org.globus.wsrf.impl.security.authorization.exceptions.CloseException;
import org.globus.wsrf.impl.security.authorization.exceptions.InitializeException;
import org.globus.wsrf.impl.security.authorization.exceptions.InvalidPolicyException;
import org.globus.wsrf.security.authorization.PDP;
import org.globus.wsrf.security.authorization.PDPConfig;
import org.globus.wsrf.config.ContainerConfig;
import org.w3c.dom.Node;


/** 
 * DO NOT EDIT:  This class is autogenerated!
 *
 * This is a PDP for use with the globus authorization callout.
 * This class will have a authorize method for each method on this grid service.
 * The method is responsibe for making any authorization callouts required to satisfy the 
 * authorization requirements placed on each method call.  Each method will either return
 * apon a successful authorization or will throw an exception apon a failed authorization.
 * 
 * @created by Introduce Toolkit version 1.3
 * 
 */
public class CSMAuthorization implements PDP {

	public static final String SERVICE_NAMESPACE = "http://csm.gaards.cagrid.org/CSM";
	
	Map authorizationClassMap = new HashMap();
	
	
	public CSMAuthorization() {
	}
	
	protected String getServiceNamespace(){
		return SERVICE_NAMESPACE;
	}
	
	public static String getCallerIdentity() {
		String caller = org.globus.wsrf.security.SecurityManager.getManager().getCaller();
		if ((caller == null) || (caller.equals("<anonymous>"))) {
			return null;
		} else {
			return caller;
		}
	}
					
	public void authorizeGetMultipleResourceProperties(Subject peerSubject, MessageContext context, QName operation) throws AuthorizationException {
		
	}
	   				
	public void authorizeGetResourceProperty(Subject peerSubject, MessageContext context, QName operation) throws AuthorizationException {
		
	}
	   				
	public void authorizeQueryResourceProperties(Subject peerSubject, MessageContext context, QName operation) throws AuthorizationException {
		
	}
	   				
	public void authorizeGetServiceSecurityMetadata(Subject peerSubject, MessageContext context, QName operation) throws AuthorizationException {
		
	}
	   				
	public void authorizeGetApplications(Subject peerSubject, MessageContext context, QName operation) throws AuthorizationException {
		
	}
	   				
	public void authorizeCreateApplication(Subject peerSubject, MessageContext context, QName operation) throws AuthorizationException {
		
	}
	   				
	public void authorizeRemoveApplication(Subject peerSubject, MessageContext context, QName operation) throws AuthorizationException {
		
	}
	   				
	public void authorizeCreateProtectionElement(Subject peerSubject, MessageContext context, QName operation) throws AuthorizationException {
		
	}
	   				
	public void authorizeGetProtectionElements(Subject peerSubject, MessageContext context, QName operation) throws AuthorizationException {
		
	}
	   				
	public void authorizeModifyProtectionElement(Subject peerSubject, MessageContext context, QName operation) throws AuthorizationException {
		
	}
	   				
	public void authorizeRemoveProtectionElement(Subject peerSubject, MessageContext context, QName operation) throws AuthorizationException {
		
	}
	   				
	public void authorizeCreateProtectionGroup(Subject peerSubject, MessageContext context, QName operation) throws AuthorizationException {
		
	}
	   				
	public void authorizeGetProtectionGroups(Subject peerSubject, MessageContext context, QName operation) throws AuthorizationException {
		
	}
	   				
	public void authorizeModifyProtectionGroup(Subject peerSubject, MessageContext context, QName operation) throws AuthorizationException {
		
	}
	   				
	public void authorizeRemoveProtectionGroup(Subject peerSubject, MessageContext context, QName operation) throws AuthorizationException {
		
	}
	   				
	public void authorizeAssignProtectionElements(Subject peerSubject, MessageContext context, QName operation) throws AuthorizationException {
		
	}
	   				
	public void authorizeUnassignProtectionElements(Subject peerSubject, MessageContext context, QName operation) throws AuthorizationException {
		
	}
	   				
	public void authorizeGetProtectionElementsAssignedToProtectionGroup(Subject peerSubject, MessageContext context, QName operation) throws AuthorizationException {
		
	}
	   				
	public void authorizeAssignProtectionGroup(Subject peerSubject, MessageContext context, QName operation) throws AuthorizationException {
		
	}
	   				
	public void authorizeUnassignProtectionGroup(Subject peerSubject, MessageContext context, QName operation) throws AuthorizationException {
		
	}
	   				
	public void authorizeGetChildProtectionGroups(Subject peerSubject, MessageContext context, QName operation) throws AuthorizationException {
		
	}
	   				
	public void authorizeGetGroups(Subject peerSubject, MessageContext context, QName operation) throws AuthorizationException {
		
	}
	   				
	public void authorizeLinkRemoteGroup(Subject peerSubject, MessageContext context, QName operation) throws AuthorizationException {
		
	}
	   				
	public void authorizeUnlinkRemoteGroup(Subject peerSubject, MessageContext context, QName operation) throws AuthorizationException {
		
	}
	   				
	public void authorizeCreateGroup(Subject peerSubject, MessageContext context, QName operation) throws AuthorizationException {
		
	}
	   				
	public void authorizeRemoveGroup(Subject peerSubject, MessageContext context, QName operation) throws AuthorizationException {
		
	}
	   				
	public void authorizeModifyGroup(Subject peerSubject, MessageContext context, QName operation) throws AuthorizationException {
		
	}
	   				
	public void authorizeAddUsersToGroup(Subject peerSubject, MessageContext context, QName operation) throws AuthorizationException {
		
	}
	   				
	public void authorizeRemoveUsersFromGroup(Subject peerSubject, MessageContext context, QName operation) throws AuthorizationException {
		
	}
	   				
	public void authorizeGetUsersInGroup(Subject peerSubject, MessageContext context, QName operation) throws AuthorizationException {
		
	}
	   				
	public void authorizeCreatePrivilege(Subject peerSubject, MessageContext context, QName operation) throws AuthorizationException {
		
	}
	   				
	public void authorizeGetPrivileges(Subject peerSubject, MessageContext context, QName operation) throws AuthorizationException {
		
	}
	   				
	public void authorizeRemovePrivilege(Subject peerSubject, MessageContext context, QName operation) throws AuthorizationException {
		
	}
	   				
	public void authorizeModifyPrivilege(Subject peerSubject, MessageContext context, QName operation) throws AuthorizationException {
		
	}
	   				
	public void authorizeCreateRole(Subject peerSubject, MessageContext context, QName operation) throws AuthorizationException {
		
	}
	   				
	public void authorizeGetRoles(Subject peerSubject, MessageContext context, QName operation) throws AuthorizationException {
		
	}
	   				
	public void authorizeModifyRole(Subject peerSubject, MessageContext context, QName operation) throws AuthorizationException {
		
	}
	   				
	public void authorizeRemoveRole(Subject peerSubject, MessageContext context, QName operation) throws AuthorizationException {
		
	}
	   				
	public void authorizeSetPrivilegesForRole(Subject peerSubject, MessageContext context, QName operation) throws AuthorizationException {
		
	}
	   				
	public void authorizeGetPrivilegesForRole(Subject peerSubject, MessageContext context, QName operation) throws AuthorizationException {
		
	}
	   				
	public void authorizeGrantGroupPermission(Subject peerSubject, MessageContext context, QName operation) throws AuthorizationException {
		
	}
	   				
	public void authorizeRevokeGroupPermission(Subject peerSubject, MessageContext context, QName operation) throws AuthorizationException {
		
	}
	   				
	public void authorizeGrantUserPermission(Subject peerSubject, MessageContext context, QName operation) throws AuthorizationException {
		
	}
	   				
	public void authorizeRevokeUserPermission(Subject peerSubject, MessageContext context, QName operation) throws AuthorizationException {
		
	}
	   				
	public void authorizeGetPermissionsForUser(Subject peerSubject, MessageContext context, QName operation) throws AuthorizationException {
		
	}
	   				
	public void authorizeGetPermissionForGroup(Subject peerSubject, MessageContext context, QName operation) throws AuthorizationException {
		
	}
	   				
	public void authorizeGetParentProtectionGroup(Subject peerSubject, MessageContext context, QName operation) throws AuthorizationException {
		
	}
	   				
	public void authorizeCheckPermission(Subject peerSubject, MessageContext context, QName operation) throws AuthorizationException {
		
	}
	   				
	public void authorizeCheckAttributeBasedPermission(Subject peerSubject, MessageContext context, QName operation) throws AuthorizationException {
		
	}
	   				
	public void authorizeCreateFilterClause(Subject peerSubject, MessageContext context, QName operation) throws AuthorizationException {
		
	}
	   				
	public void authorizeModifyFilterClause(Subject peerSubject, MessageContext context, QName operation) throws AuthorizationException {
		
	}
	   				
	public void authorizeGetFilterClauses(Subject peerSubject, MessageContext context, QName operation) throws AuthorizationException {
		
	}
	   				
	public void authorizeRemoveFilterClause(Subject peerSubject, MessageContext context, QName operation) throws AuthorizationException {
		
	}
	   				
	public void authorizeCreateFilterCreator(Subject peerSubject, MessageContext context, QName operation) throws AuthorizationException {
		
	}
	   				
	public void authorizeCreateFilterCreatorFromDomainModel(Subject peerSubject, MessageContext context, QName operation) throws AuthorizationException {
		
	}
	   
	
	public boolean isPermitted(Subject peerSubject, MessageContext context, QName operation)
		throws AuthorizationException {
		
		if(!operation.getNamespaceURI().equals(getServiceNamespace())){
		  return false;
		}
		if(operation.getLocalPart().equals("getMultipleResourceProperties")){
			authorizeGetMultipleResourceProperties(peerSubject, context, operation);
			return true;
		} else if(operation.getLocalPart().equals("getResourceProperty")){
			authorizeGetResourceProperty(peerSubject, context, operation);
			return true;
		} else if(operation.getLocalPart().equals("queryResourceProperties")){
			authorizeQueryResourceProperties(peerSubject, context, operation);
			return true;
		} else if(operation.getLocalPart().equals("getServiceSecurityMetadata")){
			authorizeGetServiceSecurityMetadata(peerSubject, context, operation);
			return true;
		} else if(operation.getLocalPart().equals("getApplications")){
			authorizeGetApplications(peerSubject, context, operation);
			return true;
		} else if(operation.getLocalPart().equals("createApplication")){
			authorizeCreateApplication(peerSubject, context, operation);
			return true;
		} else if(operation.getLocalPart().equals("removeApplication")){
			authorizeRemoveApplication(peerSubject, context, operation);
			return true;
		} else if(operation.getLocalPart().equals("createProtectionElement")){
			authorizeCreateProtectionElement(peerSubject, context, operation);
			return true;
		} else if(operation.getLocalPart().equals("getProtectionElements")){
			authorizeGetProtectionElements(peerSubject, context, operation);
			return true;
		} else if(operation.getLocalPart().equals("modifyProtectionElement")){
			authorizeModifyProtectionElement(peerSubject, context, operation);
			return true;
		} else if(operation.getLocalPart().equals("removeProtectionElement")){
			authorizeRemoveProtectionElement(peerSubject, context, operation);
			return true;
		} else if(operation.getLocalPart().equals("createProtectionGroup")){
			authorizeCreateProtectionGroup(peerSubject, context, operation);
			return true;
		} else if(operation.getLocalPart().equals("getProtectionGroups")){
			authorizeGetProtectionGroups(peerSubject, context, operation);
			return true;
		} else if(operation.getLocalPart().equals("modifyProtectionGroup")){
			authorizeModifyProtectionGroup(peerSubject, context, operation);
			return true;
		} else if(operation.getLocalPart().equals("removeProtectionGroup")){
			authorizeRemoveProtectionGroup(peerSubject, context, operation);
			return true;
		} else if(operation.getLocalPart().equals("assignProtectionElements")){
			authorizeAssignProtectionElements(peerSubject, context, operation);
			return true;
		} else if(operation.getLocalPart().equals("unassignProtectionElements")){
			authorizeUnassignProtectionElements(peerSubject, context, operation);
			return true;
		} else if(operation.getLocalPart().equals("getProtectionElementsAssignedToProtectionGroup")){
			authorizeGetProtectionElementsAssignedToProtectionGroup(peerSubject, context, operation);
			return true;
		} else if(operation.getLocalPart().equals("assignProtectionGroup")){
			authorizeAssignProtectionGroup(peerSubject, context, operation);
			return true;
		} else if(operation.getLocalPart().equals("unassignProtectionGroup")){
			authorizeUnassignProtectionGroup(peerSubject, context, operation);
			return true;
		} else if(operation.getLocalPart().equals("getChildProtectionGroups")){
			authorizeGetChildProtectionGroups(peerSubject, context, operation);
			return true;
		} else if(operation.getLocalPart().equals("getGroups")){
			authorizeGetGroups(peerSubject, context, operation);
			return true;
		} else if(operation.getLocalPart().equals("linkRemoteGroup")){
			authorizeLinkRemoteGroup(peerSubject, context, operation);
			return true;
		} else if(operation.getLocalPart().equals("unlinkRemoteGroup")){
			authorizeUnlinkRemoteGroup(peerSubject, context, operation);
			return true;
		} else if(operation.getLocalPart().equals("createGroup")){
			authorizeCreateGroup(peerSubject, context, operation);
			return true;
		} else if(operation.getLocalPart().equals("removeGroup")){
			authorizeRemoveGroup(peerSubject, context, operation);
			return true;
		} else if(operation.getLocalPart().equals("modifyGroup")){
			authorizeModifyGroup(peerSubject, context, operation);
			return true;
		} else if(operation.getLocalPart().equals("addUsersToGroup")){
			authorizeAddUsersToGroup(peerSubject, context, operation);
			return true;
		} else if(operation.getLocalPart().equals("removeUsersFromGroup")){
			authorizeRemoveUsersFromGroup(peerSubject, context, operation);
			return true;
		} else if(operation.getLocalPart().equals("getUsersInGroup")){
			authorizeGetUsersInGroup(peerSubject, context, operation);
			return true;
		} else if(operation.getLocalPart().equals("createPrivilege")){
			authorizeCreatePrivilege(peerSubject, context, operation);
			return true;
		} else if(operation.getLocalPart().equals("getPrivileges")){
			authorizeGetPrivileges(peerSubject, context, operation);
			return true;
		} else if(operation.getLocalPart().equals("removePrivilege")){
			authorizeRemovePrivilege(peerSubject, context, operation);
			return true;
		} else if(operation.getLocalPart().equals("modifyPrivilege")){
			authorizeModifyPrivilege(peerSubject, context, operation);
			return true;
		} else if(operation.getLocalPart().equals("createRole")){
			authorizeCreateRole(peerSubject, context, operation);
			return true;
		} else if(operation.getLocalPart().equals("getRoles")){
			authorizeGetRoles(peerSubject, context, operation);
			return true;
		} else if(operation.getLocalPart().equals("modifyRole")){
			authorizeModifyRole(peerSubject, context, operation);
			return true;
		} else if(operation.getLocalPart().equals("removeRole")){
			authorizeRemoveRole(peerSubject, context, operation);
			return true;
		} else if(operation.getLocalPart().equals("setPrivilegesForRole")){
			authorizeSetPrivilegesForRole(peerSubject, context, operation);
			return true;
		} else if(operation.getLocalPart().equals("getPrivilegesForRole")){
			authorizeGetPrivilegesForRole(peerSubject, context, operation);
			return true;
		} else if(operation.getLocalPart().equals("grantGroupPermission")){
			authorizeGrantGroupPermission(peerSubject, context, operation);
			return true;
		} else if(operation.getLocalPart().equals("revokeGroupPermission")){
			authorizeRevokeGroupPermission(peerSubject, context, operation);
			return true;
		} else if(operation.getLocalPart().equals("grantUserPermission")){
			authorizeGrantUserPermission(peerSubject, context, operation);
			return true;
		} else if(operation.getLocalPart().equals("revokeUserPermission")){
			authorizeRevokeUserPermission(peerSubject, context, operation);
			return true;
		} else if(operation.getLocalPart().equals("getPermissionsForUser")){
			authorizeGetPermissionsForUser(peerSubject, context, operation);
			return true;
		} else if(operation.getLocalPart().equals("getPermissionForGroup")){
			authorizeGetPermissionForGroup(peerSubject, context, operation);
			return true;
		} else if(operation.getLocalPart().equals("getParentProtectionGroup")){
			authorizeGetParentProtectionGroup(peerSubject, context, operation);
			return true;
		} else if(operation.getLocalPart().equals("checkPermission")){
			authorizeCheckPermission(peerSubject, context, operation);
			return true;
		} else if(operation.getLocalPart().equals("checkAttributeBasedPermission")){
			authorizeCheckAttributeBasedPermission(peerSubject, context, operation);
			return true;
		} else if(operation.getLocalPart().equals("createFilterClause")){
			authorizeCreateFilterClause(peerSubject, context, operation);
			return true;
		} else if(operation.getLocalPart().equals("modifyFilterClause")){
			authorizeModifyFilterClause(peerSubject, context, operation);
			return true;
		} else if(operation.getLocalPart().equals("getFilterClauses")){
			authorizeGetFilterClauses(peerSubject, context, operation);
			return true;
		} else if(operation.getLocalPart().equals("removeFilterClause")){
			authorizeRemoveFilterClause(peerSubject, context, operation);
			return true;
		} else if(operation.getLocalPart().equals("createFilterCreator")){
			authorizeCreateFilterCreator(peerSubject, context, operation);
			return true;
		} else if(operation.getLocalPart().equals("createFilterCreatorFromDomainModel")){
			authorizeCreateFilterCreatorFromDomainModel(peerSubject, context, operation);
			return true;
		} 		
		return false;
	}
	

	public Node getPolicy(Node query) throws InvalidPolicyException {
		return null;
	}


	public String[] getPolicyNames() {
		return null;
	}


	public Node setPolicy(Node policy) throws InvalidPolicyException {
		return null;
	}


	public void close() throws CloseException {


	}


	public void initialize(PDPConfig config, String name, String id) throws InitializeException {
    	try{
    		String serviceName = (String)config.getProperty(name, "serviceName");
    	    String etcPath = ContainerConfig.getBaseDirectory() + File.separator + (String)config.getProperty(name, "etcDirectoryPath");

    	
    	} catch (Exception e){
        	throw new InitializeException(e.getMessage(),e);
		}
	}
	
	
}
