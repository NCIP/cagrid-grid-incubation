/**
*============================================================================
*  Copyright The Ohio State University Research Foundation, The University of Chicago - 
*	Argonne National Laboratory, Emory University, SemanticBits LLC, and 
*	Ekagra Software Technologies Ltd.
*
*  Distributed under the OSI-approved BSD 3-Clause License.
*  See http://ncip.github.com/cagrid-core/LICENSE.txt for details.
*============================================================================
**/
package org.cagrid.gaards.csm.client;

import java.rmi.RemoteException;
import java.util.List;

import org.apache.axis.client.Stub;
import org.apache.axis.message.addressing.EndpointReferenceType;
import org.apache.axis.types.URI.MalformedURIException;
import org.cagrid.gaards.csm.bean.ApplicationSearchCriteria;
import org.cagrid.gaards.csm.common.CSMI;
import org.cagrid.gaards.csm.filters.client.FilterCreatorClient;
import org.cagrid.gaards.csm.stubs.types.HibernateSessionCreationFault;
import org.globus.gsi.GlobusCredential;

/**
 * This class is autogenerated, DO NOT EDIT GENERATED GRID SERVICE ACCESS
 * METHODS. This client is generated automatically by Introduce to provide a
 * clean unwrapped API to the service. On construction the class instance will
 * contact the remote service and retrieve it's security metadata description
 * which it will use to configure the Stub specifically for each method call.
 * 
 * @created by Introduce Toolkit version 1.3
 */
public class CSMClient extends CSMClientBase implements CSMI {

    public CSMClient(String url) throws MalformedURIException, RemoteException {
        this(url, null);
    }

    public CSMClient(String url, GlobusCredential proxy) throws MalformedURIException, RemoteException {
        super(url, proxy);
    }

    public CSMClient(EndpointReferenceType epr) throws MalformedURIException, RemoteException {
        this(epr, null);
    }

    public CSMClient(EndpointReferenceType epr, GlobusCredential proxy) throws MalformedURIException, RemoteException {
        super(epr, proxy);
    }

    public static void usage() {
        System.out.println(CSMClient.class.getName() + " -url <service url>");
    }

    public static void main(String[] args) {
        System.out.println("Running the Grid Service Client");
        try {

            CSM csm = new CSM("https://localhost:8443/wsrf/services/cagrid/CSM");
            List<Application> apps = csm.getApplications(new ApplicationSearchCriteria());
            for (int i = 0; i < apps.size(); i++) {
                System.out.println(apps.get(i).getName());
            }

        } catch (Exception e) {
            e.printStackTrace();
            System.exit(1);
        }
    }

  public org.oasis.wsrf.properties.GetMultipleResourcePropertiesResponse getMultipleResourceProperties(org.oasis.wsrf.properties.GetMultipleResourceProperties_Element params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getMultipleResourceProperties");
    return portType.getMultipleResourceProperties(params);
    }
  }

  public org.oasis.wsrf.properties.GetResourcePropertyResponse getResourceProperty(javax.xml.namespace.QName params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getResourceProperty");
    return portType.getResourceProperty(params);
    }
  }

  public org.oasis.wsrf.properties.QueryResourcePropertiesResponse queryResourceProperties(org.oasis.wsrf.properties.QueryResourceProperties_Element params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"queryResourceProperties");
    return portType.queryResourceProperties(params);
    }
  }

  public org.cagrid.gaards.csm.bean.Application[] getApplications(org.cagrid.gaards.csm.bean.ApplicationSearchCriteria applicationSearchCriteria) throws RemoteException, org.cagrid.gaards.csm.stubs.types.CSMInternalFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getApplications");
    org.cagrid.gaards.csm.stubs.GetApplicationsRequest params = new org.cagrid.gaards.csm.stubs.GetApplicationsRequest();
    org.cagrid.gaards.csm.stubs.GetApplicationsRequestApplicationSearchCriteria applicationSearchCriteriaContainer = new org.cagrid.gaards.csm.stubs.GetApplicationsRequestApplicationSearchCriteria();
    applicationSearchCriteriaContainer.setApplicationSearchCriteria(applicationSearchCriteria);
    params.setApplicationSearchCriteria(applicationSearchCriteriaContainer);
    org.cagrid.gaards.csm.stubs.GetApplicationsResponse boxedResult = portType.getApplications(params);
    return boxedResult.getApplication();
    }
  }

  public org.cagrid.gaards.csm.bean.Application createApplication(org.cagrid.gaards.csm.bean.Application application) throws RemoteException, org.cagrid.gaards.csm.stubs.types.CSMInternalFault, org.cagrid.gaards.csm.stubs.types.AccessDeniedFault, org.cagrid.gaards.csm.stubs.types.CSMTransactionFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"createApplication");
    org.cagrid.gaards.csm.stubs.CreateApplicationRequest params = new org.cagrid.gaards.csm.stubs.CreateApplicationRequest();
    org.cagrid.gaards.csm.stubs.CreateApplicationRequestApplication applicationContainer = new org.cagrid.gaards.csm.stubs.CreateApplicationRequestApplication();
    applicationContainer.setApplication(application);
    params.setApplication(applicationContainer);
    org.cagrid.gaards.csm.stubs.CreateApplicationResponse boxedResult = portType.createApplication(params);
    return boxedResult.getApplication();
    }
  }

  public void removeApplication(long applicationId) throws RemoteException, org.cagrid.gaards.csm.stubs.types.CSMInternalFault, org.cagrid.gaards.csm.stubs.types.AccessDeniedFault, org.cagrid.gaards.csm.stubs.types.CSMTransactionFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"removeApplication");
    org.cagrid.gaards.csm.stubs.RemoveApplicationRequest params = new org.cagrid.gaards.csm.stubs.RemoveApplicationRequest();
    params.setApplicationId(applicationId);
    org.cagrid.gaards.csm.stubs.RemoveApplicationResponse boxedResult = portType.removeApplication(params);
    }
  }

  public org.cagrid.gaards.csm.bean.ProtectionElement createProtectionElement(org.cagrid.gaards.csm.bean.ProtectionElement pe) throws RemoteException, org.cagrid.gaards.csm.stubs.types.CSMInternalFault, org.cagrid.gaards.csm.stubs.types.AccessDeniedFault, org.cagrid.gaards.csm.stubs.types.CSMTransactionFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"createProtectionElement");
    org.cagrid.gaards.csm.stubs.CreateProtectionElementRequest params = new org.cagrid.gaards.csm.stubs.CreateProtectionElementRequest();
    org.cagrid.gaards.csm.stubs.CreateProtectionElementRequestPe peContainer = new org.cagrid.gaards.csm.stubs.CreateProtectionElementRequestPe();
    peContainer.setProtectionElement(pe);
    params.setPe(peContainer);
    org.cagrid.gaards.csm.stubs.CreateProtectionElementResponse boxedResult = portType.createProtectionElement(params);
    return boxedResult.getProtectionElement();
    }
  }

  public org.cagrid.gaards.csm.bean.ProtectionElement[] getProtectionElements(org.cagrid.gaards.csm.bean.ProtectionElementSearchCriteria criteria) throws RemoteException, org.cagrid.gaards.csm.stubs.types.CSMInternalFault, org.cagrid.gaards.csm.stubs.types.AccessDeniedFault, org.cagrid.gaards.csm.stubs.types.CSMTransactionFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getProtectionElements");
    org.cagrid.gaards.csm.stubs.GetProtectionElementsRequest params = new org.cagrid.gaards.csm.stubs.GetProtectionElementsRequest();
    org.cagrid.gaards.csm.stubs.GetProtectionElementsRequestCriteria criteriaContainer = new org.cagrid.gaards.csm.stubs.GetProtectionElementsRequestCriteria();
    criteriaContainer.setProtectionElementSearchCriteria(criteria);
    params.setCriteria(criteriaContainer);
    org.cagrid.gaards.csm.stubs.GetProtectionElementsResponse boxedResult = portType.getProtectionElements(params);
    return boxedResult.getProtectionElement();
    }
  }

  public org.cagrid.gaards.csm.bean.ProtectionElement modifyProtectionElement(org.cagrid.gaards.csm.bean.ProtectionElement protectionElement) throws RemoteException, org.cagrid.gaards.csm.stubs.types.CSMInternalFault, org.cagrid.gaards.csm.stubs.types.AccessDeniedFault, org.cagrid.gaards.csm.stubs.types.CSMTransactionFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"modifyProtectionElement");
    org.cagrid.gaards.csm.stubs.ModifyProtectionElementRequest params = new org.cagrid.gaards.csm.stubs.ModifyProtectionElementRequest();
    org.cagrid.gaards.csm.stubs.ModifyProtectionElementRequestProtectionElement protectionElementContainer = new org.cagrid.gaards.csm.stubs.ModifyProtectionElementRequestProtectionElement();
    protectionElementContainer.setProtectionElement(protectionElement);
    params.setProtectionElement(protectionElementContainer);
    org.cagrid.gaards.csm.stubs.ModifyProtectionElementResponse boxedResult = portType.modifyProtectionElement(params);
    return boxedResult.getProtectionElement();
    }
  }

  public void removeProtectionElement(long protectionElementId) throws RemoteException, org.cagrid.gaards.csm.stubs.types.CSMInternalFault, org.cagrid.gaards.csm.stubs.types.AccessDeniedFault, org.cagrid.gaards.csm.stubs.types.CSMTransactionFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"removeProtectionElement");
    org.cagrid.gaards.csm.stubs.RemoveProtectionElementRequest params = new org.cagrid.gaards.csm.stubs.RemoveProtectionElementRequest();
    params.setProtectionElementId(protectionElementId);
    org.cagrid.gaards.csm.stubs.RemoveProtectionElementResponse boxedResult = portType.removeProtectionElement(params);
    }
  }

  public org.cagrid.gaards.csm.bean.ProtectionGroup createProtectionGroup(org.cagrid.gaards.csm.bean.ProtectionGroup pg) throws RemoteException, org.cagrid.gaards.csm.stubs.types.CSMInternalFault, org.cagrid.gaards.csm.stubs.types.AccessDeniedFault, org.cagrid.gaards.csm.stubs.types.CSMTransactionFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"createProtectionGroup");
    org.cagrid.gaards.csm.stubs.CreateProtectionGroupRequest params = new org.cagrid.gaards.csm.stubs.CreateProtectionGroupRequest();
    org.cagrid.gaards.csm.stubs.CreateProtectionGroupRequestPg pgContainer = new org.cagrid.gaards.csm.stubs.CreateProtectionGroupRequestPg();
    pgContainer.setProtectionGroup(pg);
    params.setPg(pgContainer);
    org.cagrid.gaards.csm.stubs.CreateProtectionGroupResponse boxedResult = portType.createProtectionGroup(params);
    return boxedResult.getProtectionGroup();
    }
  }

  public org.cagrid.gaards.csm.bean.ProtectionGroup[] getProtectionGroups(org.cagrid.gaards.csm.bean.ProtectionGroupSearchCriteria criteria) throws RemoteException, org.cagrid.gaards.csm.stubs.types.CSMInternalFault, org.cagrid.gaards.csm.stubs.types.AccessDeniedFault, org.cagrid.gaards.csm.stubs.types.CSMTransactionFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getProtectionGroups");
    org.cagrid.gaards.csm.stubs.GetProtectionGroupsRequest params = new org.cagrid.gaards.csm.stubs.GetProtectionGroupsRequest();
    org.cagrid.gaards.csm.stubs.GetProtectionGroupsRequestCriteria criteriaContainer = new org.cagrid.gaards.csm.stubs.GetProtectionGroupsRequestCriteria();
    criteriaContainer.setProtectionGroupSearchCriteria(criteria);
    params.setCriteria(criteriaContainer);
    org.cagrid.gaards.csm.stubs.GetProtectionGroupsResponse boxedResult = portType.getProtectionGroups(params);
    return boxedResult.getProtectionGroup();
    }
  }

  public org.cagrid.gaards.csm.bean.ProtectionGroup modifyProtectionGroup(org.cagrid.gaards.csm.bean.ProtectionGroup pg) throws RemoteException, org.cagrid.gaards.csm.stubs.types.CSMInternalFault, org.cagrid.gaards.csm.stubs.types.AccessDeniedFault, org.cagrid.gaards.csm.stubs.types.CSMTransactionFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"modifyProtectionGroup");
    org.cagrid.gaards.csm.stubs.ModifyProtectionGroupRequest params = new org.cagrid.gaards.csm.stubs.ModifyProtectionGroupRequest();
    org.cagrid.gaards.csm.stubs.ModifyProtectionGroupRequestPg pgContainer = new org.cagrid.gaards.csm.stubs.ModifyProtectionGroupRequestPg();
    pgContainer.setProtectionGroup(pg);
    params.setPg(pgContainer);
    org.cagrid.gaards.csm.stubs.ModifyProtectionGroupResponse boxedResult = portType.modifyProtectionGroup(params);
    return boxedResult.getProtectionGroup();
    }
  }

  public void removeProtectionGroup(long protectionGroupId) throws RemoteException, org.cagrid.gaards.csm.stubs.types.CSMInternalFault, org.cagrid.gaards.csm.stubs.types.AccessDeniedFault, org.cagrid.gaards.csm.stubs.types.CSMTransactionFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"removeProtectionGroup");
    org.cagrid.gaards.csm.stubs.RemoveProtectionGroupRequest params = new org.cagrid.gaards.csm.stubs.RemoveProtectionGroupRequest();
    params.setProtectionGroupId(protectionGroupId);
    org.cagrid.gaards.csm.stubs.RemoveProtectionGroupResponse boxedResult = portType.removeProtectionGroup(params);
    }
  }

  public void assignProtectionElements(long protectionGroupId,long[] protectionElements) throws RemoteException, org.cagrid.gaards.csm.stubs.types.CSMInternalFault, org.cagrid.gaards.csm.stubs.types.AccessDeniedFault, org.cagrid.gaards.csm.stubs.types.CSMTransactionFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"assignProtectionElements");
    org.cagrid.gaards.csm.stubs.AssignProtectionElementsRequest params = new org.cagrid.gaards.csm.stubs.AssignProtectionElementsRequest();
    params.setProtectionGroupId(protectionGroupId);
    params.setProtectionElements(protectionElements);
    org.cagrid.gaards.csm.stubs.AssignProtectionElementsResponse boxedResult = portType.assignProtectionElements(params);
    }
  }

  public void unassignProtectionElements(long protectionGroupId,long[] protectionElements) throws RemoteException, org.cagrid.gaards.csm.stubs.types.CSMInternalFault, org.cagrid.gaards.csm.stubs.types.AccessDeniedFault, org.cagrid.gaards.csm.stubs.types.CSMTransactionFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"unassignProtectionElements");
    org.cagrid.gaards.csm.stubs.UnassignProtectionElementsRequest params = new org.cagrid.gaards.csm.stubs.UnassignProtectionElementsRequest();
    params.setProtectionGroupId(protectionGroupId);
    params.setProtectionElements(protectionElements);
    org.cagrid.gaards.csm.stubs.UnassignProtectionElementsResponse boxedResult = portType.unassignProtectionElements(params);
    }
  }

  public org.cagrid.gaards.csm.bean.ProtectionElement[] getProtectionElementsAssignedToProtectionGroup(long protectionGroupId) throws RemoteException, org.cagrid.gaards.csm.stubs.types.CSMInternalFault, org.cagrid.gaards.csm.stubs.types.AccessDeniedFault, org.cagrid.gaards.csm.stubs.types.CSMTransactionFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getProtectionElementsAssignedToProtectionGroup");
    org.cagrid.gaards.csm.stubs.GetProtectionElementsAssignedToProtectionGroupRequest params = new org.cagrid.gaards.csm.stubs.GetProtectionElementsAssignedToProtectionGroupRequest();
    params.setProtectionGroupId(protectionGroupId);
    org.cagrid.gaards.csm.stubs.GetProtectionElementsAssignedToProtectionGroupResponse boxedResult = portType.getProtectionElementsAssignedToProtectionGroup(params);
    return boxedResult.getProtectionElement();
    }
  }

  public void assignProtectionGroup(long parentProtectionGroupId,long childProtectionGroupId) throws RemoteException, org.cagrid.gaards.csm.stubs.types.CSMInternalFault, org.cagrid.gaards.csm.stubs.types.AccessDeniedFault, org.cagrid.gaards.csm.stubs.types.CSMTransactionFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"assignProtectionGroup");
    org.cagrid.gaards.csm.stubs.AssignProtectionGroupRequest params = new org.cagrid.gaards.csm.stubs.AssignProtectionGroupRequest();
    params.setParentProtectionGroupId(parentProtectionGroupId);
    params.setChildProtectionGroupId(childProtectionGroupId);
    org.cagrid.gaards.csm.stubs.AssignProtectionGroupResponse boxedResult = portType.assignProtectionGroup(params);
    }
  }

  public void unassignProtectionGroup(long parentProtectionGroupId,long childProtectionGroupId) throws RemoteException, org.cagrid.gaards.csm.stubs.types.CSMInternalFault, org.cagrid.gaards.csm.stubs.types.AccessDeniedFault, org.cagrid.gaards.csm.stubs.types.CSMTransactionFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"unassignProtectionGroup");
    org.cagrid.gaards.csm.stubs.UnassignProtectionGroupRequest params = new org.cagrid.gaards.csm.stubs.UnassignProtectionGroupRequest();
    params.setParentProtectionGroupId(parentProtectionGroupId);
    params.setChildProtectionGroupId(childProtectionGroupId);
    org.cagrid.gaards.csm.stubs.UnassignProtectionGroupResponse boxedResult = portType.unassignProtectionGroup(params);
    }
  }

  public org.cagrid.gaards.csm.bean.ProtectionGroup[] getChildProtectionGroups(long protectionGroupId) throws RemoteException, org.cagrid.gaards.csm.stubs.types.CSMInternalFault, org.cagrid.gaards.csm.stubs.types.AccessDeniedFault, org.cagrid.gaards.csm.stubs.types.CSMTransactionFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getChildProtectionGroups");
    org.cagrid.gaards.csm.stubs.GetChildProtectionGroupsRequest params = new org.cagrid.gaards.csm.stubs.GetChildProtectionGroupsRequest();
    params.setProtectionGroupId(protectionGroupId);
    org.cagrid.gaards.csm.stubs.GetChildProtectionGroupsResponse boxedResult = portType.getChildProtectionGroups(params);
    return boxedResult.getProtectionGroup();
    }
  }

  public org.cagrid.gaards.csm.bean.Group[] getGroups(org.cagrid.gaards.csm.bean.GroupSearchCriteria criteria) throws RemoteException, org.cagrid.gaards.csm.stubs.types.CSMInternalFault, org.cagrid.gaards.csm.stubs.types.AccessDeniedFault, org.cagrid.gaards.csm.stubs.types.CSMTransactionFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getGroups");
    org.cagrid.gaards.csm.stubs.GetGroupsRequest params = new org.cagrid.gaards.csm.stubs.GetGroupsRequest();
    org.cagrid.gaards.csm.stubs.GetGroupsRequestCriteria criteriaContainer = new org.cagrid.gaards.csm.stubs.GetGroupsRequestCriteria();
    criteriaContainer.setGroupSearchCriteria(criteria);
    params.setCriteria(criteriaContainer);
    org.cagrid.gaards.csm.stubs.GetGroupsResponse boxedResult = portType.getGroups(params);
    return boxedResult.getGroup();
    }
  }

  public org.cagrid.gaards.csm.bean.RemoteGroup linkRemoteGroup(org.cagrid.gaards.csm.bean.LinkRemoteGroupRequest req) throws RemoteException, org.cagrid.gaards.csm.stubs.types.CSMInternalFault, org.cagrid.gaards.csm.stubs.types.AccessDeniedFault, org.cagrid.gaards.csm.stubs.types.CSMTransactionFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"linkRemoteGroup");
    org.cagrid.gaards.csm.stubs.LinkRemoteGroupRequest params = new org.cagrid.gaards.csm.stubs.LinkRemoteGroupRequest();
    org.cagrid.gaards.csm.stubs.LinkRemoteGroupRequestReq reqContainer = new org.cagrid.gaards.csm.stubs.LinkRemoteGroupRequestReq();
    reqContainer.setLinkRemoteGroupRequest(req);
    params.setReq(reqContainer);
    org.cagrid.gaards.csm.stubs.LinkRemoteGroupResponse boxedResult = portType.linkRemoteGroup(params);
    return boxedResult.getRemoteGroup();
    }
  }

  public void unlinkRemoteGroup(long applicationId,long groupId) throws RemoteException, org.cagrid.gaards.csm.stubs.types.CSMInternalFault, org.cagrid.gaards.csm.stubs.types.AccessDeniedFault, org.cagrid.gaards.csm.stubs.types.CSMTransactionFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"unlinkRemoteGroup");
    org.cagrid.gaards.csm.stubs.UnlinkRemoteGroupRequest params = new org.cagrid.gaards.csm.stubs.UnlinkRemoteGroupRequest();
    params.setApplicationId(applicationId);
    params.setGroupId(groupId);
    org.cagrid.gaards.csm.stubs.UnlinkRemoteGroupResponse boxedResult = portType.unlinkRemoteGroup(params);
    }
  }

  public org.cagrid.gaards.csm.bean.LocalGroup createGroup(org.cagrid.gaards.csm.bean.LocalGroup grp) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"createGroup");
    org.cagrid.gaards.csm.stubs.CreateGroupRequest params = new org.cagrid.gaards.csm.stubs.CreateGroupRequest();
    org.cagrid.gaards.csm.stubs.CreateGroupRequestGrp grpContainer = new org.cagrid.gaards.csm.stubs.CreateGroupRequestGrp();
    grpContainer.setLocalGroup(grp);
    params.setGrp(grpContainer);
    org.cagrid.gaards.csm.stubs.CreateGroupResponse boxedResult = portType.createGroup(params);
    return boxedResult.getLocalGroup();
    }
  }

  public void removeGroup(long groupId) throws RemoteException, org.cagrid.gaards.csm.stubs.types.CSMInternalFault, org.cagrid.gaards.csm.stubs.types.AccessDeniedFault, org.cagrid.gaards.csm.stubs.types.CSMTransactionFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"removeGroup");
    org.cagrid.gaards.csm.stubs.RemoveGroupRequest params = new org.cagrid.gaards.csm.stubs.RemoveGroupRequest();
    params.setGroupId(groupId);
    org.cagrid.gaards.csm.stubs.RemoveGroupResponse boxedResult = portType.removeGroup(params);
    }
  }

  public org.cagrid.gaards.csm.bean.LocalGroup modifyGroup(org.cagrid.gaards.csm.bean.LocalGroup grp) throws RemoteException, org.cagrid.gaards.csm.stubs.types.CSMInternalFault, org.cagrid.gaards.csm.stubs.types.AccessDeniedFault, org.cagrid.gaards.csm.stubs.types.CSMTransactionFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"modifyGroup");
    org.cagrid.gaards.csm.stubs.ModifyGroupRequest params = new org.cagrid.gaards.csm.stubs.ModifyGroupRequest();
    org.cagrid.gaards.csm.stubs.ModifyGroupRequestGrp grpContainer = new org.cagrid.gaards.csm.stubs.ModifyGroupRequestGrp();
    grpContainer.setLocalGroup(grp);
    params.setGrp(grpContainer);
    org.cagrid.gaards.csm.stubs.ModifyGroupResponse boxedResult = portType.modifyGroup(params);
    return boxedResult.getLocalGroup();
    }
  }

  public void addUsersToGroup(long groupId,java.lang.String[] users) throws RemoteException, org.cagrid.gaards.csm.stubs.types.CSMInternalFault, org.cagrid.gaards.csm.stubs.types.AccessDeniedFault, org.cagrid.gaards.csm.stubs.types.CSMTransactionFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"addUsersToGroup");
    org.cagrid.gaards.csm.stubs.AddUsersToGroupRequest params = new org.cagrid.gaards.csm.stubs.AddUsersToGroupRequest();
    params.setGroupId(groupId);
    params.setUsers(users);
    org.cagrid.gaards.csm.stubs.AddUsersToGroupResponse boxedResult = portType.addUsersToGroup(params);
    }
  }

  public void removeUsersFromGroup(long groupId,java.lang.String[] users) throws RemoteException, org.cagrid.gaards.csm.stubs.types.CSMInternalFault, org.cagrid.gaards.csm.stubs.types.CSMTransactionFault, org.cagrid.gaards.csm.stubs.types.AccessDeniedFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"removeUsersFromGroup");
    org.cagrid.gaards.csm.stubs.RemoveUsersFromGroupRequest params = new org.cagrid.gaards.csm.stubs.RemoveUsersFromGroupRequest();
    params.setGroupId(groupId);
    params.setUsers(users);
    org.cagrid.gaards.csm.stubs.RemoveUsersFromGroupResponse boxedResult = portType.removeUsersFromGroup(params);
    }
  }

  public java.lang.String[] getUsersInGroup(long groupId) throws RemoteException, org.cagrid.gaards.csm.stubs.types.CSMInternalFault, org.cagrid.gaards.csm.stubs.types.AccessDeniedFault, org.cagrid.gaards.csm.stubs.types.CSMTransactionFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getUsersInGroup");
    org.cagrid.gaards.csm.stubs.GetUsersInGroupRequest params = new org.cagrid.gaards.csm.stubs.GetUsersInGroupRequest();
    params.setGroupId(groupId);
    org.cagrid.gaards.csm.stubs.GetUsersInGroupResponse boxedResult = portType.getUsersInGroup(params);
    return boxedResult.getResponse();
    }
  }

  public org.cagrid.gaards.csm.bean.Privilege createPrivilege(org.cagrid.gaards.csm.bean.Privilege privilege) throws RemoteException, org.cagrid.gaards.csm.stubs.types.CSMInternalFault, org.cagrid.gaards.csm.stubs.types.AccessDeniedFault, org.cagrid.gaards.csm.stubs.types.CSMTransactionFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"createPrivilege");
    org.cagrid.gaards.csm.stubs.CreatePrivilegeRequest params = new org.cagrid.gaards.csm.stubs.CreatePrivilegeRequest();
    org.cagrid.gaards.csm.stubs.CreatePrivilegeRequestPrivilege privilegeContainer = new org.cagrid.gaards.csm.stubs.CreatePrivilegeRequestPrivilege();
    privilegeContainer.setPrivilege(privilege);
    params.setPrivilege(privilegeContainer);
    org.cagrid.gaards.csm.stubs.CreatePrivilegeResponse boxedResult = portType.createPrivilege(params);
    return boxedResult.getPrivilege();
    }
  }

  public org.cagrid.gaards.csm.bean.Privilege[] getPrivileges(org.cagrid.gaards.csm.bean.PrivilegeSearchCriteria criteria) throws RemoteException, org.cagrid.gaards.csm.stubs.types.CSMInternalFault, org.cagrid.gaards.csm.stubs.types.CSMTransactionFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getPrivileges");
    org.cagrid.gaards.csm.stubs.GetPrivilegesRequest params = new org.cagrid.gaards.csm.stubs.GetPrivilegesRequest();
    org.cagrid.gaards.csm.stubs.GetPrivilegesRequestCriteria criteriaContainer = new org.cagrid.gaards.csm.stubs.GetPrivilegesRequestCriteria();
    criteriaContainer.setPrivilegeSearchCriteria(criteria);
    params.setCriteria(criteriaContainer);
    org.cagrid.gaards.csm.stubs.GetPrivilegesResponse boxedResult = portType.getPrivileges(params);
    return boxedResult.getPrivilege();
    }
  }

  public void removePrivilege(long privilegeId) throws RemoteException, org.cagrid.gaards.csm.stubs.types.CSMInternalFault, org.cagrid.gaards.csm.stubs.types.AccessDeniedFault, org.cagrid.gaards.csm.stubs.types.CSMTransactionFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"removePrivilege");
    org.cagrid.gaards.csm.stubs.RemovePrivilegeRequest params = new org.cagrid.gaards.csm.stubs.RemovePrivilegeRequest();
    params.setPrivilegeId(privilegeId);
    org.cagrid.gaards.csm.stubs.RemovePrivilegeResponse boxedResult = portType.removePrivilege(params);
    }
  }

  public org.cagrid.gaards.csm.bean.Privilege modifyPrivilege(org.cagrid.gaards.csm.bean.Privilege privilege) throws RemoteException, org.cagrid.gaards.csm.stubs.types.CSMInternalFault, org.cagrid.gaards.csm.stubs.types.AccessDeniedFault, org.cagrid.gaards.csm.stubs.types.CSMTransactionFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"modifyPrivilege");
    org.cagrid.gaards.csm.stubs.ModifyPrivilegeRequest params = new org.cagrid.gaards.csm.stubs.ModifyPrivilegeRequest();
    org.cagrid.gaards.csm.stubs.ModifyPrivilegeRequestPrivilege privilegeContainer = new org.cagrid.gaards.csm.stubs.ModifyPrivilegeRequestPrivilege();
    privilegeContainer.setPrivilege(privilege);
    params.setPrivilege(privilegeContainer);
    org.cagrid.gaards.csm.stubs.ModifyPrivilegeResponse boxedResult = portType.modifyPrivilege(params);
    return boxedResult.getPrivilege();
    }
  }

  public org.cagrid.gaards.csm.bean.Role createRole(org.cagrid.gaards.csm.bean.Role role) throws RemoteException, org.cagrid.gaards.csm.stubs.types.CSMInternalFault, org.cagrid.gaards.csm.stubs.types.AccessDeniedFault, org.cagrid.gaards.csm.stubs.types.CSMTransactionFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"createRole");
    org.cagrid.gaards.csm.stubs.CreateRoleRequest params = new org.cagrid.gaards.csm.stubs.CreateRoleRequest();
    org.cagrid.gaards.csm.stubs.CreateRoleRequestRole roleContainer = new org.cagrid.gaards.csm.stubs.CreateRoleRequestRole();
    roleContainer.setRole(role);
    params.setRole(roleContainer);
    org.cagrid.gaards.csm.stubs.CreateRoleResponse boxedResult = portType.createRole(params);
    return boxedResult.getRole();
    }
  }

  public org.cagrid.gaards.csm.bean.Role[] getRoles(org.cagrid.gaards.csm.bean.RoleSearchCriteria criteria) throws RemoteException, org.cagrid.gaards.csm.stubs.types.CSMInternalFault, org.cagrid.gaards.csm.stubs.types.AccessDeniedFault, org.cagrid.gaards.csm.stubs.types.CSMTransactionFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getRoles");
    org.cagrid.gaards.csm.stubs.GetRolesRequest params = new org.cagrid.gaards.csm.stubs.GetRolesRequest();
    org.cagrid.gaards.csm.stubs.GetRolesRequestCriteria criteriaContainer = new org.cagrid.gaards.csm.stubs.GetRolesRequestCriteria();
    criteriaContainer.setRoleSearchCriteria(criteria);
    params.setCriteria(criteriaContainer);
    org.cagrid.gaards.csm.stubs.GetRolesResponse boxedResult = portType.getRoles(params);
    return boxedResult.getRole();
    }
  }

  public org.cagrid.gaards.csm.bean.Role modifyRole(org.cagrid.gaards.csm.bean.Role role) throws RemoteException, org.cagrid.gaards.csm.stubs.types.CSMInternalFault, org.cagrid.gaards.csm.stubs.types.AccessDeniedFault, org.cagrid.gaards.csm.stubs.types.CSMTransactionFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"modifyRole");
    org.cagrid.gaards.csm.stubs.ModifyRoleRequest params = new org.cagrid.gaards.csm.stubs.ModifyRoleRequest();
    org.cagrid.gaards.csm.stubs.ModifyRoleRequestRole roleContainer = new org.cagrid.gaards.csm.stubs.ModifyRoleRequestRole();
    roleContainer.setRole(role);
    params.setRole(roleContainer);
    org.cagrid.gaards.csm.stubs.ModifyRoleResponse boxedResult = portType.modifyRole(params);
    return boxedResult.getRole();
    }
  }

  public void removeRole(long roleId) throws RemoteException, org.cagrid.gaards.csm.stubs.types.CSMInternalFault, org.cagrid.gaards.csm.stubs.types.AccessDeniedFault, org.cagrid.gaards.csm.stubs.types.CSMTransactionFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"removeRole");
    org.cagrid.gaards.csm.stubs.RemoveRoleRequest params = new org.cagrid.gaards.csm.stubs.RemoveRoleRequest();
    params.setRoleId(roleId);
    org.cagrid.gaards.csm.stubs.RemoveRoleResponse boxedResult = portType.removeRole(params);
    }
  }

  public void setPrivilegesForRole(long roleId,long[] privs) throws RemoteException, org.cagrid.gaards.csm.stubs.types.CSMInternalFault, org.cagrid.gaards.csm.stubs.types.AccessDeniedFault, org.cagrid.gaards.csm.stubs.types.CSMTransactionFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"setPrivilegesForRole");
    org.cagrid.gaards.csm.stubs.SetPrivilegesForRoleRequest params = new org.cagrid.gaards.csm.stubs.SetPrivilegesForRoleRequest();
    params.setRoleId(roleId);
    params.setPrivs(privs);
    org.cagrid.gaards.csm.stubs.SetPrivilegesForRoleResponse boxedResult = portType.setPrivilegesForRole(params);
    }
  }

  public org.cagrid.gaards.csm.bean.Privilege[] getPrivilegesForRole(long roleId) throws RemoteException, org.cagrid.gaards.csm.stubs.types.CSMInternalFault, org.cagrid.gaards.csm.stubs.types.AccessDeniedFault, org.cagrid.gaards.csm.stubs.types.CSMTransactionFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getPrivilegesForRole");
    org.cagrid.gaards.csm.stubs.GetPrivilegesForRoleRequest params = new org.cagrid.gaards.csm.stubs.GetPrivilegesForRoleRequest();
    params.setRoleId(roleId);
    org.cagrid.gaards.csm.stubs.GetPrivilegesForRoleResponse boxedResult = portType.getPrivilegesForRole(params);
    return boxedResult.getPrivilege();
    }
  }

  public void grantGroupPermission(long groupId,long roleId,long protectionGroupId) throws RemoteException, org.cagrid.gaards.csm.stubs.types.CSMInternalFault, org.cagrid.gaards.csm.stubs.types.AccessDeniedFault, org.cagrid.gaards.csm.stubs.types.CSMTransactionFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"grantGroupPermission");
    org.cagrid.gaards.csm.stubs.GrantGroupPermissionRequest params = new org.cagrid.gaards.csm.stubs.GrantGroupPermissionRequest();
    params.setGroupId(groupId);
    params.setRoleId(roleId);
    params.setProtectionGroupId(protectionGroupId);
    org.cagrid.gaards.csm.stubs.GrantGroupPermissionResponse boxedResult = portType.grantGroupPermission(params);
    }
  }

  public void revokeGroupPermission(long groupId,long roleId,long protectionGroupId) throws RemoteException, org.cagrid.gaards.csm.stubs.types.CSMInternalFault, org.cagrid.gaards.csm.stubs.types.AccessDeniedFault, org.cagrid.gaards.csm.stubs.types.CSMTransactionFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"revokeGroupPermission");
    org.cagrid.gaards.csm.stubs.RevokeGroupPermissionRequest params = new org.cagrid.gaards.csm.stubs.RevokeGroupPermissionRequest();
    params.setGroupId(groupId);
    params.setRoleId(roleId);
    params.setProtectionGroupId(protectionGroupId);
    org.cagrid.gaards.csm.stubs.RevokeGroupPermissionResponse boxedResult = portType.revokeGroupPermission(params);
    }
  }

  public void grantUserPermission(java.lang.String userIdentity,long roleId,long protectionGroupId) throws RemoteException, org.cagrid.gaards.csm.stubs.types.CSMInternalFault, org.cagrid.gaards.csm.stubs.types.AccessDeniedFault, org.cagrid.gaards.csm.stubs.types.CSMTransactionFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"grantUserPermission");
    org.cagrid.gaards.csm.stubs.GrantUserPermissionRequest params = new org.cagrid.gaards.csm.stubs.GrantUserPermissionRequest();
    params.setUserIdentity(userIdentity);
    params.setRoleId(roleId);
    params.setProtectionGroupId(protectionGroupId);
    org.cagrid.gaards.csm.stubs.GrantUserPermissionResponse boxedResult = portType.grantUserPermission(params);
    }
  }

  public void revokeUserPermission(java.lang.String userIdentity,long roleId,long protectionGroupId) throws RemoteException, org.cagrid.gaards.csm.stubs.types.CSMInternalFault, org.cagrid.gaards.csm.stubs.types.AccessDeniedFault, org.cagrid.gaards.csm.stubs.types.CSMTransactionFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"revokeUserPermission");
    org.cagrid.gaards.csm.stubs.RevokeUserPermissionRequest params = new org.cagrid.gaards.csm.stubs.RevokeUserPermissionRequest();
    params.setUserIdentity(userIdentity);
    params.setRoleId(roleId);
    params.setProtectionGroupId(protectionGroupId);
    org.cagrid.gaards.csm.stubs.RevokeUserPermissionResponse boxedResult = portType.revokeUserPermission(params);
    }
  }

  public org.cagrid.gaards.csm.bean.Permission[] getPermissionsForUser(long applicationId,java.lang.String userIdentity) throws RemoteException, org.cagrid.gaards.csm.stubs.types.CSMInternalFault, org.cagrid.gaards.csm.stubs.types.AccessDeniedFault, org.cagrid.gaards.csm.stubs.types.CSMTransactionFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getPermissionsForUser");
    org.cagrid.gaards.csm.stubs.GetPermissionsForUserRequest params = new org.cagrid.gaards.csm.stubs.GetPermissionsForUserRequest();
    params.setApplicationId(applicationId);
    params.setUserIdentity(userIdentity);
    org.cagrid.gaards.csm.stubs.GetPermissionsForUserResponse boxedResult = portType.getPermissionsForUser(params);
    return boxedResult.getPermission();
    }
  }

  public org.cagrid.gaards.csm.bean.Permission[] getPermissionForGroup(long groupId) throws RemoteException, org.cagrid.gaards.csm.stubs.types.CSMInternalFault, org.cagrid.gaards.csm.stubs.types.AccessDeniedFault, org.cagrid.gaards.csm.stubs.types.CSMTransactionFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getPermissionForGroup");
    org.cagrid.gaards.csm.stubs.GetPermissionForGroupRequest params = new org.cagrid.gaards.csm.stubs.GetPermissionForGroupRequest();
    params.setGroupId(groupId);
    org.cagrid.gaards.csm.stubs.GetPermissionForGroupResponse boxedResult = portType.getPermissionForGroup(params);
    return boxedResult.getPermission();
    }
  }

  public org.cagrid.gaards.csm.bean.ProtectionGroup getParentProtectionGroup(long childProtectionGroupId) throws RemoteException, org.cagrid.gaards.csm.stubs.types.CSMInternalFault, org.cagrid.gaards.csm.stubs.types.AccessDeniedFault, org.cagrid.gaards.csm.stubs.types.CSMTransactionFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getParentProtectionGroup");
    org.cagrid.gaards.csm.stubs.GetParentProtectionGroupRequest params = new org.cagrid.gaards.csm.stubs.GetParentProtectionGroupRequest();
    params.setChildProtectionGroupId(childProtectionGroupId);
    org.cagrid.gaards.csm.stubs.GetParentProtectionGroupResponse boxedResult = portType.getParentProtectionGroup(params);
    return boxedResult.getProtectionGroup();
    }
  }

  public boolean checkPermission(long applicationId,java.lang.String userIdentity,java.lang.String objectId,java.lang.String privilege) throws RemoteException, org.cagrid.gaards.csm.stubs.types.CSMInternalFault, org.cagrid.gaards.csm.stubs.types.CSMTransactionFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"checkPermission");
    org.cagrid.gaards.csm.stubs.CheckPermissionRequest params = new org.cagrid.gaards.csm.stubs.CheckPermissionRequest();
    params.setApplicationId(applicationId);
    params.setUserIdentity(userIdentity);
    params.setObjectId(objectId);
    params.setPrivilege(privilege);
    org.cagrid.gaards.csm.stubs.CheckPermissionResponse boxedResult = portType.checkPermission(params);
    return boxedResult.isResponse();
    }
  }

  public boolean checkAttributeBasedPermission(long applicationId,java.lang.String userIdentity,java.lang.String objectId,java.lang.String attributeName,java.lang.String attributeValue,java.lang.String privilege) throws RemoteException, org.cagrid.gaards.csm.stubs.types.CSMInternalFault, org.cagrid.gaards.csm.stubs.types.CSMTransactionFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"checkAttributeBasedPermission");
    org.cagrid.gaards.csm.stubs.CheckAttributeBasedPermissionRequest params = new org.cagrid.gaards.csm.stubs.CheckAttributeBasedPermissionRequest();
    params.setApplicationId(applicationId);
    params.setUserIdentity(userIdentity);
    params.setObjectId(objectId);
    params.setAttributeName(attributeName);
    params.setAttributeValue(attributeValue);
    params.setPrivilege(privilege);
    org.cagrid.gaards.csm.stubs.CheckAttributeBasedPermissionResponse boxedResult = portType.checkAttributeBasedPermission(params);
    return boxedResult.isResponse();
    }
  }

  public org.cagrid.gaards.csm.bean.FilterClause createFilterClause(org.cagrid.gaards.csm.bean.FilterClause filter) throws RemoteException, org.cagrid.gaards.csm.stubs.types.CSMInternalFault, org.cagrid.gaards.csm.stubs.types.AccessDeniedFault, org.cagrid.gaards.csm.stubs.types.CSMTransactionFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"createFilterClause");
    org.cagrid.gaards.csm.stubs.CreateFilterClauseRequest params = new org.cagrid.gaards.csm.stubs.CreateFilterClauseRequest();
    org.cagrid.gaards.csm.stubs.CreateFilterClauseRequestFilter filterContainer = new org.cagrid.gaards.csm.stubs.CreateFilterClauseRequestFilter();
    filterContainer.setFilterClause(filter);
    params.setFilter(filterContainer);
    org.cagrid.gaards.csm.stubs.CreateFilterClauseResponse boxedResult = portType.createFilterClause(params);
    return boxedResult.getFilterClause();
    }
  }

  public org.cagrid.gaards.csm.bean.FilterClause modifyFilterClause(long filterClauseId,java.lang.String sqlForGroup,java.lang.String sqlForUser) throws RemoteException, org.cagrid.gaards.csm.stubs.types.CSMInternalFault, org.cagrid.gaards.csm.stubs.types.AccessDeniedFault, org.cagrid.gaards.csm.stubs.types.CSMTransactionFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"modifyFilterClause");
    org.cagrid.gaards.csm.stubs.ModifyFilterClauseRequest params = new org.cagrid.gaards.csm.stubs.ModifyFilterClauseRequest();
    params.setFilterClauseId(filterClauseId);
    params.setSqlForGroup(sqlForGroup);
    params.setSqlForUser(sqlForUser);
    org.cagrid.gaards.csm.stubs.ModifyFilterClauseResponse boxedResult = portType.modifyFilterClause(params);
    return boxedResult.getFilterClause();
    }
  }

  public org.cagrid.gaards.csm.bean.FilterClause[] getFilterClauses(org.cagrid.gaards.csm.bean.FilterClauseSearchCriteria criteria) throws RemoteException, org.cagrid.gaards.csm.stubs.types.CSMInternalFault, org.cagrid.gaards.csm.stubs.types.AccessDeniedFault, org.cagrid.gaards.csm.stubs.types.CSMTransactionFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getFilterClauses");
    org.cagrid.gaards.csm.stubs.GetFilterClausesRequest params = new org.cagrid.gaards.csm.stubs.GetFilterClausesRequest();
    org.cagrid.gaards.csm.stubs.GetFilterClausesRequestCriteria criteriaContainer = new org.cagrid.gaards.csm.stubs.GetFilterClausesRequestCriteria();
    criteriaContainer.setFilterClauseSearchCriteria(criteria);
    params.setCriteria(criteriaContainer);
    org.cagrid.gaards.csm.stubs.GetFilterClausesResponse boxedResult = portType.getFilterClauses(params);
    return boxedResult.getFilterClause();
    }
  }

  public void removeFilterClause(long filterClauseId) throws RemoteException, org.cagrid.gaards.csm.stubs.types.CSMInternalFault, org.cagrid.gaards.csm.stubs.types.AccessDeniedFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"removeFilterClause");
    org.cagrid.gaards.csm.stubs.RemoveFilterClauseRequest params = new org.cagrid.gaards.csm.stubs.RemoveFilterClauseRequest();
    params.setFilterClauseId(filterClauseId);
    org.cagrid.gaards.csm.stubs.RemoveFilterClauseResponse boxedResult = portType.removeFilterClause(params);
    }
  }

  public org.cagrid.gaards.csm.filters.client.FilterCreatorClient createFilterCreator(long applicationID,byte[] applicationBeansJar,byte[] applicationORMJar,java.lang.String hibernateConfig) throws RemoteException, org.apache.axis.types.URI.MalformedURIException, org.cagrid.gaards.csm.stubs.types.HibernateSessionCreationFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"createFilterCreator");
    org.cagrid.gaards.csm.stubs.CreateFilterCreatorRequest params = new org.cagrid.gaards.csm.stubs.CreateFilterCreatorRequest();
    params.setApplicationID(applicationID);
    params.setApplicationBeansJar(applicationBeansJar);
    params.setApplicationORMJar(applicationORMJar);
    params.setHibernateConfig(hibernateConfig);
    org.cagrid.gaards.csm.stubs.CreateFilterCreatorResponse boxedResult = portType.createFilterCreator(params);
    EndpointReferenceType ref = boxedResult.getFilterCreatorReference().getEndpointReference();
    return new org.cagrid.gaards.csm.filters.client.FilterCreatorClient(ref,getProxy());
    }
  }

  public org.cagrid.gaards.csm.filters.client.FilterCreatorClient createFilterCreatorFromDomainModel(long applicationID,gov.nih.nci.cagrid.metadata.dataservice.DomainModel domainModel) throws RemoteException, org.apache.axis.types.URI.MalformedURIException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"createFilterCreatorFromDomainModel");
    org.cagrid.gaards.csm.stubs.CreateFilterCreatorFromDomainModelRequest params = new org.cagrid.gaards.csm.stubs.CreateFilterCreatorFromDomainModelRequest();
    params.setApplicationID(applicationID);
    org.cagrid.gaards.csm.stubs.CreateFilterCreatorFromDomainModelRequestDomainModel domainModelContainer = new org.cagrid.gaards.csm.stubs.CreateFilterCreatorFromDomainModelRequestDomainModel();
    domainModelContainer.setDomainModel(domainModel);
    params.setDomainModel(domainModelContainer);
    org.cagrid.gaards.csm.stubs.CreateFilterCreatorFromDomainModelResponse boxedResult = portType.createFilterCreatorFromDomainModel(params);
    EndpointReferenceType ref = boxedResult.getFilterCreatorReference().getEndpointReference();
    return new org.cagrid.gaards.csm.filters.client.FilterCreatorClient(ref,getProxy());
    }
  }

}
