<%@ jet package="edu.umn.msi.cagrid.introduce.interfaces"
  class="ImplementingClientGenerator"
  skeleton="ImplementingClientGenerator.skeleton.java" %>
package <%= getPackage() %>;

import java.rmi.RemoteException;

import org.apache.axis.message.addressing.EndpointReferenceType;
import org.apache.axis.types.URI.MalformedURIException;
import org.globus.gsi.GlobusCredential;

public class <%= getClientClassName() %> <%= getInterfacesString() %>  {
  private <%= getCaGridClientClassName() %> caGridClient;

  public <%= getClientClassName() %>(String url) throws MalformedURIException, RemoteException {
    initialize(new <%= getCaGridClientClassName() %>(url));
  }
  
  public <%= getClientClassName() %>(String url, GlobusCredential proxy) throws MalformedURIException, RemoteException {
    initialize(new <%= getCaGridClientClassName() %>(url, proxy));
  }

  public <%= getClientClassName() %>(EndpointReferenceType epr) throws MalformedURIException, RemoteException {
    initialize(new <%= getCaGridClientClassName() %>(epr));
  }

  public <%= getClientClassName() %>(EndpointReferenceType epr, GlobusCredential proxy) throws MalformedURIException, RemoteException {
    initialize(new <%= getCaGridClientClassName() %>(epr, proxy));
  }
  
  public <%= getClientClassName() %>(<%= getCaGridClientClassName() %> caGridClient) {
    initialize(caGridClient);
  }
        
  private void initialize(<%= getCaGridClientClassName() %> caGridClient) {
    this.caGridClient = caGridClient;
  }		        

  public <%= getCaGridClientClassName() %> getCaGridClient() {
  	return caGridClient;
  }
  
<% 
Iterator<MethodConfiguration> methods = getAllMethods();
while(methods.hasNext()) 
{
  MethodConfiguration method = methods.next(); 
%>     
  <%= method.buildMethodSignatureWithExceptions(true) %> 
  {
<%
  if(method.getExclude()) 
  {
%> 
    throw new UnsupportedOperationException("The caGrid service does not support this method."); 
<%
  }
  else if(method.getServiceMethodName() != null && !method.getServiceMethodName().equals("")) {
%>
    <%= getDelegatedCallStatement(method) %>
<%  
  }
  else if(!RemoteExceptionUtils.canThrowRemoteException(method.getMethod())) 
  {
    usedRemoteRuntimeException();
%>
    try 
    {
      <%= getDelegatedCallStatement(method) %>
    }
<%
  for(Class<?> exceptionType : method.getMethod().getExceptionTypes())
  {
    if(java.rmi.RemoteException.class.isAssignableFrom(exceptionType)) 
    {
%>
    catch(<%= exceptionType.getCanonicalName() %> e)
    {
      // Just throw this subclass of RemoteException the declaration allows
      // it, no need to wrap it in a RemoteRuntimeException
      throw e;
    }
<%
    }
  } // end for(exceptionType) loop
%>
    catch(RemoteException e)
    {
      throw new RemoteRuntimeException(e);
    }
<%
  }
  else
  {
%>
    <%= getDelegatedCallStatement(method) %>
<% 
  }
%>
  }
  
<% 
} // Closes the while(methods.hasNext()) loop

if(getUsedRemoteRuntimeException()) 
{
%>
  /**
   * The caGrid client methods throw RemoteExceptions. But most
   * methods of most interfaces do not declare RemoteExceptions.
   * For that reason when building a client class that implements
   * methods that do not allow RemoteExceptions, they are caught
   * and wrapped in this RuntimeException which does not need to 
   * be declared, allowing the client class to implement the 
   * specified interface.
   *
   */
  public class RemoteRuntimeException extends RuntimeException {
   
    public RemoteRuntimeException(RemoteException exception) {
      super(exception);
    }
    
    /**
     * @return The wrapped RemoteException.
     */
    public RemoteException getRemoteException() {
      Throwable cause = getCause();
      if(cause instanceof RemoteException) {
        return (RemoteException) cause;
      } else {
        throw new IllegalStateException("getCause() did not return a RemoteException");
      }
    }
  }
<%
}
%>
}
