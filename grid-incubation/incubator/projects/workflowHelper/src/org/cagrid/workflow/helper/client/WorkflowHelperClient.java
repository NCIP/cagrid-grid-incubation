package org.cagrid.workflow.helper.client;

import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.net.InetAddress;
import java.rmi.RemoteException;

import javax.xml.namespace.QName;
import javax.xml.rpc.NamespaceConstants;

import org.apache.axis.client.Stub;
import org.apache.axis.message.addressing.EndpointReference;
import org.apache.axis.message.addressing.EndpointReferenceType;
import org.apache.axis.types.URI.MalformedURIException;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.cagrid.gaards.cds.common.ProxyLifetime;
import org.cagrid.workflow.helper.common.WorkflowHelperI;
import org.cagrid.workflow.helper.descriptor.CDSAuthenticationMethod;
import org.cagrid.workflow.helper.descriptor.ChannelProtection;
import org.cagrid.workflow.helper.descriptor.InputParameter;
import org.cagrid.workflow.helper.descriptor.InputParameterDescriptor;
import org.cagrid.workflow.helper.descriptor.OperationInputMessageDescriptor;
import org.cagrid.workflow.helper.descriptor.OperationOutputParameterTransportDescriptor;
import org.cagrid.workflow.helper.descriptor.OperationOutputTransportDescriptor;
import org.cagrid.workflow.helper.descriptor.TLSInvocationSecurityDescriptor;
import org.cagrid.workflow.helper.descriptor.WorkflowInstanceHelperDescriptor;
import org.cagrid.workflow.helper.descriptor.WorkflowInvocationHelperDescriptor;
import org.cagrid.workflow.helper.descriptor.WorkflowInvocationSecurityDescriptor;
import org.cagrid.workflow.helper.instance.client.WorkflowInstanceHelperClient;
import org.cagrid.workflow.helper.invocation.client.WorkflowInvocationHelperClient;
import org.cagrid.workflow.helper.util.CredentialHandlingUtil;
import org.globus.gsi.GlobusCredential;

/**
 * This class is autogenerated, DO NOT EDIT GENERATED GRID SERVICE ACCESS METHODS.
 *
 * This client is generated automatically by Introduce to provide a clean unwrapped API to the
 * service.
 *
 * On construction the class instance will contact the remote service and retrieve it's security
 * metadata description which it will use to configure the Stub specifically for each method call.
 * 
 * @created by Introduce Toolkit version 1.2
 */
public class WorkflowHelperClient extends WorkflowHelperClientBase implements WorkflowHelperI {	


	private static Log logger = LogFactory.getLog(WorkflowHelperClient.class);
	private static String XSD_NAMESPACE = NamespaceConstants.NSURI_SCHEMA_XSD;


	public WorkflowHelperClient(String url) throws MalformedURIException, RemoteException {
		this(url,null);	
	}

	public WorkflowHelperClient(String url, GlobusCredential proxy) throws MalformedURIException, RemoteException {
		super(url,proxy);
	}

	public WorkflowHelperClient(EndpointReferenceType epr) throws MalformedURIException, RemoteException {
		this(epr,null);
	}

	public WorkflowHelperClient(EndpointReferenceType epr, GlobusCredential proxy) throws MalformedURIException, RemoteException {
		super(epr,proxy);
	}

	public static void usage(){
		System.out.println(WorkflowHelperClient.class.getName() + " -url <service url>");
	}

	public static void main(String [] args){
		System.out.println("Running the Grid Service Client");
		try{
			if(!(args.length < 2)){
				if(args[0].equals("-url")){
					WorkflowHelperClient client = new WorkflowHelperClient(args[1]);
					// place client calls here if you want to use this main as a
					// test....
					WorkflowHelperClient wf_helper = new WorkflowHelperClient(args[1]);

					// place client calls here if you want to use this main as a
					// test....

					org.cagrid.workflow.helper.descriptor.WorkflowInstanceHelperDescriptor workflowDescriptor5 = new org.cagrid.workflow.helper.descriptor.WorkflowInstanceHelperDescriptor();

					String containerBaseURL = "http://localhost:8080";
					
					workflowDescriptor5.setWorkflowID("WorkFlow5");

					// Get helper client so we can create the invocation helpers
					WorkflowInstanceHelperClient wf_instance5 = null;
					try {
						wf_instance5 = wf_helper.createWorkflowInstanceHelper(workflowDescriptor5);
					} catch (MalformedURIException e) {
						e.printStackTrace();
					}


					// BEGIN service 4
					WorkflowInvocationHelperDescriptor operation_4 = new WorkflowInvocationHelperDescriptor();
					operation_4.setOperationQName(new QName("http://service4.introduce.cagrid.org/Service4", "PrintResultsRequest"));
					operation_4.setServiceURL(containerBaseURL+"/wsrf/services/cagrid/Service4");
					// operation_4.setOutputType(); // Void output expected



					// Creating client of service 4
					WorkflowInvocationHelperClient serviceClient_4 = null;
					try {
						serviceClient_4 = wf_instance5.createWorkflowInvocationHelper(operation_4);
					} catch (MalformedURIException e) {
						e.printStackTrace();
					}

					// For now, we don't register to get notifications, because we can't determine when a "streaming session" ends
					//this.subscribe(org.cagrid.workflow.helper.descriptor.TimestampedStatus.getTypeDesc().getXmlType(), serviceClient_4);



					// Creating Descriptor of the InputMessage
					OperationInputMessageDescriptor inputMessage_4 = new OperationInputMessageDescriptor();
					InputParameterDescriptor[] inputParam_4 = new InputParameterDescriptor[2];
					inputParam_4[0] = new InputParameterDescriptor(new QName("result1"), new QName(XSD_NAMESPACE , "string"), false);
					inputParam_4[1] = new InputParameterDescriptor(new QName("result2"), new QName(XSD_NAMESPACE, "string"), false);
					inputMessage_4.setInputParam(inputParam_4);
					serviceClient_4.configureInput(inputMessage_4);
					// End InputMessage Descriptor

					OperationOutputTransportDescriptor outputDescriptor_4 = new OperationOutputTransportDescriptor(); 
					OperationOutputParameterTransportDescriptor[] outParameterDescriptor_4 = new OperationOutputParameterTransportDescriptor[0];

					// Setting output descriptor
					outputDescriptor_4.setParamDescriptor(outParameterDescriptor_4);
					serviceClient_4.configureOutput(outputDescriptor_4);
					serviceClient_4.start();


					// Setting second parameter
					serviceClient_4.setParameter(new InputParameter("simple type's streaming", 1));
					// END service 4




					// BEGIN service 2				
					// create service 2
					WorkflowInvocationHelperDescriptor operation__2 = new WorkflowInvocationHelperDescriptor();
					operation__2.setOperationQName(new QName("http://service2.introduce.cagrid.org/Service2", "CapitalizeRequest"));
					operation__2.setServiceURL(containerBaseURL+"/wsrf/services/cagrid/Service2");
					operation__2.setOutputType(new QName(XSD_NAMESPACE, "string"));
					operation__2.setOutputIsArray(false);
					WorkflowInvocationHelperClient serviceClient_2 = null;
					try {
						serviceClient_2 = wf_instance5.createWorkflowInvocationHelper(operation__2);
					} catch (MalformedURIException e) {
						e.printStackTrace();
					}

					// For now, we don't register to get notifications, because we can't determine when a "streaming session" ends
					//this.subscribe(org.cagrid.workflow.helper.descriptor.TimestampedStatus.getTypeDesc().getXmlType(), serviceClient_2);


					// Creating Descriptor of the InputMessage
					OperationInputMessageDescriptor inputMessage__2 = new OperationInputMessageDescriptor();
					InputParameterDescriptor[] inputParam__2 = new InputParameterDescriptor[1];
					inputParam__2[0] = new InputParameterDescriptor(new QName("uncapitalized"), new QName(XSD_NAMESPACE, "string"), false);
					inputMessage__2.setInputParam(inputParam__2 );
					serviceClient_2.configureInput(inputMessage__2);
					// End InputMessage Descriptor


					// configure destination of output
					OperationOutputTransportDescriptor outputDescriptor__2 = new OperationOutputTransportDescriptor();
					OperationOutputParameterTransportDescriptor outParameterDescriptor__2 [] = new OperationOutputParameterTransportDescriptor[1];


					// 1st destination: Service4
					outParameterDescriptor__2[0] = new OperationOutputParameterTransportDescriptor();
					outParameterDescriptor__2[0].setParamIndex(0);
					outParameterDescriptor__2[0].setType(new QName(XSD_NAMESPACE, "string"));
					outParameterDescriptor__2[0].setExpectedTypeIsArray(false);
					QName[] namespaces__2 = new QName[]{ new QName(XSD_NAMESPACE, "xsd"), new QName("http://service2.introduce.cagrid.org/Service2", "ns0"),
							new QName(XSD_NAMESPACE, "xsd")};
					outParameterDescriptor__2[0].setQueryNamespaces(namespaces__2);
					outParameterDescriptor__2[0].setLocationQuery("/ns0:CapitalizeResponse");
					outParameterDescriptor__2[0].setDestinationEPR(new EndpointReferenceType[]{serviceClient_4.getEndpointReference()});


					outputDescriptor__2.setParamDescriptor(outParameterDescriptor__2);
					serviceClient_2.configureOutput(outputDescriptor__2);
					serviceClient_2.start();
					// END service 2



					// BEGIN CreateArrayService				
					// create CreateArrayService	
					org.cagrid.workflow.helper.descriptor.WorkflowInvocationHelperDescriptor operation__cas = new org.cagrid.workflow.helper.descriptor.WorkflowInvocationHelperDescriptor();
					operation__cas.setWorkflowID("GeorgeliusWorkFlow");
					operation__cas.setOperationQName(new QName("http://createarrayservice.introduce.cagrid.org/CreateArrayService", "GetArrayRequest"));
					operation__cas.setServiceURL(containerBaseURL+"/wsrf/services/cagrid/CreateArrayService");
					operation__cas.setOutputType(new QName(XSD_NAMESPACE, "string"));
					operation__cas.setOutputIsArray(true);
					WorkflowInvocationHelperClient serviceClient_cs = null;
					try {
						serviceClient_cs = wf_instance5.createWorkflowInvocationHelper(operation__cas);
					} catch (MalformedURIException e) {
						e.printStackTrace();
					}

					// For now, we don't register to get notifications, because we can't determine when a "streaming session" ends
					//this.subscribe(org.cagrid.workflow.helper.descriptor.TimestampedStatus.getTypeDesc().getXmlType(), serviceClient_cs);


					// Creating Descriptor of the InputMessage
					org.cagrid.workflow.helper.descriptor.OperationInputMessageDescriptor inputMessage__cas = new OperationInputMessageDescriptor();
					InputParameterDescriptor[] inputParams__cas = new InputParameterDescriptor[0];
					inputMessage__cas.setInputParam(inputParams__cas);
					serviceClient_cs.configureInput(inputMessage__cas);
					// End InputMessage Descriptor

					// Creating the outputDescriptor of the only service that will receive the output (Service2::capitalize)
					OperationOutputTransportDescriptor outputDescriptor_cs = new OperationOutputTransportDescriptor();
					OperationOutputParameterTransportDescriptor outParameterDescriptor_cs [] = new OperationOutputParameterTransportDescriptor[1];

					// First destination: Service2::capitalize
					outParameterDescriptor_cs[0] = new OperationOutputParameterTransportDescriptor();
					outParameterDescriptor_cs[0].setParamIndex(0);
					outParameterDescriptor_cs[0].setType(new QName( XSD_NAMESPACE, "string"));
					outParameterDescriptor_cs[0].setExpectedTypeIsArray(false);
					outParameterDescriptor_cs[0].setQueryNamespaces(new QName[]{ new QName("http://createarrayservice.introduce.cagrid.org/CreateArrayService", "ns0"),
							new QName(XSD_NAMESPACE,"xsd")});
					outParameterDescriptor_cs[0].setLocationQuery("/ns0:GetArrayResponse");
					outParameterDescriptor_cs[0].setDestinationEPR(new EndpointReferenceType[]{serviceClient_2.getEndpointReference()});  // takes the reference to Service2::capitalize


					outputDescriptor_cs.setParamDescriptor(outParameterDescriptor_cs);
					serviceClient_cs.configureOutput(outputDescriptor_cs);
					serviceClient_cs.start();


					// END CreateArrayService

				}

				return;

			} else {
				usage();
				System.exit(1);
			}
		} catch (Exception e) {
			e.printStackTrace();
			System.exit(1);
		}
	}

	public static void printDescriptor(org.cagrid.workflow.helper.descriptor.WorkflowInvocationHelperDescriptor workflowDescriptor){
		logger.debug("Printing Descriptor content");
		logger.debug("ID = "+workflowDescriptor.getWorkflowID());
		logger.debug("URL = "+workflowDescriptor.getServiceURL());
		if(workflowDescriptor.getOperationQName() != null){
			logger.debug( "OperationQname = "+ workflowDescriptor.getOperationQName().toString());
		}else{
			return;
		}
	}

	public org.oasis.wsrf.properties.GetMultipleResourcePropertiesResponse getMultipleResourceProperties(org.oasis.wsrf.properties.GetMultipleResourceProperties_Element params) throws RemoteException {
		synchronized(portTypeMutex){
			configureStubSecurity((Stub)portType,"getMultipleResourceProperties");
			return portType.getMultipleResourceProperties(params);
		}
	}

	public org.oasis.wsrf.properties.GetResourcePropertyResponse getResourceProperty(javax.xml.namespace.QName params) throws RemoteException {
		synchronized(portTypeMutex){
			configureStubSecurity((Stub)portType,"getResourceProperty");
			return portType.getResourceProperty(params);
		}
	}

	public org.oasis.wsrf.properties.QueryResourcePropertiesResponse queryResourceProperties(org.oasis.wsrf.properties.QueryResourceProperties_Element params) throws RemoteException {
		synchronized(portTypeMutex){
			configureStubSecurity((Stub)portType,"queryResourceProperties");
			return portType.queryResourceProperties(params);
		}
	}

	public org.cagrid.workflow.helper.instance.client.WorkflowInstanceHelperClient createWorkflowInstanceHelper(org.cagrid.workflow.helper.descriptor.WorkflowInstanceHelperDescriptor workflowInstanceHelperDescriptor) throws RemoteException, org.apache.axis.types.URI.MalformedURIException {
		synchronized(portTypeMutex){
			configureStubSecurity((Stub)portType,"createWorkflowInstanceHelper");
			org.cagrid.workflow.helper.stubs.CreateWorkflowInstanceHelperRequest params = new org.cagrid.workflow.helper.stubs.CreateWorkflowInstanceHelperRequest();
			org.cagrid.workflow.helper.stubs.CreateWorkflowInstanceHelperRequestWorkflowInstanceHelperDescriptor workflowInstanceHelperDescriptorContainer = new org.cagrid.workflow.helper.stubs.CreateWorkflowInstanceHelperRequestWorkflowInstanceHelperDescriptor();
			workflowInstanceHelperDescriptorContainer.setWorkflowInstanceHelperDescriptor(workflowInstanceHelperDescriptor);
			params.setWorkflowInstanceHelperDescriptor(workflowInstanceHelperDescriptorContainer);
			org.cagrid.workflow.helper.stubs.CreateWorkflowInstanceHelperResponse boxedResult = portType.createWorkflowInstanceHelper(params);
			EndpointReferenceType ref = boxedResult.getWorkflowInstanceHelperReference().getEndpointReference();
			return new org.cagrid.workflow.helper.instance.client.WorkflowInstanceHelperClient(ref);
		}
	}

	public java.lang.String getIdentity() throws RemoteException {
		synchronized(portTypeMutex){
			configureStubSecurity((Stub)portType,"getIdentity");
			org.cagrid.workflow.helper.stubs.GetIdentityRequest params = new org.cagrid.workflow.helper.stubs.GetIdentityRequest();
			org.cagrid.workflow.helper.stubs.GetIdentityResponse boxedResult = portType.getIdentity(params);
			return boxedResult.getResponse();
		}
	}

	public org.oasis.wsn.SubscribeResponse subscribe(org.oasis.wsn.Subscribe params) throws RemoteException {
		synchronized(portTypeMutex){
			configureStubSecurity((Stub)portType,"subscribe");
			return portType.subscribe(params);
		}
	}

}
