/**
*============================================================================
*  Copyright The Ohio State University Research Foundation, The University of Chicago - 
*	Argonne National Laboratory, Emory University, SemanticBits LLC, and 
*	Ekagra Software Technologies Ltd.
*
*  Distributed under the OSI-approved BSD 3-Clause License.
*  See http://ncip.github.com/cagrid-core/LICENSE.txt for details.
*============================================================================
**/
package org.cagrid.monitor.service;

import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.cagrid.monitor.db.Job;
import org.cagrid.monitor.utils.HibernateUtil;
import org.hibernate.Criteria;
import org.hibernate.Session;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Restrictions;

/**
 * TODO:I am the service side implementation class. IMPLEMENT AND DOCUMENT ME
 * 
 * @created by Introduce Toolkit version 1.3
 * 
 */
public class MonitoringServiceImpl extends MonitoringServiceImplBase {

	private static Thread eventProcessorThread = null;

	public MonitoringServiceImpl() throws RemoteException {
		super();
//		CreateEvents.loadEvents();
	}

  public void startMonitoring() throws RemoteException {
		if (eventProcessorThread == null || !eventProcessorThread.isAlive()) {
			eventProcessorThread = new Thread(new EventProcessor());
		} else if (eventProcessorThread.isAlive()) {
			return;
		}
		eventProcessorThread.start();
	}

  public void stopMonitoring() throws RemoteException {
		if (eventProcessorThread == null || !eventProcessorThread.isAlive()) {
			return;
		}
		eventProcessorThread.interrupt();
	}

  public long addService(org.cagrid.monitor.db.Service service) throws RemoteException, org.cagrid.monitor.stubs.types.MonitorFault {
	  HibernateUtil.save(service);
	  return service.getId();
	}

  public long addTask(org.cagrid.monitor.db.Task task) throws RemoteException, org.cagrid.monitor.stubs.types.MonitorFault {
	  HibernateUtil.save(task);
	  return task.getId();
	}

  public long addEvent(org.cagrid.monitor.db.Event event) throws RemoteException, org.cagrid.monitor.stubs.types.MonitorFault {
	  HibernateUtil.save(event);
	  return event.getId();
	}

  public org.cagrid.monitor.db.Job[] getEventHistory(org.cagrid.monitor.db.Event event) throws RemoteException, org.cagrid.monitor.stubs.types.MonitorFault {
		Session session = HibernateUtil.getSessionFactory().getCurrentSession();
		session.beginTransaction();
		Criteria crit = session.createCriteria(Job.class);
		crit.add(Restrictions.eq("event_id", event.getId()));
		crit.addOrder(Order.asc("started"));
		
		List jobs = crit.list();
		Job[] array = new Job[jobs.size()];
		int i = 0;
		for (Iterator it = jobs.iterator(); it.hasNext();) {
			array[i++] = (Job) it.next();
		}
		session.getTransaction().commit();
		return array;
		  
  }

  public void addServiceMetadata(gov.nih.nci.cagrid.metadata.ServiceMetadata serviceMetadata) throws RemoteException {
    //TODO: Implement this autogenerated method
    throw new RemoteException("Not yet implemented");
  }

}
