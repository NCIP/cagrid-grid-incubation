package org.cagrid.monitor.client;

import java.rmi.RemoteException;

import org.apache.axis.client.Stub;
import org.apache.axis.message.addressing.EndpointReferenceType;
import org.apache.axis.types.URI;
import org.apache.axis.types.URI.MalformedURIException;
import org.cagrid.monitor.common.MonitoringServiceI;
import org.cagrid.monitor.db.Event;
import org.cagrid.monitor.db.Job;
import org.cagrid.monitor.db.Service;
import org.cagrid.monitor.db.StatusType;
import org.cagrid.monitor.db.Task;
import org.cagrid.monitor.stubs.types.MonitorFault;
import org.globus.gsi.GlobusCredential;

/**
 * This class is autogenerated, DO NOT EDIT GENERATED GRID SERVICE ACCESS METHODS.
 *
 * This client is generated automatically by Introduce to provide a clean unwrapped API to the
 * service.
 *
 * On construction the class instance will contact the remote service and retrieve it's security
 * metadata description which it will use to configure the Stub specifically for each method call.
 * 
 * @created by Introduce Toolkit version 1.3
 */
public class MonitoringServiceClient extends MonitoringServiceClientBase implements MonitoringServiceI {	

	public MonitoringServiceClient(String url) throws MalformedURIException, RemoteException {
		this(url,null);	
	}

	public MonitoringServiceClient(String url, GlobusCredential proxy) throws MalformedURIException, RemoteException {
	   	super(url,proxy);
	}
	
	public MonitoringServiceClient(EndpointReferenceType epr) throws MalformedURIException, RemoteException {
	   	this(epr,null);
	}
	
	public MonitoringServiceClient(EndpointReferenceType epr, GlobusCredential proxy) throws MalformedURIException, RemoteException {
	   	super(epr,proxy);
	}

	public static void usage(){
		System.out.println(MonitoringServiceClient.class.getName() + " -url <service url>");
	}
	
	public static void main(String [] args){
	    System.out.println("Running the Grid Service Client");
		try{
		if(!(args.length < 2)){
			if(args[0].equals("-url")){
			  MonitoringServiceClient client = new MonitoringServiceClient(args[1]);
			  // place client calls here if you want to use this main as a
			  // test....
			  loadEvents(client);
			  Thread.sleep(5*1000);
			  client.startMonitoring();
			  Thread.sleep(30*1000);
			  client.stopMonitoring();
			  Event event = new Event();
			  event.setId(4);
			  Job[] jobs = client.getEventHistory(event);
			  for (Job job : jobs) {
				  System.out.println("1"+job.getId());
				  System.out.println("2"+job.getStatus());
			  }
			} else {
				usage();
				System.exit(1);
			}
		} else {
			usage();
			System.exit(1);
		}
		} catch (Exception e) {
			e.printStackTrace();
			System.exit(1);
		}
	}

  
  private static void loadEvents(MonitoringServiceClient client) throws MonitorFault, RemoteException {
		Service indexService = new Service();
		try {
			indexService
					.setEpr(new URI(
							"http://index.training.cagrid.org:8080/wsrf/services/DefaultIndexService"));
		} catch (MalformedURIException e) {
			e.printStackTrace();
		}
		indexService.setEnabled(true);
		indexService.setName("Index");
		
		Service emoryService = new Service();
		try {
			emoryService
					.setEpr(new URI(
							"http://tma01.cci.emory.edu:8080/wsrf/services/cagrid/Analysis"));
		} catch (MalformedURIException e) {
			e.printStackTrace();
		}
		emoryService.setEnabled(true);
		emoryService.setName("Emory");
		
		Service workflowService = new Service();
		try {
			workflowService
					.setEpr(new URI(
							"https://workflow-scufl.training.cagrid.org:8443/wsrf/services/cagrid/TavernaWorkflowService"));
		} catch (MalformedURIException e) {
			e.printStackTrace();
		}
		workflowService.setEnabled(true);
		workflowService.setName("Workflow");

		Task ping = new Task();
		ping.setCommand("org.cagrid.monitor.command.Ping");
		ping.setName("ping");
		ping.setDescription("Connects to the Service's host and port to test connectivity");

		Task query = new Task();
		query.setCommand("org.cagrid.monitor.command.WSRFQuery");
		query.setName("WSRFQuery");
		query.setDescription("Retrieves the service's metadata");
		
		long id;
		id = client.addService(indexService);
		indexService.setId(id);
		id = client.addService(emoryService);
		emoryService.setId(id);
		id = client.addService(workflowService);
		workflowService.setId(id);
		id = client.addTask(ping);
		ping.setId(id);
		id = client.addTask(query);
		query.setId(id);
				
		Event event = new Event();
		event.setService(indexService);
		event.setEnabled(true);
		event.setTask(ping);
		event.setFrequency(2 * 1000);
		event.setStatus(StatusType.AVAILABLE);
		client.addEvent(event);

		event = new Event();
		event.setEnabled(true);
		event.setService(indexService);
		event.setTask(query);
		event.setFrequency(3 * 1000);
		event.setStatus(StatusType.AVAILABLE);
		client.addEvent(event);

		event = new Event();
		event.setEnabled(true);
		event.setService(emoryService);
		event.setTask(ping);
		event.setFrequency(4 * 1000);
		event.setStatus(StatusType.AVAILABLE);
		client.addEvent(event);

		event = new Event();
		event.setService(emoryService);
		event.setEnabled(true);
		event.setTask(query);
		event.setFrequency(6 * 1000);
		event.setStatus(StatusType.AVAILABLE);
		client.addEvent(event);

		event = new Event();
		event.setService(workflowService);
		event.setEnabled(true);
		event.setTask(ping);
		event.setFrequency(7 * 1000);
		event.setStatus(StatusType.AVAILABLE);
		client.addEvent(event);

		event = new Event();
		event.setEnabled(true);
		event.setService(workflowService);
		event.setTask(query);
		event.setFrequency(8 * 1000);
		event.setStatus(StatusType.AVAILABLE);
		client.addEvent(event);
  }
  
  public void addServiceMetadata(gov.nih.nci.cagrid.metadata.ServiceMetadata serviceMetadata) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"addServiceMetadata");
    org.cagrid.monitor.stubs.AddServiceMetadataRequest params = new org.cagrid.monitor.stubs.AddServiceMetadataRequest();
    org.cagrid.monitor.stubs.AddServiceMetadataRequestServiceMetadata serviceMetadataContainer = new org.cagrid.monitor.stubs.AddServiceMetadataRequestServiceMetadata();
    serviceMetadataContainer.setServiceMetadata(serviceMetadata);
    params.setServiceMetadata(serviceMetadataContainer);
    org.cagrid.monitor.stubs.AddServiceMetadataResponse boxedResult = portType.addServiceMetadata(params);
    }
  }

  public org.oasis.wsrf.properties.GetMultipleResourcePropertiesResponse getMultipleResourceProperties(org.oasis.wsrf.properties.GetMultipleResourceProperties_Element params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getMultipleResourceProperties");
    return portType.getMultipleResourceProperties(params);
    }
  }

  public org.oasis.wsrf.properties.GetResourcePropertyResponse getResourceProperty(javax.xml.namespace.QName params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getResourceProperty");
    return portType.getResourceProperty(params);
    }
  }

  public org.oasis.wsrf.properties.QueryResourcePropertiesResponse queryResourceProperties(org.oasis.wsrf.properties.QueryResourceProperties_Element params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"queryResourceProperties");
    return portType.queryResourceProperties(params);
    }
  }

  public void startMonitoring() throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"startMonitoring");
    org.cagrid.monitor.stubs.StartMonitoringRequest params = new org.cagrid.monitor.stubs.StartMonitoringRequest();
    org.cagrid.monitor.stubs.StartMonitoringResponse boxedResult = portType.startMonitoring(params);
    }
  }

  public void stopMonitoring() throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"stopMonitoring");
    org.cagrid.monitor.stubs.StopMonitoringRequest params = new org.cagrid.monitor.stubs.StopMonitoringRequest();
    org.cagrid.monitor.stubs.StopMonitoringResponse boxedResult = portType.stopMonitoring(params);
    }
  }

  public long addService(org.cagrid.monitor.db.Service service) throws RemoteException, org.cagrid.monitor.stubs.types.MonitorFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"addService");
    org.cagrid.monitor.stubs.AddServiceRequest params = new org.cagrid.monitor.stubs.AddServiceRequest();
    org.cagrid.monitor.stubs.AddServiceRequestService serviceContainer = new org.cagrid.monitor.stubs.AddServiceRequestService();
    serviceContainer.setService(service);
    params.setService(serviceContainer);
    org.cagrid.monitor.stubs.AddServiceResponse boxedResult = portType.addService(params);
    return boxedResult.getResponse();
    }
  }

  public long addTask(org.cagrid.monitor.db.Task task) throws RemoteException, org.cagrid.monitor.stubs.types.MonitorFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"addTask");
    org.cagrid.monitor.stubs.AddTaskRequest params = new org.cagrid.monitor.stubs.AddTaskRequest();
    org.cagrid.monitor.stubs.AddTaskRequestTask taskContainer = new org.cagrid.monitor.stubs.AddTaskRequestTask();
    taskContainer.setTask(task);
    params.setTask(taskContainer);
    org.cagrid.monitor.stubs.AddTaskResponse boxedResult = portType.addTask(params);
    return boxedResult.getResponse();
    }
  }

  public long addEvent(org.cagrid.monitor.db.Event event) throws RemoteException, org.cagrid.monitor.stubs.types.MonitorFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"addEvent");
    org.cagrid.monitor.stubs.AddEventRequest params = new org.cagrid.monitor.stubs.AddEventRequest();
    org.cagrid.monitor.stubs.AddEventRequestEvent eventContainer = new org.cagrid.monitor.stubs.AddEventRequestEvent();
    eventContainer.setEvent(event);
    params.setEvent(eventContainer);
    org.cagrid.monitor.stubs.AddEventResponse boxedResult = portType.addEvent(params);
    return boxedResult.getResponse();
    }
  }

  public org.cagrid.monitor.db.Job[] getEventHistory(org.cagrid.monitor.db.Event event) throws RemoteException, org.cagrid.monitor.stubs.types.MonitorFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getEventHistory");
    org.cagrid.monitor.stubs.GetEventHistoryRequest params = new org.cagrid.monitor.stubs.GetEventHistoryRequest();
    org.cagrid.monitor.stubs.GetEventHistoryRequestEvent eventContainer = new org.cagrid.monitor.stubs.GetEventHistoryRequestEvent();
    eventContainer.setEvent(event);
    params.setEvent(eventContainer);
    org.cagrid.monitor.stubs.GetEventHistoryResponse boxedResult = portType.getEventHistory(params);
    return boxedResult.getJob();
    }
  }

}
