package gov.nih.nci.cagrid.identifiers.client;

import java.io.InputStream;
import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.List;

import javax.xml.namespace.QName;

import org.apache.axis.EngineConfiguration;
import org.apache.axis.client.AxisClient;
import org.apache.axis.client.Stub;
import org.apache.axis.configuration.FileProvider;
import org.apache.axis.message.addressing.EndpointReferenceType;
import org.apache.axis.types.URI.MalformedURIException;

import org.oasis.wsrf.properties.GetResourcePropertyResponse;

import org.globus.gsi.GlobusCredential;

import gov.nih.nci.cagrid.identifiers.TypeValues;
import gov.nih.nci.cagrid.identifiers.TypeValuesMap;
import gov.nih.nci.cagrid.identifiers.Values;
import gov.nih.nci.cagrid.identifiers.stubs.IdentifiersNAServicePortType;
import gov.nih.nci.cagrid.identifiers.stubs.service.IdentifiersNAServiceAddressingLocator;
import gov.nih.nci.cagrid.identifiers.common.IdentifiersNAServiceI;
import gov.nih.nci.cagrid.introduce.security.client.ServiceSecurityClient;

/**
 * This class is autogenerated, DO NOT EDIT GENERATED GRID SERVICE ACCESS METHODS.
 *
 * This client is generated automatically by Introduce to provide a clean unwrapped API to the
 * service.
 *
 * On construction the class instance will contact the remote service and retrieve it's security
 * metadata description which it will use to configure the Stub specifically for each method call.
 * 
 * @created by Introduce Toolkit version 1.3
 */
public class IdentifiersNAServiceClient extends IdentifiersNAServiceClientBase implements IdentifiersNAServiceI {	

	public IdentifiersNAServiceClient(String url) throws MalformedURIException, RemoteException {
		this(url,null);	
	}

	public IdentifiersNAServiceClient(String url, GlobusCredential proxy) throws MalformedURIException, RemoteException {
	   	super(url,proxy);
	}
	
	public IdentifiersNAServiceClient(EndpointReferenceType epr) throws MalformedURIException, RemoteException {
	   	this(epr,null);
	}
	
	public IdentifiersNAServiceClient(EndpointReferenceType epr, GlobusCredential proxy) throws MalformedURIException, RemoteException {
	   	super(epr,proxy);
	}

	public static void usage(){
		System.out.println(IdentifiersNAServiceClient.class.getName() + " -url <service url>");
	}
	
	public static void main(String [] args){
	    System.out.println("Running the Grid Service Client");
		try{
		if(!(args.length < 2)){
			if(args[0].equals("-url")){
			  IdentifiersNAServiceClient client = new IdentifiersNAServiceClient(args[1]);
			  // place client calls here if you want to use this main as a
			  // test....
				
			  TypeValues[] tvs = new TypeValues[2];
			  tvs[0] = new TypeValues();
			  tvs[0].setType(gov.nih.nci.cagrid.identifiers.Type.URL);
			  Values values = new Values();
			  values.setValue(new String[] { "http://www.google.com" });
			  tvs[0].setValues(values);
			  
			  tvs[1] = new TypeValues();
			  tvs[1].setType(gov.nih.nci.cagrid.identifiers.Type.DOI);
			  values = new Values();
			  values.setValue(new String[] { "abc def hij" });
			  tvs[1].setValues(values);
			  
			  TypeValuesMap tvm = new TypeValuesMap();
			  tvm.setTypeValues(tvs);

			  String identifier = client.createIdentifier(tvm);
			  System.out.println("Created [" + identifier + "]");
				
			  System.out.println("Now retrieving values for " + identifier);
			  TypeValuesMap tvm2 = client.getTypeValues(identifier);
			  for( TypeValues tv : tvm2.getTypeValues() ) {
				  System.out.println("TYPE: " + tv.getType().getValue());
				  for( String value : tv.getValues().getValue() ) {
					  System.out.println("DATA: " + value);
				  }
			  }
			} else {
				usage();
				System.exit(1);
			}
		} else {
			usage();
			System.exit(1);
		}
		} catch (Exception e) {
			e.printStackTrace();
			System.exit(1);
		}
	}

  public org.oasis.wsrf.properties.GetMultipleResourcePropertiesResponse getMultipleResourceProperties(org.oasis.wsrf.properties.GetMultipleResourceProperties_Element params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getMultipleResourceProperties");
    return portType.getMultipleResourceProperties(params);
    }
  }

  public org.oasis.wsrf.properties.GetResourcePropertyResponse getResourceProperty(javax.xml.namespace.QName params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getResourceProperty");
    return portType.getResourceProperty(params);
    }
  }

  public org.oasis.wsrf.properties.QueryResourcePropertiesResponse queryResourceProperties(org.oasis.wsrf.properties.QueryResourceProperties_Element params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"queryResourceProperties");
    return portType.queryResourceProperties(params);
    }
  }

  public java.lang.String createIdentifier(gov.nih.nci.cagrid.identifiers.TypeValuesMap typeValues) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"createIdentifier");
    gov.nih.nci.cagrid.identifiers.stubs.CreateIdentifierRequest params = new gov.nih.nci.cagrid.identifiers.stubs.CreateIdentifierRequest();
    gov.nih.nci.cagrid.identifiers.stubs.CreateIdentifierRequestTypeValues typeValuesContainer = new gov.nih.nci.cagrid.identifiers.stubs.CreateIdentifierRequestTypeValues();
    typeValuesContainer.setTypeValuesMap(typeValues);
    params.setTypeValues(typeValuesContainer);
    gov.nih.nci.cagrid.identifiers.stubs.CreateIdentifierResponse boxedResult = portType.createIdentifier(params);
    return boxedResult.getResponse();
    }
  }

  public gov.nih.nci.cagrid.identifiers.TypeValuesMap getTypeValues(java.lang.String identifier) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getTypeValues");
    gov.nih.nci.cagrid.identifiers.stubs.GetTypeValuesRequest params = new gov.nih.nci.cagrid.identifiers.stubs.GetTypeValuesRequest();
    params.setIdentifier(identifier);
    gov.nih.nci.cagrid.identifiers.stubs.GetTypeValuesResponse boxedResult = portType.getTypeValues(params);
    return boxedResult.getTypeValuesMap();
    }
  }

}
