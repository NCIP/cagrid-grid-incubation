<!--
  The Ohio State University Research Foundation, Emory University,
  the University of Minnesota Supercomputing Institute

  Distributed under the OSI-approved BSD 3-Clause License.
  See http://ncip.github.com/cagrid-grid-incubation/LICENSE.txt for details.
-->
<!--
-->
<?xml version="1.0"?>
<!--
 -->
<!-- ================================================================= -->
<!-- CQL_CSM build file                                                -->
<!-- ================================================================= -->
<!DOCTYPE project>
<project name="cql_csm" basedir="." default="all" xmlns:ivy="antlib:org.apache.ivy.ant">
    <property name="version" value="1.3.1"/>

    <!-- Enable access to environment variables. -->
    <property environment="env" />

    <!-- Check that environment variables are set -->
    <fail unless="env.GLOBUS_LOCATION">
        The environment variable GLOBUS_LOCATION must be set to the root directory of the ws-core-4.0.3 distribution.
    </fail>

    <condition property="isJDK1.5" value="true">
        <or>
            <equals arg1="${ant.java.version}" arg2="1.5" />
        </or>
    </condition>
    <!-- Require Java 1.5 for now -->
    <fail message="JDK 1.5 is currently required to build this project!" unless="isJDK1.5" />
    <property name="java.source" value="1.5" />

    <import file="antfiles/ivy/ivy-def.xml" />
    
    <property name="schema.pg.dir" value="CSM_pg"/>
    <property name="csm.postgresql.csm.dbname" value="ivi_csm"/>
    <import file="${schema.pg.dir}/db_build.xml" />

    <property name="src.dir" value="${basedir}/src" />
    <property name="lib.dir" value="${basedir}/lib"/>
	<property name="sdk.lib.dir" value="${basedir}/caGrid_lib"/>
    <property name="build.dir" value="${basedir}/build" />
    <property name="jar.dir" value="${build.dir}/lib"/>
    <property name="resource.dir" value="${basedir}/resource" />
    <property name="javadoc.dir" value="${build.dir}/javadoc" />
    <property name="classes.dir" value="${build.dir}/classes" />
	<property name="integration.repository.dir" value="${build.dir}/integration_repository"/>
    <property name="distrib.dir" value="distrib"/>
    
    <!-- test-related properties -->
    <property name="test.dir" value="${basedir}/test"/>
    <property name="test.src.dir" value="${test.dir}/src"/>
    <property name="test.build.dir" value="${build.dir}/test"/>
    <property name="test.classes.dir" value="${test.build.dir}/classes"/>
    <property name="test.project.jar" value="${jar.dir}/${ant.project.name}-${version}-tests.jar"/>
    <property name="test.log.dir" value="${test.dir}/logs" />
    <property name="junit.results.dir" value="${test.log.dir}/junit" />

    <!-- Distribution-related properties -->
    <property name="project.jarfile" value="${jar.dir}/${ant.project.name}-${version}.jar" />
    <property name="cacore.jarfile" value="${jar.dir}/${ant.project.name}_cacore-${version}.jar" />
	<property name="schema.pg.zipfile" value="${jar.dir}/${ant.project.name}_config_pg-${version}.zip"/>
    <property name="project.zipfile" value="${basedir}/${ant.project.name}-${version}.zip" />
	<property name="repo.cci.host" value="repo.cci.emory.edu"/>

    <!-- =============================================================== -->
    <!-- The Build Classpath                                             -->
    <!-- =============================================================== -->
    <path id="build.classpath">
        <fileset dir="${lib.dir}">
            <include name="**/*.jar" />
        </fileset>
    	<fileset dir="${sdk.lib.dir}">
            <include name="**/*.jar" />
        </fileset>
        <!-- 
        <fileset dir="${ext.lib.dir}">
            <include name="**/*.jar" />
        </fileset>
        fileset dir="${ext.endorsed.dir}">
            <include name="**/*.jar" />
        </fileset>
	 -->
        <pathelement location="${env.GLOBUS_LOCATION}/lib/wsrf_core.jar"/>
        <pathelement location="${env.GLOBUS_LOCATION}/lib/cog-jglobus.jar"/>
        <pathelement location="${env.GLOBUS_LOCATION}/lib/axis.jar"/>       
        <pathelement location="${env.GLOBUS_LOCATION}/lib/naming-common.jar"/>
        <pathelement location="${env.GLOBUS_LOCATION}/lib/naming-factory.jar"/>
        <pathelement location="${env.GLOBUS_LOCATION}/lib/jaxrpc.jar"/>
        <pathelement location="${env.GLOBUS_LOCATION}/lib/saaj.jar"/>
        <pathelement location="${env.GLOBUS_LOCATION}/lib/commons-discovery.jar"/>
    </path>


    <!-- =============================================================== -->
    <!-- The Run Classpath                                               -->
    <!-- =============================================================== -->
    <path id="run.classpath">
        <path refid="build.classpath" />
        <!-- fileset dir="${ext.endorsed.dir}">
            <include name="**/*.jar" />
        </fileset -->
    </path>

    <!-- =============================================================== -->
    <!-- The Test Compilation Classpath                                  -->
    <!-- =============================================================== -->
    <path id="test.classpath">
        <path refid="run.classpath" />
        <pathelement path="${classes.dir}" />
        <fileset dir="${ant.home}/lib">
            <include name="junit*.jar"/> 
        </fileset>

        <!-- 
        <fileset dir="${ext.endorsed.dir}">
            <include name="**/*.jar" />
        </fileset>
        <fileset dir="${test.lib.dir}">
            <include name="**/*.jar" />
        </fileset>
        <fileset dir="${ext.test.lib.dir}">
            <include name="**/*.jar" />
        </fileset>
        -->
    </path>
    
    
    <!-- =============================================================== -->
    <!-- The Test Run Classpath                                          -->
    <!-- =============================================================== -->
    <path id="test.run.classpath">
        <path refid="test.classpath" />
        <pathelement path="${test.project.jar}"/>
        <pathelement path="${basedir}"/>
    </path>
    

    <!-- =============================================================== -->
    <!-- Inialize directories and files                                  -->
    <!-- =============================================================== -->
    <target name="init">
        <tstamp />
        <mkdir dir="${build.dir}" />
    </target>


    <!-- ================================= 
          target: cleanCache
         ================================= -->
    <target name="cleanCache" depends="init-ivy" description="Clean Ivy cache so that next resolve will retrieve artificats from repositories.">
        <ivy:cleancache />
    </target>

    <!-- ================================= 
          target: resolve
         ================================= -->
    <target name="resolve" depends="init-ivy" description="Resolve dependencies with ivy">
        <ivy:retrieve resolveid="remote" />
    </target>


    <!-- ================================= 
          target: clean              
         ================================= -->
    <target name="clean" depends="resolve" description="Remove all artifiacts of previous builds and resolve dependencies.">
        <delete dir="${build.dir}" />
        <delete dir="${distrib.dir}" />
        <delete dir="${test.log.dir}"/>
        <delete file="${test.project.jar}"/>
        <delete dir="${lib.dir}"/>
    	<delete dir="${integration.repository.dir}"/>
    	<mkdir dir="${lib.dir}"/>
    	<copy todir="${lib.dir}">
    		<fileset file="${basedir}/caGrid_lib/*"/>
    	</copy>
    </target>


    <!-- =============================================================== -->
    <!-- Compiles the source code                                        -->
    <!-- =============================================================== -->
    <target name="compile" depends="init,resolve" description="compiles.">
        <mkdir dir="${classes.dir}" />
        <javac srcdir="${src.dir}" destdir="${classes.dir}" source="${java.source}" debug="on" deprecation="off" optimize="off">
            <classpath refid="build.classpath" />
        </javac>
    </target>


    <!-- =============================================================== -->
    <!-- Compiles the test source code                                   -->
    <!-- =============================================================== -->
    <target name="compile-tests" depends="compile" description="compiles tests.">
        <mkdir dir="${test.classes.dir}" />
        <javac srcdir="${test.src.dir}" destdir="${test.classes.dir}" source="${java.source}" debug="on" deprecation="off" optimize="off">
            <classpath refid="test.classpath" />
        </javac>
    </target>
    

    <!-- ============================================================== -->
    <!-- Creates the production jar files                               -->
    <!-- ============================================================== -->
    <target name="jar" depends="compile" description="Builds the Production Jar Files">
        <mkdir dir="${jar.dir}" />
        <jar destfile="${project.jarfile}" filesetmanifest="mergewithoutmain" description="Build core .jar file.">
            <manifest>
                <attribute name="Built-By" value="${user.name}" />
                <attribute name="Main-Class" value="${main.class}" />
                <attribute name="Class-Path" value="." />
            </manifest>
            <exclude name="**/log4j.properties" />
            <fileset dir="${classes.dir}">
                <exclude name="**/log4j.properties" />
                <exclude name="**/cqlCsmHibernate/**"/>
            </fileset>
            <fileset dir="${basedir}">
                <exclude name="**/log4j.properties" />
                <include name="*README.txt" />
                <include name="*LICENSE.txt" />
            </fileset>
        </jar>
        <jar destfile="${cacore.jarfile}" filesetmanifest="mergewithoutmain" description="Build CACORE .jar file.">
            <manifest>
                <attribute name="Built-By" value="${user.name}" />
                <attribute name="Main-Class" value="${main.class}" />
                <attribute name="Class-Path" value="." />
            </manifest>
            <exclude name="**/log4j.properties" />
            <fileset dir="${classes.dir}">
                <include name="edu/emory/cci/cqlCsm/*"/>
                <include name="edu/emory/cci/cqlCsm/cqlCsmHibernate/**"/>
                <exclude name="**/log4j.properties" />
            </fileset>
            <fileset dir="${basedir}">
                <exclude name="**/log4j.properties" />
                <include name="*README.txt" />
                <include name="*LICENSE.txt" />
            </fileset>
        </jar>
    	<zip destfile="${schema.pg.zipfile}">
    		<fileset dir="${basedir}">
    			<include name="${schema.pg.dir}/*"/>
    		</fileset>
    	</zip>
     </target>
    

    <!-- ============================================================== -->
    <!-- Creates the test jar files                                          -->
    <!-- ============================================================== -->
    <target name="jar-tests" depends="compile-tests" description="Builds the Jar Files">
        <mkdir dir="${jar.dir}" />
        <jar jarfile="${test.project.jar}">
            <fileset dir="${test.classes.dir}" />
            <fileset dir="${test.src.dir}">
                <include name="**/*.xml" />
            </fileset>
            <manifest>
                <attribute name="Built-By" value="${user.name}" />
            </manifest>
        </jar>
    </target>

    
    <!-- ================================= 
          target: test              
         ================================= -->
    <target name="test" depends="jar-tests" description="Restore database to a known state and run junit tests">
        <echo message="Test results dir: ${junit.results.dir}" />
        <mkdir dir="${junit.results.dir}" />
        <junit dir="${basedir}" printsummary="yes" errorproperty="test.failed" failureproperty="test.failed" showoutput="true" forkmode="once" filtertrace="yes">
            <sysproperty key="basedir" value="${basedir}" />
            <jvmarg value="-Xmx512M" />
            <jvmarg value="-Dbuild.dir=${build.dir}" />
            <jvmarg value="-Djava.endorsed.dirs=${ext.endorsed.dir}" />
            <classpath>
                <path refid="test.run.classpath" />
                <!-- <pathelement location="${test.dir}/resources" /> -->
            </classpath>
            <formatter type="xml" />
            <test if="testcase" name="${testcase}" fork="yes" todir="${junit.results.dir}" />
            <batchtest unless="testcase" fork="yes" todir="${junit.results.dir}">
                <fileset dir="${test.src.dir}">
                    <include name="**/*Test.java" />
                </fileset>
            </batchtest>
        </junit>
        <fail message="Tests failed! Check test reports." if="test.failed" />
    </target>

    

    <!-- =================================================================== -->
    <!-- Builds Code Docuementation                                          -->
    <!-- =================================================================== -->
    <target name="javadoc" depends="compile" description="Creates the API documentation.">
        <javadoc packagenames="*" destdir="${javadoc.dir}" author="true" version="true" use="true" windowtitle="${project.name} API">
            <sourcepath>
                <pathelement path="${src.dir}" />
            </sourcepath>

            <classpath>
                <path refid="build.classpath" />
            </classpath>

            <tag name="todo" scope="all" description="To do:" />
            <tag name="created" scope="all" description="Created On:" />
        </javadoc>
    </target>


    <!-- ============================================================== -->
    <!-- Builds from scratch                                                -->
    <!-- ============================================================== -->
    <target name="all" description="Builds the entire library and get a fresh set of dependent libraries" depends="jar,javadoc" />
    

	<!-- ================================= 
          target: publishLocal
         ================================= -->
    <target name="publishLocal" depends="jar" description="Publish an Ivy module to the local integration_repository.">
        <ivy:publish resolver="local" overwrite="true">
        	<artifacts pattern="${jar.dir}/[artifact]-[revision].[ext]"/>
        </ivy:publish>
    </target>
	
	
	<!-- - - - - - - - - - - - - - - - - - 
          target: _ivy_credentials_                      
         - - - - - - - - - - - - - - - - - -->
    <target name="_ivy_credentials_">
        <input addproperty="repo.cci.username">User name for ${repo.cci.host}: </input>
    	<input addproperty="repo.cci.passwd">Password for ${repo.cci.host}: </input>
    </target>

    
    <!-- ================================= 
          target: publishIntegration
         ================================= -->
    <target name="publishIntegration" depends="_ivy_credentials_,jar" description="Publish an Ivy module to the integartion build repository.">
        <ivy:publish resolver="integration" overwrite="true" status="integration" settingsref="ivy.instance">
            <artifacts pattern="${jar.dir}/[artifact]-[revision].[ext]"/>
        </ivy:publish>
    </target>

    
    <!-- ================================= 
          target: publishRelease
         ================================= -->
    <target name="publishRelease" depends="_ivy_credentials_,jar" description="Publish an Ivy module to the integartion build repository.">
        <ivy:publish resolver="release" overwrite="false" status="release" settingsref="ivy.instance">
            <artifacts pattern="${jar.dir}/[artifact]-[revision].[ext]"/>
        </ivy:publish>
    </target>

	
    <!-- ================================= 
          target: distrib              
         ================================= -->
    <target name="distrib" depends="clean,all" description="Create a source distribution in a zip file">
        <mkdir dir="${distrib.dir}" />
        <copy todir="${distrib.dir}">
            <fileset file="${jar.dir}/*.jar" />
            <fileset file="build.xml" />
            <fileset file="LICENSE.txt"/>
            <fileset file="README.html"/>
        </copy>
        <copy todir="${distrib.dir}/src">
            <fileset dir="${src.dir}" >
                <exclude name="**/.svn"/>
            </fileset>
        </copy>
        <zip destfile="${project.zipfile}" compress="true" basedir="${distrib.dir}"/>
    </target>

</project>
