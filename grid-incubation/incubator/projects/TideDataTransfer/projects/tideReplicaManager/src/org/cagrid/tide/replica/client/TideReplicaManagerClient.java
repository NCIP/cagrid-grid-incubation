/**
*============================================================================
*  Copyright The Ohio State University Research Foundation, The University of Chicago - 
*	Argonne National Laboratory, Emory University, SemanticBits LLC, and 
*	Ekagra Software Technologies Ltd.
*
*  Distributed under the OSI-approved BSD 3-Clause License.
*  See http://ncip.github.com/cagrid-core/LICENSE.txt for details.
*============================================================================
**/
package org.cagrid.tide.replica.client;

import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.rmi.RemoteException;

import javax.swing.TransferHandler;
import javax.xml.namespace.QName;

import org.apache.axis.EngineConfiguration;
import org.apache.axis.client.AxisClient;
import org.apache.axis.client.Stub;
import org.apache.axis.configuration.FileProvider;
import org.apache.axis.message.addressing.Address;
import org.apache.axis.message.addressing.EndpointReferenceType;
import org.apache.axis.types.URI.MalformedURIException;

import org.oasis.wsrf.properties.GetResourcePropertyResponse;

import org.globus.ftp.dc.TransferContext;
import org.globus.gsi.GlobusCredential;

import org.cagrid.tide.descriptor.TideDescriptor;
import org.cagrid.tide.descriptor.TideReplicaDescriptor;
import org.cagrid.tide.descriptor.TideReplicasDescriptor;
import org.cagrid.tide.replica.stubs.TideReplicaManagerPortType;
import org.cagrid.tide.replica.stubs.service.TideReplicaManagerServiceAddressingLocator;
import org.cagrid.tide.replica.common.TideReplicaManagerI;
import org.cagrid.transfer.context.client.TransferServiceContextClient;
import org.cagrid.transfer.context.client.helper.TransferClientHelper;
import org.cagrid.transfer.context.stubs.types.TransferServiceContextReference;
import org.cagrid.transfer.descriptor.Status;

import com.twmacinta.util.MD5InputStream;

import cryptix.provider.md.MD5;

import gov.nih.nci.cagrid.introduce.security.client.ServiceSecurityClient;

/**
 * This class is autogenerated, DO NOT EDIT GENERATED GRID SERVICE ACCESS METHODS.
 *
 * This client is generated automatically by Introduce to provide a clean unwrapped API to the
 * service.
 *
 * On construction the class instance will contact the remote service and retrieve it's security
 * metadata description which it will use to configure the Stub specifically for each method call.
 * 
 * @created by Introduce Toolkit version 1.2
 */
public class TideReplicaManagerClient extends TideReplicaManagerClientBase implements TideReplicaManagerI {	

	public TideReplicaManagerClient(String url) throws MalformedURIException, RemoteException {
		this(url,null);	
	}

	public TideReplicaManagerClient(String url, GlobusCredential proxy) throws MalformedURIException, RemoteException {
	   	super(url,proxy);
	}
	
	public TideReplicaManagerClient(EndpointReferenceType epr) throws MalformedURIException, RemoteException {
	   	this(epr,null);
	}
	
	public TideReplicaManagerClient(EndpointReferenceType epr, GlobusCredential proxy) throws MalformedURIException, RemoteException {
	   	super(epr,proxy);
	}

	public static void usage(){
		System.out.println(TideReplicaManagerClient.class.getName() + " -url <service url>");
	}
	
	public static void main(String [] args){
	    System.out.println("Running the Grid Service Client");
		try{
		if(!(args.length < 2)){
			if(args[0].equals("-url")){
			  TideReplicaManagerClient client = new TideReplicaManagerClient(args[1]);
			  // place client calls here if you want to use this main as 
			  // test....
			  
//			  File f = new File("c:/apache-ant-1.7.0-bin.zip");
//			  FileInputStream fis = new FileInputStream(f);
//			  TideDescriptor tide = new TideDescriptor();
//			  tide.setChunkSize(1024);
//			  long numChunks = f.length() / 1024;
//			  if(f.length()%1024 != 0){
//			      numChunks +=1;
//			  }
//			  tide.setChunks(numChunks);
//			  tide.setName(f.getName());
//			  MD5InputStream mis = new MD5InputStream(fis);
//			  mis.getMD5().asHex();
//			  tide.setMd5Sum(mis.getMD5().asHex());
//			 
//			  TideReplicasDescriptor tideRD= new TideReplicasDescriptor();
//			  tideRD.setTideDescriptor(tide);
//			  
//			  org.cagrid.tide.stubs.types.TideReference tref = new org.cagrid.tide.stubs.types.TideReference();
//			  tref.setEndpointReference(new EndpointReferenceType(new Address("")));
//			  
//			  TideReplicaDescriptor repD = new TideReplicaDescriptor(tref);
//			  tideRD.setTideReplicaDescriptor(new TideReplicaDescriptor [] {repD});
//			  
//			  TransferServiceContextReference ref = client.addTide(tideRD);
//			  TransferServiceContextClient tclient = new TransferServiceContextClient(ref.getEndpointReference());
//			  TransferClientHelper.putData(fis, f.length(), tclient.getDataTransferDescriptor());
//			  tclient.setStatus(Status.Staged);
			  
			} else {
				usage();
				System.exit(1);
			}
		} else {
			usage();
			System.exit(1);
		}
		} catch (Exception e) {
			e.printStackTrace();
			System.exit(1);
		}
	}

  public org.oasis.wsrf.properties.GetMultipleResourcePropertiesResponse getMultipleResourceProperties(org.oasis.wsrf.properties.GetMultipleResourceProperties_Element params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getMultipleResourceProperties");
    return portType.getMultipleResourceProperties(params);
    }
  }

  public org.oasis.wsrf.properties.GetResourcePropertyResponse getResourceProperty(javax.xml.namespace.QName params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getResourceProperty");
    return portType.getResourceProperty(params);
    }
  }

  public org.oasis.wsrf.properties.QueryResourcePropertiesResponse queryResourceProperties(org.oasis.wsrf.properties.QueryResourceProperties_Element params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"queryResourceProperties");
    return portType.queryResourceProperties(params);
    }
  }

  public org.cagrid.tide.replica.context.client.TideReplicaManagerContextClient createTideReplicaManagerContext(org.cagrid.tide.descriptor.TideDescriptor tideDescriptor) throws RemoteException, org.apache.axis.types.URI.MalformedURIException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"createTideReplicaManagerContext");
    org.cagrid.tide.replica.stubs.CreateTideReplicaManagerContextRequest params = new org.cagrid.tide.replica.stubs.CreateTideReplicaManagerContextRequest();
    org.cagrid.tide.replica.stubs.CreateTideReplicaManagerContextRequestTideDescriptor tideDescriptorContainer = new org.cagrid.tide.replica.stubs.CreateTideReplicaManagerContextRequestTideDescriptor();
    tideDescriptorContainer.setTideDescriptor(tideDescriptor);
    params.setTideDescriptor(tideDescriptorContainer);
    org.cagrid.tide.replica.stubs.CreateTideReplicaManagerContextResponse boxedResult = portType.createTideReplicaManagerContext(params);
    EndpointReferenceType ref = boxedResult.getTideReplicaManagerContextReference().getEndpointReference();
    return new org.cagrid.tide.replica.context.client.TideReplicaManagerContextClient(ref);
    }
  }

  public org.cagrid.tide.replica.context.client.TideReplicaManagerContextClient getTideReplicaManagerContext(java.lang.String tideID) throws RemoteException, org.apache.axis.types.URI.MalformedURIException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getTideReplicaManagerContext");
    org.cagrid.tide.replica.stubs.GetTideReplicaManagerContextRequest params = new org.cagrid.tide.replica.stubs.GetTideReplicaManagerContextRequest();
    params.setTideID(tideID);
    org.cagrid.tide.replica.stubs.GetTideReplicaManagerContextResponse boxedResult = portType.getTideReplicaManagerContext(params);
    EndpointReferenceType ref = boxedResult.getTideReplicaManagerContextReference().getEndpointReference();
    return new org.cagrid.tide.replica.context.client.TideReplicaManagerContextClient(ref);
    }
  }

  public org.cagrid.tide.descriptor.TideInformation[] listTides() throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"listTides");
    org.cagrid.tide.replica.stubs.ListTidesRequest params = new org.cagrid.tide.replica.stubs.ListTidesRequest();
    org.cagrid.tide.replica.stubs.ListTidesResponse boxedResult = portType.listTides(params);
    return boxedResult.getTideInformation();
    }
  }

  public org.cagrid.tide.descriptor.TideInformation[] queryTides(java.lang.String string) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"queryTides");
    org.cagrid.tide.replica.stubs.QueryTidesRequest params = new org.cagrid.tide.replica.stubs.QueryTidesRequest();
    params.setString(string);
    org.cagrid.tide.replica.stubs.QueryTidesResponse boxedResult = portType.queryTides(params);
    return boxedResult.getTideInformation();
    }
  }

}
