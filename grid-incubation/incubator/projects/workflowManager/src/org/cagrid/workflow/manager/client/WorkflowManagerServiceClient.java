package org.cagrid.workflow.manager.client;

import gov.nih.nci.cagrid.introduce.security.client.ServiceSecurityClient;

import java.io.IOException;
import java.io.InputStream;
import java.rmi.RemoteException;
import java.util.ArrayList;

import javax.xml.namespace.QName;
import javax.xml.rpc.NamespaceConstants;

import org.apache.axis.EngineConfiguration;
import org.apache.axis.client.AxisClient;
import org.apache.axis.client.Stub;
import org.apache.axis.configuration.FileProvider;
import org.apache.axis.message.addressing.AttributedURI;
import org.apache.axis.message.addressing.EndpointReferenceType;
import org.apache.axis.types.URI.MalformedURIException;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.cagrid.workflow.helper.descriptor.DeliveryPolicy;
import org.cagrid.workflow.helper.descriptor.InputParameter;
import org.cagrid.workflow.helper.descriptor.InputParameterDescriptor;
import org.cagrid.workflow.helper.descriptor.OperationInputMessageDescriptor;
import org.cagrid.workflow.helper.descriptor.OperationOutputParameterTransportDescriptor;
import org.cagrid.workflow.helper.descriptor.OperationOutputTransportDescriptor;
import org.cagrid.workflow.helper.descriptor.WorkflowInstanceHelperDescriptor;
import org.cagrid.workflow.manager.common.WorkflowManagerServiceI;
import org.cagrid.workflow.manager.descriptor.WorkflowInputParameter;
import org.cagrid.workflow.manager.descriptor.WorkflowInputParameters;
import org.cagrid.workflow.manager.descriptor.WorkflowManagerInstanceDescriptor;
import org.cagrid.workflow.manager.descriptor.WorkflowOutputParameterTransportDescriptor;
import org.cagrid.workflow.manager.descriptor.WorkflowOutputTransportDescriptor;
import org.cagrid.workflow.manager.descriptor.WorkflowPortionDescriptor;
import org.cagrid.workflow.manager.descriptor.WorkflowStageDescriptor;
import org.cagrid.workflow.manager.instance.client.WorkflowManagerInstanceClient;
import org.cagrid.workflow.manager.instance.stubs.types.WorkflowManagerInstanceReference;
import org.cagrid.workflow.manager.stubs.WorkflowManagerServicePortType;
import org.cagrid.workflow.manager.stubs.service.WorkflowManagerServiceAddressingLocator;
import org.cagrid.workflow.manager.util.FileUtil;
import org.globus.gsi.GlobusCredential;

/**
 * This class is autogenerated, DO NOT EDIT GENERATED GRID SERVICE ACCESS METHODS.
 *
 * This client is generated automatically by Introduce to provide a clean unwrapped API to the
 * service.
 *
 * On construction the class instance will contact the remote service and retrieve it's security
 * metadata description which it will use to configure the Stub specifically for each method call.
 * 
 * @created by Introduce Toolkit version 1.1
 */
public class WorkflowManagerServiceClient extends ServiceSecurityClient implements WorkflowManagerServiceI {	
	protected WorkflowManagerServicePortType portType;
	private Object portTypeMutex;



	private static Log logger = LogFactory.getLog(WorkflowManagerServiceClient.class);


	public WorkflowManagerServiceClient(String url) throws MalformedURIException, RemoteException {
		this(url,null);	
	}

	public WorkflowManagerServiceClient(String url, GlobusCredential proxy) throws MalformedURIException, RemoteException {
		super(url,proxy);
		initialize();
	}

	public WorkflowManagerServiceClient(EndpointReferenceType epr) throws MalformedURIException, RemoteException {
		this(epr,null);
	}

	public WorkflowManagerServiceClient(EndpointReferenceType epr, GlobusCredential proxy) throws MalformedURIException, RemoteException {
		super(epr,proxy);
		initialize();
	}

	private void initialize() throws RemoteException {
		this.portTypeMutex = new Object();
		this.portType = createPortType();
	}

	private WorkflowManagerServicePortType createPortType() throws RemoteException {

		WorkflowManagerServiceAddressingLocator locator = new WorkflowManagerServiceAddressingLocator();
		// attempt to load our context sensitive wsdd file
		InputStream resourceAsStream = getClass().getResourceAsStream("client-config.wsdd");
		if (resourceAsStream != null) {
			// we found it, so tell axis to configure an engine to use it
			EngineConfiguration engineConfig = new FileProvider(resourceAsStream);
			// set the engine of the locator
			locator.setEngine(new AxisClient(engineConfig));
		}
		WorkflowManagerServicePortType port = null;
		try {
			port = locator.getWorkflowManagerServicePortTypePort(getEndpointReference());
		} catch (Exception e) {
			throw new RemoteException("Unable to locate portType:" + e.getMessage(), e);
		}

		return port;
	}

	public static void usage(){
		System.out.println(WorkflowManagerServiceClient.class.getName() + " -url <service url>");
	}



	public static void main(String [] args){
		System.out.println("Running the Grid Service Client");
		try{
			if(!(args.length < 2)){
				if(args[0].equals("-url")){
					WorkflowManagerServiceClient client = new WorkflowManagerServiceClient(args[1]);
					// place client calls here if you want to use this main as a
					// test....
//					runBpelTest(client);


					runCaosDescriptorTest(client);



					System.out.println("End client");

				} else {
					usage();
					System.exit(1);
				}
			} else {
				usage();
				System.exit(1);
			}
		} catch (Exception e) {
			e.printStackTrace();
			System.exit(1);
		}
	}



	private static void runCaosDescriptorTest(WorkflowManagerServiceClient managerClient) throws RemoteException {

		logger.info("BEGIN");

		WorkflowManagerInstanceDescriptor workflowDesc = new WorkflowManagerInstanceDescriptor();


		// Build HelperService URL
		EndpointReferenceType managerEPR = managerClient.getEndpointReference();
		AttributedURI managerAddress = managerEPR.getAddress();
		String containerBaseURL = managerAddress.getScheme() + "://" + managerAddress.getHost() + ':' +
		managerAddress.getPort() + "/wsrf/services/";
		String workflowHelperServiceLocation = containerBaseURL + "cagrid/WorkflowHelper";
	



		

		WorkflowPortionDescriptor workflowParts = new WorkflowPortionDescriptor();
		logger.info("WorkflowHelper is located at: "+ workflowHelperServiceLocation);
		workflowParts.setWorkflowHelperServiceLocation(workflowHelperServiceLocation);



		logger.info("Creating InstanceHelper descriptor");
		org.cagrid.workflow.helper.descriptor.WorkflowInstanceHelperDescriptor workflowDescriptor5 = new org.cagrid.workflow.helper.descriptor.WorkflowInstanceHelperDescriptor();
		String workflowID = "WorkFlow5";
		workflowDescriptor5.setWorkflowID(workflowID);
		workflowParts.setInstanceHelperDesc(workflowDescriptor5);

		ArrayList<WorkflowStageDescriptor> stagesDescs = new ArrayList<WorkflowStageDescriptor>();
		ArrayList<WorkflowInputParameter> workflowInputs = new ArrayList<WorkflowInputParameter>();


		// BEGIN service 4				
		logger.info("Describing service 4");
		WorkflowStageDescriptor currStageDesc = new WorkflowStageDescriptor();
		int currStageID = 4;
		currStageDesc.setGlobalUniqueIdentifier(currStageID);



		logger.info("Building basic description");
		org.cagrid.workflow.helper.descriptor.WorkflowInvocationHelperDescriptor operation4 = new org.cagrid.workflow.helper.descriptor.WorkflowInvocationHelperDescriptor();

		java.lang.String acess_url = containerBaseURL+"cagrid/Service4";
		operation4.setWorkflowID("GeorgeliusWorkFlow");
		operation4.setOperationQName(new QName("http://service4.introduce.cagrid.org/Service4", "PrintResultsRequest"));
		operation4.setServiceURL(acess_url);
		currStageDesc.setBasicDescription(operation4);


		// Creating Descriptor of the InputMessage
		logger.info("Building input parameters descriptor");
		org.cagrid.workflow.helper.descriptor.OperationInputMessageDescriptor inputMessage4 = new OperationInputMessageDescriptor();
		InputParameterDescriptor[] inputParams4 = new InputParameterDescriptor[2];
		inputParams4[0] = new InputParameterDescriptor(new QName("result1"), new QName(NamespaceConstants.NSURI_SCHEMA_XSD, "string"));
		inputParams4[1] = new InputParameterDescriptor(new QName("result2"), new QName(NamespaceConstants.NSURI_SCHEMA_XSD, "string"));
		inputMessage4.setInputParam(inputParams4);
		currStageDesc.setInputsDescription(inputMessage4);
		// End InputMessage Descriptor

		// Setting output descriptor
		logger.info("Building output descriptor");
		OperationOutputTransportDescriptor outputDescriptor4 = new OperationOutputTransportDescriptor();
		OperationOutputParameterTransportDescriptor outParameterDescriptor4 [] = new OperationOutputParameterTransportDescriptor[0];
		outputDescriptor4.setParamDescriptor(outParameterDescriptor4);


		// Setting second parameter
		logger.info("Setting value for the 2nd argument");
		workflowInputs.add(new WorkflowInputParameter(new InputParameter("complex type's streaming", 1), currStageID));
		currStageDesc.setOutputTransportDescriptor(outputDescriptor4);
		stagesDescs.add(currStageDesc);
		logger.info("Done Service 4");
		// END service 4



		// BEGIN CreateArrayService::getComplexArray	
		logger.info("Describing CreateArrayService");
		currStageDesc = new WorkflowStageDescriptor();
		currStageID = 0;
		currStageDesc.setGlobalUniqueIdentifier(currStageID);


		logger.info("Building stage basic description");
		org.cagrid.workflow.helper.descriptor.WorkflowInvocationHelperDescriptor operation__ca = new org.cagrid.workflow.helper.descriptor.WorkflowInvocationHelperDescriptor();
		String access_url = containerBaseURL+"cagrid/CreateArrayService";
		operation__ca.setWorkflowID("GeorgeliusWorkFlow");
		operation__ca.setOperationQName(new QName("http://createarrayservice.introduce.cagrid.org/CreateArrayService", "GetComplexArrayRequest"));
		operation__ca.setServiceURL(access_url);
		operation__ca.setOutputType(new QName("http://systemtests.workflow.cagrid.org/SystemTests", "ComplexType[]"));
		currStageDesc.setBasicDescription(operation__ca);


		// Creating Descriptor of the InputMessage
		logger.info("Building input parameters' descriptor");
		org.cagrid.workflow.helper.descriptor.OperationInputMessageDescriptor inputMessage__ca = new OperationInputMessageDescriptor();
		InputParameterDescriptor[] inputParams__ca = new InputParameterDescriptor[0];
		inputMessage__ca.setInputParam(inputParams__ca);
		currStageDesc.setInputsDescription(inputMessage__ca);
		// End InputMessage Descriptor

		// Creating the outputDescriptor of the only service that will receive the output (ReceiveArrayService)
		logger.info("Building output descriptor");
		OperationOutputTransportDescriptor outputDescriptor__ca = new OperationOutputTransportDescriptor();
		OperationOutputParameterTransportDescriptor outParameterDescriptor__ca [] = new OperationOutputParameterTransportDescriptor[1];

		// First destination: ReceiveArrayService::ReceiveComplexArray
		logger.info("Adding destination for output");
		outParameterDescriptor__ca[0] = new OperationOutputParameterTransportDescriptor();
		outParameterDescriptor__ca[0].setDeliveryPolicy(DeliveryPolicy.ROUNDROBIN);
		outParameterDescriptor__ca[0].setParamIndex(0);
		outParameterDescriptor__ca[0].setType(new QName(NamespaceConstants.NSURI_SCHEMA_XSD ,"string"));
		outParameterDescriptor__ca[0].setQueryNamespaces(new QName[]{ new QName("http://createarrayservice.introduce.cagrid.org/CreateArrayService", "ns0"),
				new QName(NamespaceConstants.NSURI_SCHEMA_XSD,"xsd"), new QName("http://systemtests.workflow.cagrid.org/SystemTests", "abc")});
		outParameterDescriptor__ca[0].setLocationQuery("/ns0:GetComplexArrayResponse/abc:ComplexType/abc:message");
		outParameterDescriptor__ca[0].setDestinationGlobalUniqueIdentifier(4);
//		outParameterDescriptor__ca[0].setDestinationEPR(new EndpointReferenceType[]{serviceClient__4.getEndpointReference()});



		// takes the reference to ReceiveComplexArrayService
		outputDescriptor__ca.setParamDescriptor(outParameterDescriptor__ca);
		currStageDesc.setOutputTransportDescriptor(outputDescriptor__ca);
		stagesDescs.add(currStageDesc);
		logger.info("Done CreateArrayService");
		// END CreateArrayService::getComplexArray 


		// Store stages' description
		logger.info("Storing stages' descriptors");
		WorkflowStageDescriptor[] invocationHelperDescs = stagesDescs.toArray(new WorkflowStageDescriptor[0]);
		workflowParts.setInvocationHelperDescs(invocationHelperDescs);


		// Store workflow inputs' settings
		logger.info("Storing workflow input data");
		WorkflowInputParameters inputs = new WorkflowInputParameters();
		WorkflowInputParameter[] parameters = workflowInputs.toArray(new WorkflowInputParameter[0]);
		inputs.setParameters(parameters);

		// Store workflow outputs' description
		logger.info("Storing workflow output output description");
		WorkflowOutputTransportDescriptor outputDesc = new WorkflowOutputTransportDescriptor();
		WorkflowOutputParameterTransportDescriptor[] paramDescriptor = new WorkflowOutputParameterTransportDescriptor[0];
		outputDesc.setParamDescriptor(paramDescriptor);


		logger.info("Creating ManagerInstance");
		WorkflowManagerInstanceDescriptor managerInstanceDesc = new WorkflowManagerInstanceDescriptor();
		managerInstanceDesc.setInputs(inputs);
		managerInstanceDesc.setOutputDesc(outputDesc);
		managerInstanceDesc.setWorkflowParts(new WorkflowPortionDescriptor[]{ workflowParts });

		WorkflowManagerInstanceReference managerInstanceRef = managerClient.createWorkflowManagerInstanceFromObjectDescriptor(managerInstanceDesc);
		WorkflowManagerInstanceClient managerInstanceClient = null;
		try {
			managerInstanceClient = new WorkflowManagerInstanceClient(managerInstanceRef.getEndpointReference());

		} catch (MalformedURIException e) {
			e.printStackTrace();

		} 

		logger.info("Starting workflow execution");
		managerInstanceClient.start();
		managerInstanceClient.destroy();

		logger.info("END");

	}



	private static void runBpelTest(WorkflowManagerServiceClient client) throws RemoteException{

		String bpelFileName = System.getProperty("bpel.file");
		System.out.println("BPEL file is "+ bpelFileName);
		String extraDescFilename = System.getProperty("extra.file");

		String workflowBpelFileContent = null;
		String workflowExtraDesc = null;
		try{
			workflowBpelFileContent = FileUtil.readTextFile(bpelFileName);
			workflowExtraDesc = FileUtil.readTextFile(extraDescFilename);
		}catch(IOException ioe){
			ioe.printStackTrace();
			System.exit(1);
		}
		System.out.println("File read!");


		System.out.println("Before create workflow");
		WorkflowManagerInstanceReference managerInstanceReference = client.createWorkflowManagerInstanceFromBpel(workflowBpelFileContent, workflowExtraDesc, client.getEndpointReference());
		System.out.println("Get reference");
		WorkflowManagerInstanceClient managerInstanceClient = null;
		try {
			managerInstanceClient = new WorkflowManagerInstanceClient(managerInstanceReference.getEndpointReference());
		} catch (MalformedURIException e) {
			e.printStackTrace();
		}
		managerInstanceClient.start();

		//String[] outputs = managerInstanceClient.getOutputValues(); // TODO How will the Manager set the parameters' numeric identifier? 


	}





	public org.oasis.wsrf.properties.GetMultipleResourcePropertiesResponse getMultipleResourceProperties(org.oasis.wsrf.properties.GetMultipleResourceProperties_Element params) throws RemoteException {
		synchronized(portTypeMutex){
			configureStubSecurity((Stub)portType,"getMultipleResourceProperties");
			return portType.getMultipleResourceProperties(params);
		}
	}

	public org.oasis.wsrf.properties.GetResourcePropertyResponse getResourceProperty(javax.xml.namespace.QName params) throws RemoteException {
		synchronized(portTypeMutex){
			configureStubSecurity((Stub)portType,"getResourceProperty");
			return portType.getResourceProperty(params);
		}
	}

	public org.oasis.wsrf.properties.QueryResourcePropertiesResponse queryResourceProperties(org.oasis.wsrf.properties.QueryResourceProperties_Element params) throws RemoteException {
		synchronized(portTypeMutex){
			configureStubSecurity((Stub)portType,"queryResourceProperties");
			return portType.queryResourceProperties(params);
		}
	}

	public org.cagrid.workflow.manager.instance.stubs.types.WorkflowManagerInstanceReference createWorkflowManagerInstanceFromBpel(java.lang.String bpelDescription,java.lang.String operationsDescription,org.apache.axis.message.addressing.EndpointReferenceType managerEPR) throws RemoteException {
		synchronized(portTypeMutex){
			configureStubSecurity((Stub)portType,"createWorkflowManagerInstanceFromBpel");
			org.cagrid.workflow.manager.stubs.CreateWorkflowManagerInstanceFromBpelRequest params = new org.cagrid.workflow.manager.stubs.CreateWorkflowManagerInstanceFromBpelRequest();
			params.setBpelDescription(bpelDescription);
			params.setOperationsDescription(operationsDescription);
			org.cagrid.workflow.manager.stubs.CreateWorkflowManagerInstanceFromBpelRequestManagerEPR managerEPRContainer = new org.cagrid.workflow.manager.stubs.CreateWorkflowManagerInstanceFromBpelRequestManagerEPR();
			managerEPRContainer.setEndpointReference(managerEPR);
			params.setManagerEPR(managerEPRContainer);
			org.cagrid.workflow.manager.stubs.CreateWorkflowManagerInstanceFromBpelResponse boxedResult = portType.createWorkflowManagerInstanceFromBpel(params);
			return boxedResult.getWorkflowManagerInstanceReference();
		}
	}

	public org.cagrid.workflow.manager.instance.stubs.types.WorkflowManagerInstanceReference createWorkflowManagerInstanceFromObjectDescriptor(org.cagrid.workflow.manager.descriptor.WorkflowManagerInstanceDescriptor workflowDesc) throws RemoteException {
		synchronized(portTypeMutex){
			configureStubSecurity((Stub)portType,"createWorkflowManagerInstanceFromObjectDescriptor");
			org.cagrid.workflow.manager.stubs.CreateWorkflowManagerInstanceFromObjectDescriptorRequest params = new org.cagrid.workflow.manager.stubs.CreateWorkflowManagerInstanceFromObjectDescriptorRequest();
			org.cagrid.workflow.manager.stubs.CreateWorkflowManagerInstanceFromObjectDescriptorRequestWorkflowDesc workflowDescContainer = new org.cagrid.workflow.manager.stubs.CreateWorkflowManagerInstanceFromObjectDescriptorRequestWorkflowDesc();
			workflowDescContainer.setWorkflowManagerInstanceDescriptor(workflowDesc);
			params.setWorkflowDesc(workflowDescContainer);
			org.cagrid.workflow.manager.stubs.CreateWorkflowManagerInstanceFromObjectDescriptorResponse boxedResult = portType.createWorkflowManagerInstanceFromObjectDescriptor(params);
			return boxedResult.getWorkflowManagerInstanceReference();
		}
	}

	public org.cagrid.workflow.manager.instance.stubs.types.WorkflowManagerInstanceReference createWorkflowManagerInstance(java.lang.String xmlWorkflowDescription) throws RemoteException {
		synchronized(portTypeMutex){
			configureStubSecurity((Stub)portType,"createWorkflowManagerInstance");
			org.cagrid.workflow.manager.stubs.CreateWorkflowManagerInstanceRequest params = new org.cagrid.workflow.manager.stubs.CreateWorkflowManagerInstanceRequest();
			params.setXmlWorkflowDescription(xmlWorkflowDescription);
			org.cagrid.workflow.manager.stubs.CreateWorkflowManagerInstanceResponse boxedResult = portType.createWorkflowManagerInstance(params);
			return boxedResult.getWorkflowManagerInstanceReference();
		}
	}

}
