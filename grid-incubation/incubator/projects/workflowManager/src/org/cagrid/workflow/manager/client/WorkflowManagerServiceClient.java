package org.cagrid.workflow.manager.client;

import gov.nih.nci.cagrid.introduce.security.client.ServiceSecurityClient;

import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Map.Entry;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

import javax.xml.namespace.QName;
import javax.xml.rpc.NamespaceConstants;

import junit.framework.Assert;

import org.apache.axis.EngineConfiguration;
import org.apache.axis.client.AxisClient;
import org.apache.axis.client.Stub;
import org.apache.axis.configuration.FileProvider;
import org.apache.axis.message.MessageElement;
import org.apache.axis.message.addressing.Address;
import org.apache.axis.message.addressing.AttributedURI;
import org.apache.axis.message.addressing.EndpointReference;
import org.apache.axis.message.addressing.EndpointReferenceType;
import org.apache.axis.types.URI.MalformedURIException;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.cagrid.gaards.cds.common.ProxyLifetime;
import org.cagrid.workflow.helper.descriptor.CDSAuthenticationMethod;
import org.cagrid.workflow.helper.descriptor.ChannelProtection;
import org.cagrid.workflow.helper.descriptor.DeliveryPolicy;
import org.cagrid.workflow.helper.descriptor.InputParameter;
import org.cagrid.workflow.helper.descriptor.InputParameterDescriptor;
import org.cagrid.workflow.helper.descriptor.OperationInputMessageDescriptor;
import org.cagrid.workflow.helper.descriptor.OperationOutputParameterTransportDescriptor;
import org.cagrid.workflow.helper.descriptor.OperationOutputTransportDescriptor;
import org.cagrid.workflow.helper.descriptor.Status;
import org.cagrid.workflow.helper.descriptor.TLSInvocationSecurityDescriptor;
import org.cagrid.workflow.helper.descriptor.TimestampedStatus;
import org.cagrid.workflow.helper.descriptor.WorkflowInvocationHelperDescriptor;
import org.cagrid.workflow.helper.descriptor.WorkflowInvocationSecurityDescriptor;
import org.cagrid.workflow.helper.util.CredentialHandlingUtil;
import org.cagrid.workflow.manager.common.WorkflowManagerServiceI;
import org.cagrid.workflow.manager.descriptor.WorkflowInputParameter;
import org.cagrid.workflow.manager.descriptor.WorkflowInputParameters;
import org.cagrid.workflow.manager.descriptor.WorkflowManagerInstanceDescriptor;
import org.cagrid.workflow.manager.descriptor.WorkflowOutputParameterTransportDescriptor;
import org.cagrid.workflow.manager.descriptor.WorkflowOutputTransportDescriptor;
import org.cagrid.workflow.manager.descriptor.WorkflowPortionDescriptor;
import org.cagrid.workflow.manager.descriptor.WorkflowPortionsDescriptor;
import org.cagrid.workflow.manager.descriptor.WorkflowStageDescriptor;
import org.cagrid.workflow.manager.instance.client.WorkflowManagerInstanceClient;
import org.cagrid.workflow.manager.instance.stubs.types.WorkflowManagerInstanceReference;
import org.cagrid.workflow.manager.stubs.WorkflowManagerServicePortType;
import org.cagrid.workflow.manager.stubs.service.WorkflowManagerServiceAddressingLocator;
import org.cagrid.workflow.manager.util.WorkflowDescriptorParser;
import org.globus.gsi.GlobusCredential;
import org.globus.wsrf.NotifyCallback;

/**
 * This class is autogenerated, DO NOT EDIT GENERATED GRID SERVICE ACCESS METHODS.
 *
 * This client is generated automatically by Introduce to provide a clean unwrapped API to the
 * service.
 *
 * On construction the class instance will contact the remote service and retrieve it's security
 * metadata description which it will use to configure the Stub specifically for each method call.
 * 
 * @created by Introduce Toolkit version 1.1
 */
public class WorkflowManagerServiceClient extends ServiceSecurityClient implements WorkflowManagerServiceI {	
	protected WorkflowManagerServicePortType portType;
	private Object portTypeMutex;

	
	// Synchronizes the access to variable 'isFinished' 
	protected static Lock isFinishedKey = new ReentrantLock();
	protected static Condition isFinishedCondition = isFinishedKey.newCondition();
	protected static Map<String, TimestampedStatus> stageStatus = new HashMap<String, TimestampedStatus>() ;

	// Store the operation name for each service subscribed for notification 
	protected static Map<String, String> EPR2OperationName = new HashMap<String, String>();

	protected static boolean isFinished = false;
	protected static List<EndpointReferenceType> managerInstances = new ArrayList<EndpointReferenceType>();

	final static String XSD_NAMESPACE = "http://www.w3.org/2001/XMLSchema";
	final static String SOAPENCODING_NAMESPACE = "http://schemas.xmlsoap.org/soap/encoding/";

	protected final boolean validatorEnabled = false;  // Enable/Disable the output matcher. Should be true when not debugging

	private static int currParamIndex = 0;
	
	
	private static Log logger = LogFactory.getLog(WorkflowManagerServiceClient.class);

	public WorkflowManagerServiceClient(String url) throws MalformedURIException, RemoteException {
		this(url,null);	
	}

	public WorkflowManagerServiceClient(String url, GlobusCredential proxy) throws MalformedURIException, RemoteException {
		super(url,proxy);
		initialize();
	}

	public WorkflowManagerServiceClient(EndpointReferenceType epr) throws MalformedURIException, RemoteException {
		this(epr,null);
	}

	public WorkflowManagerServiceClient(EndpointReferenceType epr, GlobusCredential proxy) throws MalformedURIException, RemoteException {
		super(epr,proxy);
		initialize();
	}

	private void initialize() throws RemoteException {
		this.portTypeMutex = new Object();
		this.portType = createPortType();
	}

	private WorkflowManagerServicePortType createPortType() throws RemoteException {

		WorkflowManagerServiceAddressingLocator locator = new WorkflowManagerServiceAddressingLocator();
		// attempt to load our context sensitive wsdd file
		InputStream resourceAsStream = getClass().getResourceAsStream("client-config.wsdd");
		if (resourceAsStream != null) {
			// we found it, so tell axis to configure an engine to use it
			EngineConfiguration engineConfig = new FileProvider(resourceAsStream);
			// set the engine of the locator
			locator.setEngine(new AxisClient(engineConfig));
		}
		WorkflowManagerServicePortType port = null;
		try {
			port = locator.getWorkflowManagerServicePortTypePort(getEndpointReference());
		} catch (Exception e) {
			throw new RemoteException("Unable to locate portType:" + e.getMessage(), e);
		}

		return port;
	}

	public static void usage(){
		System.out.println(WorkflowManagerServiceClient.class.getName() + " -url <service url>");
	}
	
	
	

	/** Store the contents of a file in a String */
	private static String readFileToString(File wfDescriptor) {

		int fileLenght = (int) wfDescriptor.length();
		String retval = null;
		
		try {
			FileReader reader = new FileReader(wfDescriptor);
			char[] cbuf = new char[fileLenght];
			reader.read(cbuf);
			
			retval = new String(cbuf);
			
		} catch(IOException ioe){
			logger.error(ioe.getMessage(), ioe);
		}

		return retval;
	}
	
	

	public static void main(String [] args){
		System.out.println("Running the Grid Service Client");
		try{
			if(!(args.length < 2)){
				if(args[0].equals("-url")){
					WorkflowManagerServiceClient client = new WorkflowManagerServiceClient(args[1]);
					// place client calls here if you want to use this main as a
					// test....
//					runCaosDescriptorTest(client, client.getEndpointReference(), "http://localhost:8080/wsrf/services/");
					
					
					File wfDescriptor = new File("C:\\subversion_hawks\\subversion_hawks\\trunk\\grid-incubation\\test\\projects\\" +
							"workflowManager\\resources\\workflowDescriptionSamples\\UnsecureFanInFanOutWorkflow.xml");
					String wfXmlDescriptor = readFileToString(wfDescriptor );
					
					
					wfXmlDescriptor = wfXmlDescriptor.replaceAll("CONTAINERBASE", "http://localhost:8080/wsrf/services");
					
				    WorkflowManagerInstanceDescriptor descriptor = new WorkflowDescriptorParser().parseWorkflowDescriptor(wfXmlDescriptor);
					WorkflowManagerInstanceReference ref = client.createWorkflowManagerInstanceFromObjectDescriptor(descriptor);
					WorkflowManagerInstanceClient instClient = new WorkflowManagerInstanceClient(ref.getEndpointReference());
					instClient.start(); 
					String[] outputs = instClient.getOutputValues();
					
					if( outputs != null ){
						System.out.println("Outputs retrieved");
						for(int i=0; i < outputs.length; i++){
							
							System.out.println("Output #"+ i +" is "+ outputs[i]);
						}
						System.out.println("End printing outputs");
						
					}
					

					System.out.println("End client");

				} else {
					usage();
					System.exit(1);
				}
			} else {
				usage();
				System.exit(1);
			}
		} catch (Exception e) {
			e.printStackTrace();
			System.exit(1);
		}
	}
	

	private static void runCaosDescriptorTest(WorkflowManagerServiceClient managerClient, EndpointReferenceType delegatedCredentialProxy, String containerBaseURL) throws RemoteException {

		// Create security descriptor for the stages (in this case, all of them present the same security requirements)
		CDSAuthenticationMethod cds_auth = new CDSAuthenticationMethod(delegatedCredentialProxy);
		TLSInvocationSecurityDescriptor tlsSecDesc = new TLSInvocationSecurityDescriptor(cds_auth , null, ChannelProtection.Privacy, null);
		WorkflowInvocationSecurityDescriptor secDescriptor = new WorkflowInvocationSecurityDescriptor(tlsSecDesc , null, null);
		
	
		
		// Instantiate ManagerDescription
		WorkflowManagerInstanceDescriptor wfDesc = new WorkflowManagerInstanceDescriptor();

		// Describe the single local workflow this workflow is divided in
		WorkflowPortionDescriptor wfPart = new WorkflowPortionDescriptor();
		String workflowHelperServiceLocation = containerBaseURL + "cagrid/WorkflowHelper";
		wfPart.setWorkflowHelperServiceLocation(workflowHelperServiceLocation);

		// Describe the InstanceHelper associated with the local workflow
		org.cagrid.workflow.helper.descriptor.WorkflowInstanceHelperDescriptor workflowDescriptor2 = new org.cagrid.workflow.helper.descriptor.WorkflowInstanceHelperDescriptor();
		String workflowID = "WorkFlow2";
		workflowDescriptor2.setWorkflowID(workflowID);
		wfPart.setInstanceHelperDesc(workflowDescriptor2);

		ArrayList<WorkflowStageDescriptor> stagesDescs = new ArrayList<WorkflowStageDescriptor>();
		ArrayList<WorkflowInputParameter> inputParams = new ArrayList<WorkflowInputParameter>();
		ArrayList<WorkflowOutputParameterTransportDescriptor> outputParams = new ArrayList<WorkflowOutputParameterTransportDescriptor>();

		// BEGIN ReceiveArrayService::ReceiveArrayAndMore
		WorkflowStageDescriptor currStageDesc = new WorkflowStageDescriptor();
		int currStageID = 0;
		currStageDesc.setGlobalUniqueIdentifier(currStageID);

		org.cagrid.workflow.helper.descriptor.WorkflowInvocationHelperDescriptor operation_ram = new org.cagrid.workflow.helper.descriptor.WorkflowInvocationHelperDescriptor();
		operation_ram.setWorkflowID("GeorgeliusWorkFlow");
		operation_ram.setOperationQName(new QName("http://receivearrayservice.introduce.cagrid.org/ReceiveArrayService", "SecureReceiveArrayAndMoreRequest"));
		operation_ram.setServiceURL(containerBaseURL+"cagrid/ReceiveArrayService");
		//operation_ram.setOutputType(); // Service has no output
		operation_ram.setWorkflowInvocationSecurityDescriptor(secDescriptor);  // Set security requirements
		currStageDesc.setBasicDescription(operation_ram);

		// Creating Descriptor of the InputMessage
		org.cagrid.workflow.helper.descriptor.OperationInputMessageDescriptor inputMessage_ram = new OperationInputMessageDescriptor();
		InputParameterDescriptor[] inputParams_ram = new InputParameterDescriptor[3];
		inputParams_ram[0] = new InputParameterDescriptor(new QName("number"), new QName(NamespaceConstants.NSURI_SCHEMA_XSD, "int"), false);
		inputParams_ram[1] = new InputParameterDescriptor(new QName("strArray"), new QName(NamespaceConstants.NSURI_SCHEMA_XSD, "string"), true);
		inputParams_ram[2] = new InputParameterDescriptor(new QName("booleanValue"), new QName(NamespaceConstants.NSURI_SCHEMA_XSD, "boolean"), false);
		inputMessage_ram.setInputParam(inputParams_ram);
		currStageDesc.setInputsDescription(inputMessage_ram);
		// End InputMessage Descriptor

		// Creating an empty outputDescriptor
		OperationOutputTransportDescriptor outputDescriptor_ram = new OperationOutputTransportDescriptor();
		OperationOutputParameterTransportDescriptor outParameterDescriptor_ram [] = new OperationOutputParameterTransportDescriptor[0];

		// takes the reference to no service
		outputDescriptor_ram.setParamDescriptor(outParameterDescriptor_ram);
		currStageDesc.setOutputTransportDescriptor(outputDescriptor_ram);
		stagesDescs.add(currStageDesc);

		// Set the values of the two arguments of simple type
		inputParams.add(new WorkflowInputParameter(new InputParameter("999", 0), currStageID));
		inputParams.add(new WorkflowInputParameter(new InputParameter("true",2), currStageID));
		// END ReceiveArrayService::ReceiveArrayAndMore

		// BEGIN CreateArrayService
		currStageDesc = new WorkflowStageDescriptor();
		currStageID++;
		currStageDesc.setGlobalUniqueIdentifier(currStageID);

		org.cagrid.workflow.helper.descriptor.WorkflowInvocationHelperDescriptor operation_cas = new org.cagrid.workflow.helper.descriptor.WorkflowInvocationHelperDescriptor();
		String access_url = containerBaseURL+"cagrid/CreateArrayService";
		operation_cas.setWorkflowID("GeorgeliusWorkFlow");
		operation_cas.setOperationQName(new QName("http://createarrayservice.introduce.cagrid.org/CreateArrayService", "SecureGetArrayRequest"));
		operation_cas.setServiceURL(access_url);
		operation_cas.setOutputType(new QName(NamespaceConstants.NSURI_SOAP_ENCODING, "string[]"));
		operation_cas.setWorkflowInvocationSecurityDescriptor(secDescriptor);  // Set security requirements
		currStageDesc.setBasicDescription(operation_cas);

		// Creating Descriptor of the InputMessage
		org.cagrid.workflow.helper.descriptor.OperationInputMessageDescriptor inputMessage_cas = new OperationInputMessageDescriptor();
		InputParameterDescriptor[] inputParams_cas = new InputParameterDescriptor[0];
		inputMessage_cas.setInputParam(inputParams_cas);
		currStageDesc.setInputsDescription(inputMessage_cas);
		// End InputMessage Descriptor

		// Creating the outputDescriptor of the only service that will receive the output (ReceiveArrayService)
		OperationOutputTransportDescriptor outputDescriptor_cas = new OperationOutputTransportDescriptor();
		int numDestinations = 1;
		OperationOutputParameterTransportDescriptor outParameterDescriptor_cas [] = new OperationOutputParameterTransportDescriptor[numDestinations];

		// First destination: ReceiveArrayService::ReceiveArrayAndMore
		outParameterDescriptor_cas[0] = new OperationOutputParameterTransportDescriptor();
		outParameterDescriptor_cas[0].setParamIndex(1);
		outParameterDescriptor_cas[0].setType(new QName( NamespaceConstants.NSURI_SOAP_ENCODING ,"string[]"));
		outParameterDescriptor_cas[0].setQueryNamespaces(new QName[]{ new QName("http://createarrayservice.introduce.cagrid.org/CreateArrayService", "ns0"),
				new QName(NamespaceConstants.NSURI_SCHEMA_XSD,"xsd")});
		outParameterDescriptor_cas[0].setLocationQuery("/ns0:GetArrayResponse");
		outParameterDescriptor_cas[0].setDestinationGlobalUniqueIdentifier(0);
//		outParameterDescriptor_cas[0].setDestinationEPR(new EndpointReferenceType[]{ serviceClient_ram.getEndpointReference()});

		// Second destination: Output matcher
		if(false){

			//System.out.println("Setting 5th param in the output matcher: "+ outputMatcherEPR); //DEBUG

			outParameterDescriptor_cas[1] = new OperationOutputParameterTransportDescriptor();
			outParameterDescriptor_cas[1].setParamIndex(4);
			outParameterDescriptor_cas[1].setType(new QName( NamespaceConstants.NSURI_SOAP_ENCODING ,"string[]"));
			outParameterDescriptor_cas[1].setQueryNamespaces(new QName[]{ new QName("http://createarrayservice.introduce.cagrid.org/CreateArrayService", "ns0"),
					new QName(NamespaceConstants.NSURI_SCHEMA_XSD,"xsd")});
			outParameterDescriptor_cas[1].setLocationQuery("/ns0:GetArrayResponse");
//			outParameterDescriptor_cas[1].setDestinationEPR(new EndpointReferenceType[]{ outputMatcherID});
		}

		// Add one output to the worklow outputs' description
		WorkflowOutputParameterTransportDescriptor outputParam = new WorkflowOutputParameterTransportDescriptor();
		OperationOutputParameterTransportDescriptor paramDescription = new OperationOutputParameterTransportDescriptor();
		paramDescription.setLocationQuery("/ns0:GetArrayResponse");
		paramDescription.setQueryNamespaces(new QName[]{ new QName("http://createarrayservice.introduce.cagrid.org/CreateArrayService", "ns0"),
				new QName(NamespaceConstants.NSURI_SCHEMA_XSD,"xsd")});
		paramDescription.setType(new QName( NamespaceConstants.NSURI_SOAP_ENCODING ,"string[]"));
		outputParam.setParamDescription(paramDescription );
		outputParam.setSourceGUID(currStageID);
		outputParams.add(outputParam);

		// takes the reference to ReceiveArrayService
		outputDescriptor_cas.setParamDescriptor(outParameterDescriptor_cas);
		currStageDesc.setOutputTransportDescriptor(outputDescriptor_cas);

		stagesDescs.add(currStageDesc);
		// END CreateArrayService 

		logger.info("Configuring workflow inputs and outputs");
		WorkflowInputParameters inputParameters = new WorkflowInputParameters(inputParams.toArray(new WorkflowInputParameter[0]));
		wfDesc.setInputs(inputParameters);
		WorkflowOutputTransportDescriptor outputDesc = new WorkflowOutputTransportDescriptor(outputParams.toArray(new WorkflowOutputParameterTransportDescriptor[0]));
		wfDesc.setOutputDesc(outputDesc);
		wfPart.setInvocationHelperDescs(stagesDescs.toArray(new WorkflowStageDescriptor[0]));
		wfDesc.setLocalWorkflows(new WorkflowPortionsDescriptor(new WorkflowPortionDescriptor[]{ wfPart }));
		WorkflowManagerInstanceReference instanceRef = managerClient.createWorkflowManagerInstanceFromObjectDescriptor(wfDesc);
		WorkflowManagerInstanceClient instanceClient = null;
		try {
			instanceClient = new WorkflowManagerInstanceClient(instanceRef.getEndpointReference());
//			subscribe(TimestampedStatus.getTypeDesc().getXmlType(), instanceClient, workflowID);
		} catch (MalformedURIException e) {
			logger.error(e.getMessage(),e );
		} 

		managerInstances.add(instanceRef.getEndpointReference());

		logger.info("Starting execution");
		instanceClient.start();

		logger.info("Retrieving workflow outputs");
		String[] outputs = instanceClient.getOutputValues();

		for(int i=0; i < outputs.length; i++){

			logger.info("Output #"+ i +" is "+ outputs[i]);
		}

//		this.waitUntilCompletion();
//		instanceClient.destroy();

		logger.info("END");
	}

	
	
	/*
	private static void runBpelTest(WorkflowManagerServiceClient client) throws RemoteException{

		String bpelFileName = System.getProperty("bpel.file");
		System.out.println("BPEL file is "+ bpelFileName);
		String extraDescFilename = System.getProperty("extra.file");

		String workflowBpelFileContent = null;
		String workflowExtraDesc = null;
		try{
			workflowBpelFileContent = FileUtil.readTextFile(bpelFileName);
			workflowExtraDesc = FileUtil.readTextFile(extraDescFilename);
		}catch(IOException ioe){
			ioe.printStackTrace();
			System.exit(1);
		}
		System.out.println("File read!");

		System.out.println("Before create workflow");
		WorkflowManagerInstanceReference managerInstanceReference = client.createWorkflowManagerInstanceFromBpel(workflowBpelFileContent, workflowExtraDesc, client.getEndpointReference());
		System.out.println("Get reference");
		WorkflowManagerInstanceClient managerInstanceClient = null;
		try {
			managerInstanceClient = new WorkflowManagerInstanceClient(managerInstanceReference.getEndpointReference());
		} catch (MalformedURIException e) {
			e.printStackTrace();
		}
		managerInstanceClient.start();

		//String[] outputs = managerInstanceClient.getOutputValues(); // TODO How will the Manager set the parameters' numeric identifier? 

	}
	// */
	
	

  
  
  
  /************ TODO TEST, CAN BE REMOVED AFTER DEBUGGING ***************/
	static class RunSecureWorkflowStep implements NotifyCallback {

		// Synchronizes the access to variable 'isFinished' 
		protected Lock isFinishedKey = new ReentrantLock();
		protected Condition isFinishedCondition = isFinishedKey.newCondition();
		protected Map<String, TimestampedStatus> stageStatus = new HashMap<String, TimestampedStatus>() ;

		// Store the operation name for each service subscribed for notification 
		protected Map<String, String> EPR2OperationName = new HashMap<String, String>();

		protected boolean isFinished = false;
		protected List<EndpointReferenceType> managerInstances = new ArrayList<EndpointReferenceType>();

		private EndpointReferenceType cdsEPR;
		private GlobusCredential userCredential; 
		private EndpointReferenceType managerEPR;
		private String containerBaseURL;

		final static String XSD_NAMESPACE = "http://www.w3.org/2001/XMLSchema";
		final static String SOAPENCODING_NAMESPACE = "http://schemas.xmlsoap.org/soap/encoding/";

		protected final boolean validatorEnabled = false;  // Enable/Disable the output matcher. Should be true when not debugging

		public RunSecureWorkflowStep(EndpointReference managerEPR, EndpointReferenceType cdsEPR, String container_base_url, 
				GlobusCredential userCredential, String cdsURL) {

			this.managerEPR = managerEPR;
			this.containerBaseURL = container_base_url;

			this.userCredential = userCredential;
			try {
				this.cdsEPR = new EndpointReferenceType(new Address(cdsURL));
			} catch (MalformedURIException e) {
				logger.error(e.getMessage(), e);
			}
		}

		public void runStep() throws Throwable {

			System.out.println("---- BEGIN SECURE WORKFLOW TEST ----");

			try{

				String wfManagerURL = this.containerBaseURL + "cagrid/WorkflowManagerService";
				final EndpointReferenceType manager_epr = new EndpointReferenceType(new Address(wfManagerURL));
				WorkflowManagerServiceClient wf_manager = new WorkflowManagerServiceClient(manager_epr);

				// User role: Delegate user credential to the Manager 	
				logger.info("Obtaining user credential"); 
				AttributedURI cdsAddress = this.cdsEPR.getAddress();
				String cdsURL = cdsAddress.toString(); 
				EndpointReferenceType delegatedCredentialProxy = CredentialHandlingUtil.delegateCredential(this.userCredential, wf_manager.getIdentity(), 
						cdsURL , new ProxyLifetime(5,0,0), new ProxyLifetime(6,0,0), 3, 2);
				logger.info("Delegation done");

				// Set delegation parameters
				ProxyLifetime delegationLifetime = new ProxyLifetime(4,0,0);
				ProxyLifetime issuedCredentialLifetime = new ProxyLifetime(5,0,0);
				int delegationPath = 1;
				int issuedCredentialPath = 0; 

				/*** Service that will gather all the output and match against the expected ones ***/
				Integer outputMatcherID = this.validatorEnabled ? runOuputMatcher(wf_manager, delegatedCredentialProxy, 
						delegationLifetime, issuedCredentialLifetime, delegationPath, issuedCredentialPath) : null;

				/*** Testing arrays as services' input ***/

				/** simple type arrays **/
				System.out.println("[CreateTestSecureWorkflowsStep] Simple arrays as input");
				runSimpleArrayTest(wf_manager, outputMatcherID, issuedCredentialLifetime, delegatedCredentialProxy, delegationLifetime,
						issuedCredentialPath, delegationPath);
				System.out.println("[CreateTestSecureWorkflowsStep] OK");

				/*System.out.println("[CreateTestSecureWorkflowsStep] Complex arrays as input");
			runComplexArrayTest(wf_manager, outputMatcherID, issuedCredentialLifetime, delegationLifetime, delegatedCredentialProxy,
					issuedCredentialPath, delegationPath);
			System.out.println("[CreateTestSecureWorkflowsStep] OK");

			System.out.println("[CreateTestSecureWorkflowsStep] END Testing arrays"); // */

				/** BEGIN streaming test **/
				/*System.out.println("[CreateTestSecureWorkflowsStep] BEGIN Testing streaming");

			// Streaming simple types 
			System.out.println("[CreateTestSecureWorkflowsStep] Streaming of simple-type arrays");
			runSimpleArrayStreaming(wf_manager, delegatedCredentialProxy, issuedCredentialLifetime, delegationLifetime, issuedCredentialPath,
					delegationPath);
			System.out.println("[CreateTestSecureWorkflowsStep] OK");  // */

				/* Streaming complex types */
				/*System.out.print("[CreateTestSecureWorkflowsStep] Streaming of complex-type arrays");
			runComplexArrayStreaming(wf_manager, issuedCredentialLifetime, delegatedCredentialProxy, delegationLifetime, 
					issuedCredentialPath, delegationPath);
			System.out.println("[CreateTestSecureWorkflowsStep] OK");

			System.out.println("[CreateTestSecureWorkflowsStep] END Testing streaming"); // */

				/** FAN IN AND FAN OUT TEST **/
				/*System.out.println("[CreateTestSecureWorkflowsStep] BEGIN Testing fan in and fan out"); 
			runFaninFanOutTest(wf_manager, outputMatcherID, delegationLifetime, delegatedCredentialProxy, issuedCredentialLifetime,
					delegationPath, issuedCredentialPath);
			System.out.println("[CreateTestSecureWorkflowsStep] END Testing fan in and fan out"); // */

				// Block until every stage reports either a FINISHED or an ERROR status
				this.waitForCompletion();

			}
			catch(Throwable t){
				logger.error(t.getMessage(), t);
				Assert.fail();
			}

			System.out.println("---- END SECURE WORKFLOW TEST ----");

			return;
		}

		/**
		 * Instantiate the service that can match all the workflows' outputs against the expected ones 
		 * 
		 * @param manager_epr EndpointReference of the manager so each workflow stage can invoke 'setParameter' on it (not used)
		 * @param wf_manager Client of a running WorkflowHelper service
		 * @param delegatedCredentialProxy Credential delegated by the user to be used when calling the workflows' stages
		 * @param delegationLifetime Lifetime of the delegation of the credential to the workflow stages
		 * @param issuedCredentialLifetime 
		 * @param delegationPath
		 * @param issuedCredentialPath
		 * 
		 * 
		 * @return An EPR that can be used to contact the OutputMatcher
		 * 
		 * */
		private int runOuputMatcher(WorkflowManagerServiceClient wf_manager, 
				EndpointReferenceType delegatedCredentialProxy, ProxyLifetime delegationLifetime, ProxyLifetime issuedCredentialLifetime, 
				int delegationPath, int issuedCredentialPath) throws RemoteException {

			System.out.println("BEGIN runOuputMatcher");

			/*	WorkflowInstanceHelperDescriptor validatorInstanceDesc = new org.cagrid.workflow.helper.descriptor.WorkflowInstanceHelperDescriptor();
		String workflowID = "Validator";
		validatorInstanceDesc.setWorkflowID(workflowID);
		validatorInstanceDesc.setWorkflowManagerEPR(manager_epr);

		String outputMatcherURI =  "http://validateoutputsservice.test.workflow.cagrid.org/ValidateOutputsService";

		WorkflowInstanceHelperClient validatorInstance = null;
		try {
			validatorInstance = wf_manager.createWorkflowInstanceHelper(validatorInstanceDesc);
		} catch (MalformedURIException e) {
			e.printStackTrace();
		}

		this.subscribe(TimestampedStatus.getTypeDesc().getXmlType(), validatorInstance, workflowID);

		WorkflowInvocationHelperDescriptor validatorInvocationDesc = new WorkflowInvocationHelperDescriptor();
		validatorInvocationDesc.setOperationQName(
				new QName(outputMatcherURI, "SecureValidateTestOutputRequest"));
		validatorInvocationDesc.setServiceURL(containerBaseURL + "/wsrf/services/cagrid/ValidateOutputsService");

		// Configure security
		CDSAuthenticationMethod cds_auth = new CDSAuthenticationMethod(cdsEPR);
		TLSInvocationSecurityDescriptor tlsSecDesc = new TLSInvocationSecurityDescriptor(cds_auth , null, ChannelProtection.Privacy, null);
		WorkflowInvocationSecurityDescriptor secDescriptor = new WorkflowInvocationSecurityDescriptor(tlsSecDesc , null, null);
		validatorInvocationDesc.setWorkflowInvocationSecurityDescriptor(secDescriptor);

		WorkflowInvocationHelperClient validatorInvocation1 = null;
		try {
			validatorInvocation1 = validatorInstance.createWorkflowInvocationHelper(validatorInvocationDesc);
		} catch (MalformedURIException e) {
			e.printStackTrace();
		}

		// Subscribe for status notifications
		//this.subscribe(org.cagrid.workflow.helper.descriptor.TimestampedStatus.getTypeDesc().getXmlType(), validatorInvocation1
			//	, validatorInvocationDesc.getOperationQName().toString());

		// Set the GlobusCredential to use on InstanceHelper
		//System.out.println("[runOutputMatcher] Delegating helper's credential to the InstanceHelper"); //DEBUG
		EndpointReferenceType delegationEPR = null;
		try{
			delegationEPR = CredentialHandlingUtil.delegateCredential(delegatedCredentialProxy, wf_manager.getIdentity(), this.cdsURL, delegationLifetime, issuedCredentialLifetime, 
					delegationPath, issuedCredentialPath);

			//System.out.println("Informing the InstanceHelper about the delegation"); //DEBUG

			validatorInstance.addCredential(validatorInvocation1.getEndpointReference(), delegationEPR);
			//System.out.println("[runOutputMatcher] Done");
		}
		catch(Throwable t){
			t.printStackTrace();
		}

		// Configure inputs
		OperationInputMessageDescriptor validatorInputDesc = new OperationInputMessageDescriptor();
		InputParameterDescriptor[] inputParam = new InputParameterDescriptor[8];
		inputParam[0] = new InputParameterDescriptor(new QName("test1Param1"), new QName(XSD_NAMESPACE, "int"));
		inputParam[1] = new InputParameterDescriptor(new QName("test1Param2"), new QName("http://systemtests.workflow.cagrid.org/SystemTests", "ComplexType[]"));
		inputParam[2] = new InputParameterDescriptor(new QName("test1Param3"), new QName(XSD_NAMESPACE, "boolean"));
		inputParam[3] = new InputParameterDescriptor(new QName("test2Param1"), new QName(XSD_NAMESPACE, "int"));
		inputParam[4] = new InputParameterDescriptor(new QName("test2Param2"), new QName(XSD_NAMESPACE, "string[]"));
		inputParam[5] = new InputParameterDescriptor(new QName("test2Param3"), new QName(XSD_NAMESPACE, "boolean"));
		inputParam[6] = new InputParameterDescriptor(new QName("test3Param1"), new QName(XSD_NAMESPACE, "string"));
		inputParam[7] = new InputParameterDescriptor(new QName("test3Param2"), new QName(XSD_NAMESPACE, "string")); 

		validatorInputDesc.setInputParam(inputParam);
		validatorInvocation1.configureInput(validatorInputDesc);

		// Configure outputs: it has none
		OperationOutputTransportDescriptor validatorOutput = new OperationOutputTransportDescriptor();
		OperationOutputParameterTransportDescriptor[] paramDescriptor = new OperationOutputParameterTransportDescriptor[0];
		validatorOutput.setParamDescriptor(paramDescriptor );
		validatorInvocation1.configureOutput(validatorOutput);
		validatorInvocation1.start();

		// Set static parameters
		validatorInvocation1.setParameter(new InputParameter("999", 0));
		validatorInvocation1.setParameter(new InputParameter("true", 2));
		validatorInvocation1.setParameter(new InputParameter("999", 3));
		validatorInvocation1.setParameter(new InputParameter("true", 5));

		System.out.println("END runOuputMatcher");

		return validatorInvocation1.getEndpointReference(); // */
			return Integer.MAX_VALUE;
		}

		/**
		 * Instantiate the workflow that will test complex array streaming
		 * 
		 * @param manager_epr EndpointReference of the manager so each workflow stage can invoke 'setParameter' on it (not used)
		 * @param wf_manager Client of a running WorkflowHelper service
		 * @param delegatedCredentialProxy Credential delegated by the user to be used when calling the workflows' stages
		 * @param delegationLifetime Lifetime of the delegation of the credential to the workflow stages
		 * @param issuedCredentialLifetime 
		 * @param delegationPath
		 * @param issuedCredentialPath
		 * 
		 * */
		private void runComplexArrayStreaming(WorkflowManagerServiceClient wf_manager, ProxyLifetime issuedCredentialLifetime, EndpointReferenceType delegatedCredentialProxy, ProxyLifetime delegationLifetime, int issuedCredentialPath, int delegationPath)throws RemoteException {

			logger.info("BEGIN");

			// Create security descriptor for the stages (in this case, all of them present the same security requirements)
			CDSAuthenticationMethod cds_auth = new CDSAuthenticationMethod(cdsEPR);
			TLSInvocationSecurityDescriptor tlsSecDesc = new TLSInvocationSecurityDescriptor(cds_auth , null, ChannelProtection.Privacy, null);
			WorkflowInvocationSecurityDescriptor secDescriptor = new WorkflowInvocationSecurityDescriptor(tlsSecDesc , null, null);

			// Create the description of the single local workflow this workflow is divided in 
			WorkflowPortionDescriptor workflowParts = new WorkflowPortionDescriptor();
			String workflowHelperServiceLocation = this.containerBaseURL + "cagrid/WorkflowHelper";
			logger.info("WorkflowHelper is located at: "+ workflowHelperServiceLocation);
			workflowParts.setWorkflowHelperServiceLocation(workflowHelperServiceLocation);

			logger.info("Creating InstanceHelper descriptor");
			org.cagrid.workflow.helper.descriptor.WorkflowInstanceHelperDescriptor workflowDescriptor5 = new org.cagrid.workflow.helper.descriptor.WorkflowInstanceHelperDescriptor();
			String workflowID = "WorkFlow5";
			workflowDescriptor5.setWorkflowID(workflowID);
			workflowParts.setInstanceHelperDesc(workflowDescriptor5);

			ArrayList<WorkflowStageDescriptor> stagesDescs = new ArrayList<WorkflowStageDescriptor>();
			ArrayList<WorkflowInputParameter> workflowInputs = new ArrayList<WorkflowInputParameter>();

			// BEGIN service 4				
			logger.info("Describing service 4");
			WorkflowStageDescriptor currStageDesc = new WorkflowStageDescriptor();
			int currStageID = 4;
			currStageDesc.setGlobalUniqueIdentifier(currStageID);

			logger.info("Building basic description");
			org.cagrid.workflow.helper.descriptor.WorkflowInvocationHelperDescriptor operation4 = new org.cagrid.workflow.helper.descriptor.WorkflowInvocationHelperDescriptor();

			java.lang.String acess_url = containerBaseURL+"cagrid/Service4";
			operation4.setWorkflowID("GeorgeliusWorkFlow");
			operation4.setOperationQName(new QName("http://service4.introduce.cagrid.org/Service4", "SecurePrintResultsRequest"));
			operation4.setServiceURL(acess_url);
			operation4.setWorkflowInvocationSecurityDescriptor(secDescriptor);  // Set security requirements
			currStageDesc.setBasicDescription(operation4);

			// Creating Descriptor of the InputMessage
			logger.info("Building input parameters descriptor");
			org.cagrid.workflow.helper.descriptor.OperationInputMessageDescriptor inputMessage4 = new OperationInputMessageDescriptor();
			InputParameterDescriptor[] inputParams4 = new InputParameterDescriptor[2];
			inputParams4[0] = new InputParameterDescriptor(new QName("result1"), new QName(XSD_NAMESPACE, "string"), false);
			inputParams4[1] = new InputParameterDescriptor(new QName("result2"), new QName(XSD_NAMESPACE, "string"), false);
			inputMessage4.setInputParam(inputParams4);
			currStageDesc.setInputsDescription(inputMessage4);
			// End InputMessage Descriptor

			// Setting output descriptor
			logger.info("Building output descriptor");
			OperationOutputTransportDescriptor outputDescriptor4 = new OperationOutputTransportDescriptor();
			OperationOutputParameterTransportDescriptor outParameterDescriptor4 [] = new OperationOutputParameterTransportDescriptor[0];
			outputDescriptor4.setParamDescriptor(outParameterDescriptor4);

			// Setting second parameter
			logger.info("Setting value for the 2nd argument");
			workflowInputs.add(new WorkflowInputParameter(new InputParameter("complex type's streaming", 1), currStageID));
			currStageDesc.setOutputTransportDescriptor(outputDescriptor4);
			stagesDescs.add(currStageDesc);
			logger.info("Done Service 4");
			// END service 4

			// BEGIN CreateArrayService::getComplexArray	
			logger.info("Describing CreateArrayService");
			currStageDesc = new WorkflowStageDescriptor();
			currStageID = 0;
			currStageDesc.setGlobalUniqueIdentifier(currStageID);

			logger.info("Building stage basic description");
			org.cagrid.workflow.helper.descriptor.WorkflowInvocationHelperDescriptor operation__ca = new org.cagrid.workflow.helper.descriptor.WorkflowInvocationHelperDescriptor();
			String access_url = containerBaseURL+"cagrid/CreateArrayService";
			operation__ca.setWorkflowID("GeorgeliusWorkFlow");
			operation__ca.setOperationQName(new QName("http://createarrayservice.introduce.cagrid.org/CreateArrayService", "SecureGetComplexArrayRequest"));
			operation__ca.setServiceURL(access_url);
			operation__ca.setOutputType(new QName("http://systemtests.workflow.cagrid.org/SystemTests", "ComplexType[]"));
			operation__ca.setWorkflowInvocationSecurityDescriptor(secDescriptor);  // Set security requirements
			currStageDesc.setBasicDescription(operation__ca);

			// Creating Descriptor of the InputMessage
			logger.info("Building input parameters' descriptor");
			org.cagrid.workflow.helper.descriptor.OperationInputMessageDescriptor inputMessage__ca = new OperationInputMessageDescriptor();
			InputParameterDescriptor[] inputParams__ca = new InputParameterDescriptor[0];
			inputMessage__ca.setInputParam(inputParams__ca);
			currStageDesc.setInputsDescription(inputMessage__ca);
			// End InputMessage Descriptor

			// Creating the outputDescriptor of the only service that will receive the output (ReceiveArrayService)
			logger.info("Building output descriptor");
			OperationOutputTransportDescriptor outputDescriptor__ca = new OperationOutputTransportDescriptor();
			OperationOutputParameterTransportDescriptor outParameterDescriptor__ca [] = new OperationOutputParameterTransportDescriptor[1];

			// First destination: ReceiveArrayService::ReceiveComplexArray
			logger.info("Adding destination for output");
			outParameterDescriptor__ca[0] = new OperationOutputParameterTransportDescriptor();
			outParameterDescriptor__ca[0].setDeliveryPolicy(DeliveryPolicy.ROUNDROBIN);
			outParameterDescriptor__ca[0].setParamIndex(0);
			outParameterDescriptor__ca[0].setType(new QName(XSD_NAMESPACE ,"string"));
			outParameterDescriptor__ca[0].setQueryNamespaces(new QName[]{ new QName("http://createarrayservice.introduce.cagrid.org/CreateArrayService", "ns0"),
					new QName(XSD_NAMESPACE,"xsd"), new QName("http://systemtests.workflow.cagrid.org/SystemTests", "abc")});
			outParameterDescriptor__ca[0].setLocationQuery("/ns0:GetComplexArrayResponse/abc:ComplexType/abc:message");
			outParameterDescriptor__ca[0].setDestinationGlobalUniqueIdentifier(4);
//			outParameterDescriptor__ca[0].setDestinationEPR(new EndpointReferenceType[]{serviceClient__4.getEndpointReference()});

			// takes the reference to ReceiveComplexArrayService
			outputDescriptor__ca.setParamDescriptor(outParameterDescriptor__ca);
			currStageDesc.setOutputTransportDescriptor(outputDescriptor__ca);
			stagesDescs.add(currStageDesc);
			logger.info("Done CreateArrayService");
			// END CreateArrayService::getComplexArray 

			// Store stages' description
			logger.info("Storing stages' descriptors");
			WorkflowStageDescriptor[] invocationHelperDescs = stagesDescs.toArray(new WorkflowStageDescriptor[0]);
			workflowParts.setInvocationHelperDescs(invocationHelperDescs);

			// Store workflow inputs' settings
			logger.info("Storing workflow input data");
			WorkflowInputParameters inputs = new WorkflowInputParameters();
			WorkflowInputParameter[] parameters = workflowInputs.toArray(new WorkflowInputParameter[0]);
			inputs.setParameter(parameters);

			// Store workflow outputs' description
			logger.info("Storing workflow output output description");
			WorkflowOutputTransportDescriptor outputDesc = new WorkflowOutputTransportDescriptor();
			WorkflowOutputParameterTransportDescriptor[] paramDescriptor = new WorkflowOutputParameterTransportDescriptor[0];
			outputDesc.setParamDescriptor(paramDescriptor);

			logger.info("Creating ManagerInstance");
			WorkflowManagerInstanceDescriptor managerInstanceDesc = new WorkflowManagerInstanceDescriptor();
			managerInstanceDesc.setInputs(inputs);
			managerInstanceDesc.setOutputDesc(outputDesc);
			managerInstanceDesc.setLocalWorkflows(new WorkflowPortionsDescriptor(new WorkflowPortionDescriptor[]{ workflowParts }));

			WorkflowManagerInstanceReference managerInstanceRef = wf_manager.createWorkflowManagerInstanceFromObjectDescriptor(managerInstanceDesc);
			WorkflowManagerInstanceClient managerInstanceClient = null;
			try {
				managerInstanceClient = new WorkflowManagerInstanceClient(managerInstanceRef.getEndpointReference());

			} catch (MalformedURIException e) {
				logger.error(e.getMessage(), e);
				e.printStackTrace();

			} 

			this.managerInstances.add(managerInstanceRef.getEndpointReference());

			logger.info("Starting workflow execution");
			managerInstanceClient.start();

			logger.info("END");	}

		/**
		 * Instantiate the workflow that will test simple array streaming
		 * 
		 * @param manager_epr EndpointReference of the manager so each workflow stage can invoke 'setParameter' on it (not used)
		 * @param wf_manager Client of a running WorkflowHelper service
		 * @param delegatedCredentialProxy Credential delegated by the user to be used when calling the workflows' stages
		 * @param delegationLifetime Lifetime of the delegation of the credential to the workflow stages
		 * @param issuedCredentialLifetime 
		 * @param delegationPath
		 * @param issuedCredentialPath
		 * 
		 * */
		private void runSimpleArrayStreaming(WorkflowManagerServiceClient wf_manager, EndpointReferenceType delegatedCredentialProxy, ProxyLifetime issuedCredentialLifetime, ProxyLifetime delegationLifetime, int issuedCredentialPath, int delegationPath) throws RemoteException {

			// Create security descriptor for the stages (in this case, all of them present the same security requirements)
			CDSAuthenticationMethod cds_auth = new CDSAuthenticationMethod(cdsEPR);
			TLSInvocationSecurityDescriptor tlsSecDesc = new TLSInvocationSecurityDescriptor(cds_auth , null, ChannelProtection.Privacy, null);
			WorkflowInvocationSecurityDescriptor secDescriptor = new WorkflowInvocationSecurityDescriptor(tlsSecDesc , null, null);

			// Create descriptor of the ManagerInstance
			WorkflowManagerInstanceDescriptor wfDesc = new WorkflowManagerInstanceDescriptor();
			WorkflowPortionDescriptor workflowPart = new WorkflowPortionDescriptor();
			String workflowHelperServiceLocation = this.containerBaseURL + "cagrid/WorkflowHelper";
			workflowPart.setWorkflowHelperServiceLocation(workflowHelperServiceLocation);

			// Create descriptor for the only InstanceHelper of this workflow
			org.cagrid.workflow.helper.descriptor.WorkflowInstanceHelperDescriptor instanceDesc = new org.cagrid.workflow.helper.descriptor.WorkflowInstanceHelperDescriptor();
			instanceDesc.setWorkflowID("WorkFlow5");
			workflowPart.setInstanceHelperDesc(instanceDesc);

			ArrayList<WorkflowStageDescriptor> stagesDescs = new ArrayList<WorkflowStageDescriptor>();
			ArrayList<WorkflowInputParameter> inputData = new ArrayList<WorkflowInputParameter>();

			// BEGIN service 4
			WorkflowStageDescriptor currStageDesc = new WorkflowStageDescriptor();
			int currGUID = 4;
			currStageDesc.setGlobalUniqueIdentifier(currGUID);

			WorkflowInvocationHelperDescriptor operation_4 = new WorkflowInvocationHelperDescriptor();
			operation_4.setOperationQName(new QName("http://service4.introduce.cagrid.org/Service4", "SecurePrintResultsRequest"));
			operation_4.setServiceURL(containerBaseURL+"cagrid/Service4");
			operation_4.setWorkflowInvocationSecurityDescriptor(secDescriptor);
			// operation_4.setOutputType(); // Void output expected
			currStageDesc.setBasicDescription(operation_4);

			// Creating Descriptor of the InputMessage
			OperationInputMessageDescriptor inputMessage_4 = new OperationInputMessageDescriptor();
			InputParameterDescriptor[] inputParam_4 = new InputParameterDescriptor[2];
			inputParam_4[0] = new InputParameterDescriptor(new QName("result1"), new QName(XSD_NAMESPACE, "string"), false);
			inputParam_4[1] = new InputParameterDescriptor(new QName("result2"), new QName(XSD_NAMESPACE, "string"), false);
			inputMessage_4.setInputParam(inputParam_4);
			currStageDesc.setInputsDescription(inputMessage_4);
			// End InputMessage Descriptor

			OperationOutputTransportDescriptor outputDescriptor_4 = new OperationOutputTransportDescriptor(); 
			OperationOutputParameterTransportDescriptor[] outParameterDescriptor_4 = new OperationOutputParameterTransportDescriptor[0];

			// Setting output descriptor
			outputDescriptor_4.setParamDescriptor(outParameterDescriptor_4);
			currStageDesc.setOutputTransportDescriptor(outputDescriptor_4);

			// Setting second parameter
			WorkflowInputParameter inputParam = new WorkflowInputParameter(new InputParameter("simple type's streaming", 1), currGUID);
			inputData.add(inputParam);
			stagesDescs.add(currStageDesc);
			// END service 4

			// BEGIN service 2				
			currStageDesc = new WorkflowStageDescriptor();
			currGUID = 2;
			currStageDesc.setGlobalUniqueIdentifier(currGUID);

			WorkflowInvocationHelperDescriptor operation2 = new WorkflowInvocationHelperDescriptor();
			operation2.setOperationQName(new QName("http://service2.introduce.cagrid.org/Service2", "SecureCapitalizeRequest"));
			operation2.setServiceURL(containerBaseURL+"cagrid/Service2");
			operation2.setOutputType(new QName(XSD_NAMESPACE, "string"));
			operation2.setWorkflowInvocationSecurityDescriptor(secDescriptor); // Set security requirements
			currStageDesc.setBasicDescription(operation2);

			// Creating Descriptor of the InputMessage
			OperationInputMessageDescriptor inputMessage__2 = new OperationInputMessageDescriptor();
			InputParameterDescriptor[] inputParam__2 = new InputParameterDescriptor[1];
			inputParam__2[0] = new InputParameterDescriptor(new QName("uncapitalized"), new QName(XSD_NAMESPACE, "string"), false);
			inputMessage__2.setInputParam(inputParam__2 );
			currStageDesc.setInputsDescription(inputMessage__2);
			// End InputMessage Descriptor

			// configure destination of output
			OperationOutputTransportDescriptor outputDescriptor__2 = new OperationOutputTransportDescriptor();
			OperationOutputParameterTransportDescriptor outParameterDescriptor__2 [] = new OperationOutputParameterTransportDescriptor[1];

			// 1st destination: Service4
			outParameterDescriptor__2[0] = new OperationOutputParameterTransportDescriptor();
			outParameterDescriptor__2[0].setParamIndex(0);
			outParameterDescriptor__2[0].setType(new QName(XSD_NAMESPACE, "string"));
			QName[] namespaces__2 = new QName[]{ new QName(XSD_NAMESPACE, "xsd"), new QName("http://service2.introduce.cagrid.org/Service2", "ns0"),
					new QName(XSD_NAMESPACE, "xsd")};
			outParameterDescriptor__2[0].setQueryNamespaces(namespaces__2);
			outParameterDescriptor__2[0].setLocationQuery("/ns0:CapitalizeResponse");
			outParameterDescriptor__2[0].setDestinationGlobalUniqueIdentifier(4);

			outputDescriptor__2.setParamDescriptor(outParameterDescriptor__2);
			currStageDesc.setOutputTransportDescriptor(outputDescriptor__2);
			stagesDescs.add(currStageDesc);
			// END service 2

			// BEGIN CreateArrayService				
			currStageDesc = new WorkflowStageDescriptor();
			currGUID = 0;
			currStageDesc.setGlobalUniqueIdentifier(currGUID);

			org.cagrid.workflow.helper.descriptor.WorkflowInvocationHelperDescriptor operation__cas = new org.cagrid.workflow.helper.descriptor.WorkflowInvocationHelperDescriptor();
			operation__cas.setWorkflowID("GeorgeliusWorkFlow");
			operation__cas.setOperationQName(new QName("http://createarrayservice.introduce.cagrid.org/CreateArrayService", "SecureGetArrayRequest"));
			operation__cas.setServiceURL(containerBaseURL+"cagrid/CreateArrayService");
			operation__cas.setOutputType(new QName(SOAPENCODING_NAMESPACE, "string[]"));
			operation__cas.setWorkflowInvocationSecurityDescriptor(secDescriptor); // Set security requirements
			currStageDesc.setBasicDescription(operation__cas);

			// Creating Descriptor of the InputMessage
			org.cagrid.workflow.helper.descriptor.OperationInputMessageDescriptor inputMessage__cas = new OperationInputMessageDescriptor();
			InputParameterDescriptor[] inputParams__cas = new InputParameterDescriptor[0];
			inputMessage__cas.setInputParam(inputParams__cas);
			currStageDesc.setInputsDescription(inputMessage__cas);
			// End InputMessage Descriptor

			// Creating the outputDescriptor of the only service that will receive the output (Service2::capitalize)
			OperationOutputTransportDescriptor outputDescriptor_cs = new OperationOutputTransportDescriptor();
			OperationOutputParameterTransportDescriptor outParameterDescriptor_cs [] = new OperationOutputParameterTransportDescriptor[1];

			// First destination: Service2::capitalize
			outParameterDescriptor_cs[0] = new OperationOutputParameterTransportDescriptor();
			outParameterDescriptor_cs[0].setParamIndex(0);
			outParameterDescriptor_cs[0].setType(new QName( SOAPENCODING_NAMESPACE, "string"));
			outParameterDescriptor_cs[0].setQueryNamespaces(new QName[]{ new QName("http://createarrayservice.introduce.cagrid.org/CreateArrayService", "ns0"),
					new QName(XSD_NAMESPACE,"xsd")});
			outParameterDescriptor_cs[0].setLocationQuery("/ns0:GetArrayResponse");
			outParameterDescriptor_cs[0].setDestinationGlobalUniqueIdentifier(2);

			outputDescriptor_cs.setParamDescriptor(outParameterDescriptor_cs);
			currStageDesc.setOutputTransportDescriptor(outputDescriptor_cs);
			stagesDescs.add(currStageDesc);
			// END CreateArrayService

			workflowPart.setInvocationHelperDescs(stagesDescs.toArray(new WorkflowStageDescriptor[0]));
			WorkflowInputParameters inputs = new WorkflowInputParameters();
			inputs.setParameter(inputData.toArray(new WorkflowInputParameter[0]));
			wfDesc.setInputs(inputs);
			wfDesc.setOutputDesc(new WorkflowOutputTransportDescriptor());
			wfDesc.setLocalWorkflows(new WorkflowPortionsDescriptor(new WorkflowPortionDescriptor[]{ workflowPart }));

			WorkflowManagerInstanceReference managerInstanceRef = wf_manager.createWorkflowManagerInstanceFromObjectDescriptor(wfDesc);
			WorkflowManagerInstanceClient managerInstanceClient = null;
			try {
				managerInstanceClient = new WorkflowManagerInstanceClient(managerInstanceRef.getEndpointReference());
			} catch (MalformedURIException e) {
				logger.error(e.getMessage(), e);
			}

			this.managerInstances.add(managerInstanceRef.getEndpointReference());

			managerInstanceClient.start();
//			managerInstanceClient.destroy();
		}

		/**
		 * Instantiate the workflow that will test complex array usual handling
		 * 
		 * @param manager_epr EndpointReference of the manager so each workflow stage can invoke 'setParameter' on it (not used)
		 * @param wf_manager Client of a running WorkflowHelper service
		 * @param delegatedCredentialProxy Credential delegated by the user to be used when calling the workflows' stages
		 * @param delegationLifetime Lifetime of the delegation of the credential to the workflow stages
		 * @param issuedCredentialLifetime 
		 * @param delegationPath
		 * @param issuedCredentialPath
		 * 
		 * */
		private void runComplexArrayTest(WorkflowManagerServiceClient wf_manager, Integer outputMatcherID, ProxyLifetime issuedCredentialLifetime, ProxyLifetime delegationLifetime, EndpointReferenceType delegatedCredentialProxy, int issuedCredentialPath, int delegationPath) throws RemoteException{

			// Create security descriptor for the stages (in this case, all of them present the same security requirements)
			CDSAuthenticationMethod cds_auth = new CDSAuthenticationMethod(cdsEPR);
			TLSInvocationSecurityDescriptor tlsSecDesc = new TLSInvocationSecurityDescriptor(cds_auth , null, ChannelProtection.Privacy, null);
			WorkflowInvocationSecurityDescriptor secDescriptor = new WorkflowInvocationSecurityDescriptor(tlsSecDesc , null, null);

			// Create description of the ManagerInstance
			WorkflowManagerInstanceDescriptor wfDesc = new WorkflowManagerInstanceDescriptor();
			WorkflowPortionDescriptor workflowPart = new WorkflowPortionDescriptor();
			String workflowHelperServiceLocation = this.containerBaseURL + "cagrid/WorkflowHelper";
			workflowPart.setWorkflowHelperServiceLocation(workflowHelperServiceLocation);

			ArrayList <WorkflowStageDescriptor> stagesDescs = new ArrayList<WorkflowStageDescriptor>();
			ArrayList<WorkflowInputParameter> inputParams = new ArrayList<WorkflowInputParameter>();
			ArrayList<WorkflowOutputParameterTransportDescriptor> outputParams = new ArrayList<WorkflowOutputParameterTransportDescriptor>();

			/** complex type arrays **/
			org.cagrid.workflow.helper.descriptor.WorkflowInstanceHelperDescriptor workflowDescriptor1 = new org.cagrid.workflow.helper.descriptor.WorkflowInstanceHelperDescriptor();
			String workflowID = "WorkFlow1";
			workflowDescriptor1.setWorkflowID(workflowID);
			workflowPart.setInstanceHelperDesc(workflowDescriptor1);

			// BEGIN ReceiveArrayService::ReceiveComplexArray
			WorkflowStageDescriptor currStageDesc = new WorkflowStageDescriptor();
			int currStageID = 0;
			currStageDesc.setGlobalUniqueIdentifier(currStageID);

			String access_url = containerBaseURL+"cagrid/ReceiveArrayService";
			WorkflowInvocationHelperDescriptor operation2 = new WorkflowInvocationHelperDescriptor();
			operation2.setOperationQName(new QName("http://receivearrayservice.introduce.cagrid.org/ReceiveArrayService", "SecureReceiveComplexArrayRequest"));
			operation2.setServiceURL(access_url);
			//operation2.setOutput(); // This service has no output
			operation2.setWorkflowInvocationSecurityDescriptor(secDescriptor);  // Set security requirements
			currStageDesc.setBasicDescription(operation2);

			// Creating Descriptor of the InputMessage
			org.cagrid.workflow.helper.descriptor.OperationInputMessageDescriptor inputMessage_ras = new OperationInputMessageDescriptor();
			InputParameterDescriptor[] inputParams_ras = new InputParameterDescriptor[3];
			inputParams_ras[0] = new InputParameterDescriptor(new QName("number"), new QName(XSD_NAMESPACE, "int"), false);
			inputParams_ras[1] = new InputParameterDescriptor(new QName("complexArray"), new QName("http://systemtests.workflow.cagrid.org/SystemTests", "ComplexType"), true);
			inputParams_ras[2] = new InputParameterDescriptor(new QName("booleanValue"), new QName(XSD_NAMESPACE, "boolean"), false);
			inputMessage_ras.setInputParam(inputParams_ras);
			currStageDesc.setInputsDescription(inputMessage_ras);
			// End InputMessage Descriptor

			// Creating an empty outputDescriptor
			OperationOutputTransportDescriptor outputDescriptor_ras = new OperationOutputTransportDescriptor();
			OperationOutputParameterTransportDescriptor outParameterDescriptor_ras [] = new OperationOutputParameterTransportDescriptor[0];

			// takes the reference to no service
			outputDescriptor_ras.setParamDescriptor(outParameterDescriptor_ras);
			currStageDesc.setOutputTransportDescriptor(outputDescriptor_ras);

			//System.out.println("Setting params"); //DEBUG

			// Set the values of its simple-type arguments
			inputParams.add(new WorkflowInputParameter(new InputParameter("999", 0), currStageID));
			inputParams.add(new WorkflowInputParameter(new InputParameter("true",2), currStageID));
			stagesDescs.add(currStageDesc);
			// END ReceiveArrayService::ReceiveComplexArray

			// BEGIN CreateArrayService::getComplexArray
			currStageDesc = new WorkflowStageDescriptor();
			currStageID++;
			currStageDesc.setGlobalUniqueIdentifier(currStageID);

			org.cagrid.workflow.helper.descriptor.WorkflowInvocationHelperDescriptor operation_ca = new org.cagrid.workflow.helper.descriptor.WorkflowInvocationHelperDescriptor();
			access_url = containerBaseURL+"cagrid/CreateArrayService";
			operation_ca.setWorkflowID("GeorgeliusWorkFlow");
			operation_ca.setOperationQName(new QName("http://createarrayservice.introduce.cagrid.org/CreateArrayService", "SecureGetComplexArrayRequest"));
			operation_ca.setServiceURL(access_url);
			operation_ca.setOutputType(new QName("http://systemtests.workflow.cagrid.org/SystemTests", "ComplexType[]"));
			operation_ca.setWorkflowInvocationSecurityDescriptor(secDescriptor);  // Set security requirements
			currStageDesc.setBasicDescription(operation_ca);

			// Creating Descriptor of the InputMessage
			org.cagrid.workflow.helper.descriptor.OperationInputMessageDescriptor inputMessage_ca = new OperationInputMessageDescriptor();
			InputParameterDescriptor[] inputParams_ca = new InputParameterDescriptor[0];
			inputMessage_ca.setInputParam(inputParams_ca);
			currStageDesc.setInputsDescription(inputMessage_ca);

			// End InputMessage Descriptor

			// Creating the outputDescriptor of the only service that will receive the output (ReceiveArrayService)
			OperationOutputTransportDescriptor outputDescriptor_ca = new OperationOutputTransportDescriptor();
			int numDestination = this.validatorEnabled ? 2 : 1;
			OperationOutputParameterTransportDescriptor outParameterDescriptor_ca [] = new OperationOutputParameterTransportDescriptor[numDestination];

			// First destination: ReceiveArrayService::ReceiveComplexArray
			outParameterDescriptor_ca[0] = new OperationOutputParameterTransportDescriptor();
			outParameterDescriptor_ca[0].setParamIndex(1);
			outParameterDescriptor_ca[0].setType(new QName( SOAPENCODING_NAMESPACE ,"ComplexType[]"));
			outParameterDescriptor_ca[0].setQueryNamespaces(new QName[]{ new QName("http://createarrayservice.introduce.cagrid.org/CreateArrayService", "ns0"),
					new QName(XSD_NAMESPACE,"xsd")});
			outParameterDescriptor_ca[0].setLocationQuery("/ns0:GetComplexArrayResponse");
			outParameterDescriptor_ca[0].setDestinationGlobalUniqueIdentifier(0);

			// Second destination: Output matcher
			if( validatorEnabled ){

				//System.out.println("Setting 2nd param in the output matcher: "+ outputMatcherEPR); //DEBUG

				outParameterDescriptor_ca[1] = new OperationOutputParameterTransportDescriptor();
				outParameterDescriptor_ca[1].setParamIndex(1); // Setting 2nd argument in the output matcher 
				outParameterDescriptor_ca[1].setType(new QName( SOAPENCODING_NAMESPACE ,"ComplexType[]"));
				outParameterDescriptor_ca[1].setQueryNamespaces(new QName[]{ new QName("http://createarrayservice.introduce.cagrid.org/CreateArrayService", "ns0"),
						new QName(XSD_NAMESPACE,"xsd")});
				outParameterDescriptor_ca[1].setLocationQuery("/ns0:GetComplexArrayResponse");
//				outParameterDescriptor_ca[1].setDestinationEPR(new EndpointReferenceType[]{ outputMatcherID });
			}

			// Add one output to the workflow outputs
			WorkflowOutputParameterTransportDescriptor outputParamDesc = new WorkflowOutputParameterTransportDescriptor();
			outputParamDesc.setSourceGUID(currStageID);
			OperationOutputParameterTransportDescriptor paramDescription = new OperationOutputParameterTransportDescriptor();
			paramDescription.setType(new QName( SOAPENCODING_NAMESPACE ,"ComplexType[]"));
			paramDescription.setLocationQuery("/ns0:GetComplexArrayResponse");
			paramDescription.setQueryNamespaces(new QName[]{ new QName("http://createarrayservice.introduce.cagrid.org/CreateArrayService", "ns0"),
					new QName(XSD_NAMESPACE,"xsd")});
			outputParamDesc.setParamDescription(paramDescription);
			outputParams.add(outputParamDesc);

			// takes the reference to ReceiveComplexArrayService
			outputDescriptor_ca.setParamDescriptor(outParameterDescriptor_ca);
			currStageDesc.setOutputTransportDescriptor(outputDescriptor_ca);
			stagesDescs.add(currStageDesc);
			// END CreateArrayService::getComplexArray 

			// Set workflow outputs
			WorkflowOutputTransportDescriptor outputDesc = new WorkflowOutputTransportDescriptor();
			WorkflowOutputParameterTransportDescriptor[] paramDescriptor = outputParams.toArray(new WorkflowOutputParameterTransportDescriptor[0]);
			outputDesc.setParamDescriptor(paramDescriptor);

			// Finish creating the workflow descriptor
			workflowPart.setInvocationHelperDescs(stagesDescs.toArray(new WorkflowStageDescriptor[0]));
			WorkflowInputParameters inputParameters = new WorkflowInputParameters(inputParams.toArray(new WorkflowInputParameter[0]));
			wfDesc.setInputs(inputParameters );
			wfDesc.setOutputDesc(outputDesc ); 
			wfDesc.setLocalWorkflows(new WorkflowPortionsDescriptor(new WorkflowPortionDescriptor[]{ workflowPart }));

			// Instantiate the workflow
			WorkflowManagerInstanceReference managerInstanceRef = wf_manager.createWorkflowManagerInstanceFromObjectDescriptor(wfDesc);
			WorkflowManagerInstanceClient managerInstanceClient = null;
			try {
				managerInstanceClient = new WorkflowManagerInstanceClient(managerInstanceRef.getEndpointReference());
				this.subscribe(TimestampedStatus.getTypeDesc().getXmlType(), managerInstanceClient, workflowID);
			} catch (MalformedURIException e) {
				logger.error(e.getMessage(), e);
			} 

			this.managerInstances.add(managerInstanceRef.getEndpointReference());

			logger.info("Executing workflow");
			managerInstanceClient.start();  // Start workflow execution
			logger.info("Retrieving workflow outputs");
			String[] wf_outputs = managerInstanceClient.getOutputValues();  // Retrieve workflow outputs

			for(int i = 0; i < wf_outputs.length; i++){

				logger.info("Workflow output #"+ i +" is: "+ wf_outputs[i]);
			}

//			managerInstanceClient.destroy();

			logger.info("END");
			return;
		}

		/**
		 * Instantiate the workflow that will test simple array usual handling
		 * 
		 * @param manager_epr EndpointReference of the manager so each workflow stage can invoke 'setParameter' on it (not used)
		 * @param wf_manager Client of a running WorkflowHelper service
		 * @param delegatedCredentialProxy Credential delegated by the user to be used when calling the workflows' stages
		 * @param delegationLifetime Lifetime of the delegation of the credential to the workflow stages
		 * @param issuedCredentialLifetime 
		 * @param delegationPath
		 * @param issuedCredentialPath
		 * 
		 * */
		private void runSimpleArrayTest(WorkflowManagerServiceClient wf_manager, Integer outputMatcherID, ProxyLifetime issuedCredentialLifetime, EndpointReferenceType delegatedCredentialProxy, ProxyLifetime delegationLifetime, int issuedCredentialPath, int delegationPath) throws RemoteException{

			// Create security descriptor for the stages (in this case, all of them present the same security requirements)
			CDSAuthenticationMethod cds_auth = new CDSAuthenticationMethod(delegatedCredentialProxy);
			TLSInvocationSecurityDescriptor tlsSecDesc = new TLSInvocationSecurityDescriptor(cds_auth , null, ChannelProtection.Privacy, null);
			WorkflowInvocationSecurityDescriptor secDescriptor = new WorkflowInvocationSecurityDescriptor(tlsSecDesc , null, null);
			secDescriptor = null; // DEBUG

			// Instantiate ManagerDescription
			WorkflowManagerInstanceDescriptor wfDesc = new WorkflowManagerInstanceDescriptor();

			// Describe the single local workflow this workflow is divided in
			WorkflowPortionDescriptor wfPart = new WorkflowPortionDescriptor();
			String workflowHelperServiceLocation = this.containerBaseURL + "cagrid/WorkflowHelper";
			wfPart.setWorkflowHelperServiceLocation(workflowHelperServiceLocation);

			// Describe the InstanceHelper associated with the local workflow
			org.cagrid.workflow.helper.descriptor.WorkflowInstanceHelperDescriptor workflowDescriptor2 = new org.cagrid.workflow.helper.descriptor.WorkflowInstanceHelperDescriptor();
			String workflowID = "WorkFlow2";
			workflowDescriptor2.setWorkflowID(workflowID);
			wfPart.setInstanceHelperDesc(workflowDescriptor2);

			ArrayList<WorkflowStageDescriptor> stagesDescs = new ArrayList<WorkflowStageDescriptor>();
			ArrayList<WorkflowInputParameter> inputParams = new ArrayList<WorkflowInputParameter>();
			ArrayList<WorkflowOutputParameterTransportDescriptor> outputParams = new ArrayList<WorkflowOutputParameterTransportDescriptor>();

			// BEGIN ReceiveArrayService::ReceiveArrayAndMore
			WorkflowStageDescriptor currStageDesc = new WorkflowStageDescriptor();
			int currStageID = 0;
			currStageDesc.setGlobalUniqueIdentifier(currStageID);

			org.cagrid.workflow.helper.descriptor.WorkflowInvocationHelperDescriptor operation_ram = new org.cagrid.workflow.helper.descriptor.WorkflowInvocationHelperDescriptor();
			operation_ram.setWorkflowID("GeorgeliusWorkFlow");
			operation_ram.setOperationQName(new QName("http://receivearrayservice.introduce.cagrid.org/ReceiveArrayService", "SecureReceiveArrayAndMoreRequest"));
			operation_ram.setServiceURL(containerBaseURL+"cagrid/ReceiveArrayService");
			//operation_ram.setOutputType(); // Service has no output
			operation_ram.setWorkflowInvocationSecurityDescriptor(secDescriptor);  // Set security requirements
			currStageDesc.setBasicDescription(operation_ram);

			// Creating Descriptor of the InputMessage
			org.cagrid.workflow.helper.descriptor.OperationInputMessageDescriptor inputMessage_ram = new OperationInputMessageDescriptor();
			InputParameterDescriptor[] inputParams_ram = new InputParameterDescriptor[3];
			inputParams_ram[0] = new InputParameterDescriptor(new QName("number"), new QName(XSD_NAMESPACE, "int"), false);
			inputParams_ram[1] = new InputParameterDescriptor(new QName("strArray"), new QName(XSD_NAMESPACE, "string"), true);
			inputParams_ram[2] = new InputParameterDescriptor(new QName("booleanValue"), new QName(XSD_NAMESPACE, "boolean"), false);
			inputMessage_ram.setInputParam(inputParams_ram);
			currStageDesc.setInputsDescription(inputMessage_ram);
			// End InputMessage Descriptor

			// Creating an empty outputDescriptor
			OperationOutputTransportDescriptor outputDescriptor_ram = new OperationOutputTransportDescriptor();
			OperationOutputParameterTransportDescriptor outParameterDescriptor_ram [] = new OperationOutputParameterTransportDescriptor[0];

			// takes the reference to no service
			outputDescriptor_ram.setParamDescriptor(outParameterDescriptor_ram);
			currStageDesc.setOutputTransportDescriptor(outputDescriptor_ram);
			stagesDescs.add(currStageDesc);

			// Set the values of the two arguments of simple type
			inputParams.add(new WorkflowInputParameter(new InputParameter("999", 0), currStageID));
			inputParams.add(new WorkflowInputParameter(new InputParameter("true",2), currStageID));
			// END ReceiveArrayService::ReceiveArrayAndMore

			// BEGIN CreateArrayService
			currStageDesc = new WorkflowStageDescriptor();
			currStageID++;
			currStageDesc.setGlobalUniqueIdentifier(currStageID);

			org.cagrid.workflow.helper.descriptor.WorkflowInvocationHelperDescriptor operation_cas = new org.cagrid.workflow.helper.descriptor.WorkflowInvocationHelperDescriptor();
			String access_url = containerBaseURL+"cagrid/CreateArrayService";
			operation_cas.setWorkflowID("GeorgeliusWorkFlow");
			operation_cas.setOperationQName(new QName("http://createarrayservice.introduce.cagrid.org/CreateArrayService", "SecureGetArrayRequest"));
			operation_cas.setServiceURL(access_url);
			operation_cas.setOutputType(new QName(SOAPENCODING_NAMESPACE, "string[]"));
			operation_cas.setWorkflowInvocationSecurityDescriptor(secDescriptor);  // Set security requirements
			currStageDesc.setBasicDescription(operation_cas);

			// Creating Descriptor of the InputMessage
			org.cagrid.workflow.helper.descriptor.OperationInputMessageDescriptor inputMessage_cas = new OperationInputMessageDescriptor();
			InputParameterDescriptor[] inputParams_cas = new InputParameterDescriptor[0];
			inputMessage_cas.setInputParam(inputParams_cas);
			currStageDesc.setInputsDescription(inputMessage_cas);
			// End InputMessage Descriptor

			// Creating the outputDescriptor of the only service that will receive the output (ReceiveArrayService)
			OperationOutputTransportDescriptor outputDescriptor_cas = new OperationOutputTransportDescriptor();
			int numDestinations = this.validatorEnabled ? 2 : 1;
			OperationOutputParameterTransportDescriptor outParameterDescriptor_cas [] = new OperationOutputParameterTransportDescriptor[numDestinations];

			// First destination: ReceiveArrayService::ReceiveArrayAndMore
			outParameterDescriptor_cas[0] = new OperationOutputParameterTransportDescriptor();
			outParameterDescriptor_cas[0].setParamIndex(1);
			outParameterDescriptor_cas[0].setType(new QName( SOAPENCODING_NAMESPACE ,"string[]"));
			outParameterDescriptor_cas[0].setQueryNamespaces(new QName[]{ new QName("http://createarrayservice.introduce.cagrid.org/CreateArrayService", "ns0"),
					new QName(XSD_NAMESPACE,"xsd")});
			outParameterDescriptor_cas[0].setLocationQuery("/ns0:GetArrayResponse");
			outParameterDescriptor_cas[0].setDestinationGlobalUniqueIdentifier(0);
//			outParameterDescriptor_cas[0].setDestinationEPR(new EndpointReferenceType[]{ serviceClient_ram.getEndpointReference()});

			// Second destination: Output matcher
			if(validatorEnabled){

				//System.out.println("Setting 5th param in the output matcher: "+ outputMatcherEPR); //DEBUG

				outParameterDescriptor_cas[1] = new OperationOutputParameterTransportDescriptor();
				outParameterDescriptor_cas[1].setParamIndex(4);
				outParameterDescriptor_cas[1].setType(new QName( SOAPENCODING_NAMESPACE ,"string[]"));
				outParameterDescriptor_cas[1].setQueryNamespaces(new QName[]{ new QName("http://createarrayservice.introduce.cagrid.org/CreateArrayService", "ns0"),
						new QName(XSD_NAMESPACE,"xsd")});
				outParameterDescriptor_cas[1].setLocationQuery("/ns0:GetArrayResponse");
//				outParameterDescriptor_cas[1].setDestinationEPR(new EndpointReferenceType[]{ outputMatcherID});
			}

			// Add one output to the worklow outputs' description
			WorkflowOutputParameterTransportDescriptor outputParam = new WorkflowOutputParameterTransportDescriptor();
			OperationOutputParameterTransportDescriptor paramDescription = new OperationOutputParameterTransportDescriptor();
			paramDescription.setLocationQuery("/ns0:GetArrayResponse");
			paramDescription.setQueryNamespaces(new QName[]{ new QName("http://createarrayservice.introduce.cagrid.org/CreateArrayService", "ns0"),
					new QName(XSD_NAMESPACE,"xsd")});
			paramDescription.setType(new QName( SOAPENCODING_NAMESPACE ,"string[]"));
			outputParam.setParamDescription(paramDescription );
			outputParam.setSourceGUID(currStageID);
			outputParams.add(outputParam);

			// takes the reference to ReceiveArrayService
			outputDescriptor_cas.setParamDescriptor(outParameterDescriptor_cas);
			currStageDesc.setOutputTransportDescriptor(outputDescriptor_cas);

			stagesDescs.add(currStageDesc);
			// END CreateArrayService 

			logger.info("Configuring workflow inputs and outputs");
			WorkflowInputParameters inputParameters = new WorkflowInputParameters(inputParams.toArray(new WorkflowInputParameter[0]));
			wfDesc.setInputs(inputParameters);
			WorkflowOutputTransportDescriptor outputDesc = new WorkflowOutputTransportDescriptor(outputParams.toArray(new WorkflowOutputParameterTransportDescriptor[0]));
			wfDesc.setOutputDesc(outputDesc);
			wfPart.setInvocationHelperDescs(stagesDescs.toArray(new WorkflowStageDescriptor[0]));
			wfDesc.setLocalWorkflows(new WorkflowPortionsDescriptor(new WorkflowPortionDescriptor[]{ wfPart }));
			WorkflowManagerInstanceReference instanceRef = wf_manager.createWorkflowManagerInstanceFromObjectDescriptor(wfDesc);
			WorkflowManagerInstanceClient instanceClient = null;
			try {
				instanceClient = new WorkflowManagerInstanceClient(instanceRef.getEndpointReference());
				this.subscribe(TimestampedStatus.getTypeDesc().getXmlType(), instanceClient, workflowID);
			} catch (MalformedURIException e) {
				logger.error(e.getMessage(),e );
			} catch(Throwable t){
				logger.error(t.getMessage(), t);
			} 

			this.managerInstances.add(instanceRef.getEndpointReference());

			logger.info("Starting execution");
			instanceClient.start();

			logger.info("Retrieving workflow outputs");
			String[] outputs = instanceClient.getOutputValues();

			for(int i=0; i < outputs.length; i++){

				logger.info("Output #"+ i +" is "+ outputs[i]);
			}

//			this.waitUntilCompletion();
//			instanceClient.destroy();

			logger.info("END");
			return;
		}

		/**
		 * Instantiate the workflow that will test the mechanisms for receiving input from multiple stages and forwarding the outputs
		 * to multiple stages.
		 * 
		 * @param manager_epr EndpointReference of the manager so each workflow stage can invoke 'setParameter' on it (not used)
		 * @param wf_manager Client of a running WorkflowHelper service
		 * @param delegatedCredentialProxy Credential delegated by the user to be used when calling the workflows' stages
		 * @param delegationLifetime Lifetime of the delegation of the credential to the workflow stages
		 * @param issuedCredentialLifetime 
		 * @param delegationPath
		 * @param issuedCredentialPath
		 * 
		 * */
		private void runFaninFanOutTest(WorkflowManagerServiceClient wf_manager, Integer outputMatcherID, ProxyLifetime delegationLifetime, EndpointReferenceType delegatedCredentialProxy, ProxyLifetime issuedCredentialLifetime, int delegationPath, int issuedCredentialPath) throws RemoteException{

			// Create security descriptor for the stages (in this case, all of them present the same security requirements)
			CDSAuthenticationMethod cds_auth = new CDSAuthenticationMethod(cdsEPR);
			TLSInvocationSecurityDescriptor tlsSecDesc = new TLSInvocationSecurityDescriptor(cds_auth , null, ChannelProtection.Privacy, null);
			WorkflowInvocationSecurityDescriptor secDescriptor = new WorkflowInvocationSecurityDescriptor(tlsSecDesc , null, null);

			// Describe the ManagerInstance and the single local workflow it is responsible for
			WorkflowManagerInstanceDescriptor wfDesc = new WorkflowManagerInstanceDescriptor();
			WorkflowPortionDescriptor wfPart = new WorkflowPortionDescriptor();
			String workflowHelperServiceLocation = this.containerBaseURL + "cagrid/WorkflowHelper";
			wfPart.setWorkflowHelperServiceLocation(workflowHelperServiceLocation);

			org.cagrid.workflow.helper.descriptor.WorkflowInstanceHelperDescriptor workflowDescriptor3 = new org.cagrid.workflow.helper.descriptor.WorkflowInstanceHelperDescriptor();
			String workflowID = "WorkFlow2";
			workflowDescriptor3.setWorkflowID(workflowID);
			wfPart.setInstanceHelperDesc(workflowDescriptor3);

			ArrayList<WorkflowStageDescriptor> stagesDescs = new ArrayList<WorkflowStageDescriptor>();
			ArrayList<WorkflowInputParameter> inputParams = new ArrayList<WorkflowInputParameter>();
			ArrayList<WorkflowOutputParameterTransportDescriptor> outputParams = new ArrayList<WorkflowOutputParameterTransportDescriptor>();

			// BEGIN service 4
			WorkflowStageDescriptor currStageDesc = new WorkflowStageDescriptor();
			int currStageID = 4;
			currStageDesc.setGlobalUniqueIdentifier(currStageID);

			org.cagrid.workflow.helper.descriptor.WorkflowInvocationHelperDescriptor operation4 = new org.cagrid.workflow.helper.descriptor.WorkflowInvocationHelperDescriptor();
			java.lang.String acess_url = containerBaseURL+"cagrid/Service4";
			operation4.setWorkflowID("GeorgeliusWorkFlow");
			operation4.setOperationQName(new QName("http://service4.introduce.cagrid.org/Service4", "SecurePrintResultsRequest"));
			operation4.setServiceURL(acess_url);
			operation4.setWorkflowInvocationSecurityDescriptor(secDescriptor);  // Set security requirements
			currStageDesc.setBasicDescription(operation4);

			// Creating Descriptor of the InputMessage
			org.cagrid.workflow.helper.descriptor.OperationInputMessageDescriptor inputMessage4 = new OperationInputMessageDescriptor();
			InputParameterDescriptor[] inputParams4 = new InputParameterDescriptor[2];
			inputParams4[0] = new InputParameterDescriptor(new QName("result1"), new QName(XSD_NAMESPACE, "string"), false);
			inputParams4[1] = new InputParameterDescriptor(new QName("result2"), new QName(XSD_NAMESPACE, "string"), false);
			inputMessage4.setInputParam(inputParams4);
			currStageDesc.setInputsDescription(inputMessage4);
			// End InputMessage Descriptor

			// Creating the outputDescriptor of the first Filter
			OperationOutputTransportDescriptor outputDescriptor4 = new OperationOutputTransportDescriptor();
			OperationOutputParameterTransportDescriptor outParameterDescriptor4 [] = new OperationOutputParameterTransportDescriptor[0];
			QName namespaces[] = null;

			// takes the reference to no service
			outputDescriptor4.setParamDescriptor(outParameterDescriptor4);
			currStageDesc.setOutputTransportDescriptor(outputDescriptor4);
			stagesDescs.add(currStageDesc);
			// END service 4

			// BEGIN service 2		
			currStageDesc = new WorkflowStageDescriptor();
			currStageID = 2;
			currStageDesc.setGlobalUniqueIdentifier(currStageID);

			org.cagrid.workflow.helper.descriptor.WorkflowInvocationHelperDescriptor operation_2 = new org.cagrid.workflow.helper.descriptor.WorkflowInvocationHelperDescriptor();
			acess_url = containerBaseURL+"cagrid/Service2";
			operation_2.setWorkflowID("GeorgeliusWorkFlow");
			operation_2.setOperationQName(new QName("http://service2.introduce.cagrid.org/Service2", "SecureCapitalizeRequest"));
			operation_2.setServiceURL(acess_url);
			operation_2.setOutputType(new QName(XSD_NAMESPACE, "string"));
			operation_2.setWorkflowInvocationSecurityDescriptor(secDescriptor);  // Set security requirements
			currStageDesc.setBasicDescription(operation_2);

			// Creating Descriptor of the InputMessage
			org.cagrid.workflow.helper.descriptor.OperationInputMessageDescriptor inputMessage_2 = new OperationInputMessageDescriptor();
			InputParameterDescriptor[] inputParams_2 = new InputParameterDescriptor[1];
			inputParams_2[0] = new InputParameterDescriptor(new QName("uncapitalized"), new QName(XSD_NAMESPACE, "string"), false);
			inputMessage_2.setInputParam(inputParams_2);
			currStageDesc.setInputsDescription(inputMessage_2);
			// End InputMessage Descriptor

			// Creating the outputDescriptor of the first Filter
			OperationOutputTransportDescriptor outputDescriptor2 = new OperationOutputTransportDescriptor();
			int numDestinations = this.validatorEnabled ? 2 : 1;
			OperationOutputParameterTransportDescriptor outParameterDescriptor2 [] = new OperationOutputParameterTransportDescriptor[numDestinations];

			// First destination
			outParameterDescriptor2[0] = new OperationOutputParameterTransportDescriptor();
			outParameterDescriptor2[0].setParamIndex(0);
			outParameterDescriptor2[0].setType(new QName("string"));
			namespaces = new QName[]{ new QName(XSD_NAMESPACE, "xsd"), new QName("http://service2.introduce.cagrid.org/Service2", "ns0"),
					new QName(XSD_NAMESPACE, "xsd")};
			outParameterDescriptor2[0].setQueryNamespaces(namespaces);
			outParameterDescriptor2[0].setLocationQuery("/ns0:CapitalizeResponse");
			outParameterDescriptor2[0].setDestinationGlobalUniqueIdentifier(4);
//			outParameterDescriptor2[0].setDestinationEPR(new EndpointReferenceType[]{ serviceClient4.getEndpointReference()});

			// Second destination: output matcher
			if(this.validatorEnabled){

				//System.out.println("Setting 7th param in the output matcher: "+ outputMatcherEPR); //DEBUG

				outParameterDescriptor2[1] = new OperationOutputParameterTransportDescriptor();
				outParameterDescriptor2[1].setParamIndex(6);
				outParameterDescriptor2[1].setType(new QName("string"));
				namespaces = new QName[]{ new QName(XSD_NAMESPACE, "xsd"), new QName("http://service2.introduce.cagrid.org/Service2", "ns0"),
						new QName(XSD_NAMESPACE, "xsd")};
				outParameterDescriptor2[1].setQueryNamespaces(namespaces);
				outParameterDescriptor2[1].setLocationQuery("/ns0:CapitalizeResponse");
//				outParameterDescriptor2[1].setDestinationEPR(new EndpointReferenceType[]{ outputMatcherID});
			}

			// Add one output to the workflow outputs
			WorkflowOutputParameterTransportDescriptor outputParam = new WorkflowOutputParameterTransportDescriptor();
			OperationOutputParameterTransportDescriptor paramDescription = new OperationOutputParameterTransportDescriptor();
			paramDescription.setLocationQuery("/ns0:CapitalizeResponse");
			paramDescription.setQueryNamespaces(new QName[]{ new QName(XSD_NAMESPACE, "xsd"), new QName("http://service2.introduce.cagrid.org/Service2", "ns0"),
					new QName(XSD_NAMESPACE, "xsd")});
			paramDescription.setType(new QName("string"));
			outputParam.setParamDescription(paramDescription);
			outputParam.setSourceGUID(currStageID);
			outputParams.add(outputParam);

			outputDescriptor2.setParamDescriptor(outParameterDescriptor2);
			currStageDesc.setOutputTransportDescriptor(outputDescriptor2);
			stagesDescs.add(currStageDesc);
			// END service 2

			// BEGIN service 3
			currStageDesc = new WorkflowStageDescriptor();
			currStageID = 3;
			currStageDesc.setGlobalUniqueIdentifier(currStageID);

			org.cagrid.workflow.helper.descriptor.WorkflowInvocationHelperDescriptor operation3 = new org.cagrid.workflow.helper.descriptor.WorkflowInvocationHelperDescriptor();
			acess_url = containerBaseURL+"cagrid/Service3";

			// This is the greek version of my name...
			operation3.setWorkflowID("GeorgeliusWorkFlow");
			operation3.setOperationQName(new QName("http://service3.introduce.cagrid.org/Service3", "SecureGenerateXRequest"));
			operation3.setServiceURL(acess_url);
			operation3.setOutputType(new QName(XSD_NAMESPACE, "string"));
			operation3.setWorkflowInvocationSecurityDescriptor(secDescriptor);  // Set security requirements
			currStageDesc.setBasicDescription(operation3);

			// Creating Descriptor of the InputMessage
			org.cagrid.workflow.helper.descriptor.OperationInputMessageDescriptor inputMessage3 = new OperationInputMessageDescriptor();
			InputParameterDescriptor[] inputParams3 = new InputParameterDescriptor[1];
			inputParams3[0] = new InputParameterDescriptor(new QName("str_length"), new QName(XSD_NAMESPACE, "int"), false);
			inputMessage3.setInputParam(inputParams3);
			currStageDesc.setInputsDescription(inputMessage3);
			// End InputMessage Descriptor

			// Creating the outputDescriptor of the first Filter
			OperationOutputTransportDescriptor outputDescriptor3 = new OperationOutputTransportDescriptor();
			numDestinations = this.validatorEnabled ? 2 : 1;
			OperationOutputParameterTransportDescriptor outParameterDescriptor3 [] = new OperationOutputParameterTransportDescriptor[numDestinations];

			// 1st destination
			outParameterDescriptor3[0] = new OperationOutputParameterTransportDescriptor();
			outParameterDescriptor3[0].setParamIndex(1);
			outParameterDescriptor3[0].setType(new QName(XSD_NAMESPACE, "string"));
			namespaces = new QName[]{ new QName(XSD_NAMESPACE, "xsd"), new QName("http://service3.introduce.cagrid.org/Service3", "ns0"),
					new QName(XSD_NAMESPACE, "xsd")};
			outParameterDescriptor3[0].setQueryNamespaces(namespaces);
			outParameterDescriptor3[0].setLocationQuery("/ns0:GenerateXResponse"); 
			outParameterDescriptor3[0].setDestinationGlobalUniqueIdentifier(4);
//			outParameterDescriptor3[0].setDestinationEPR(new EndpointReferenceType[]{serviceClient4.getEndpointReference()});

			// 2nd destination: output matcher
			if(this.validatorEnabled){

				//System.out.println("Setting 8th param in the output matcher: "+ outputMatcherEPR); //DEBUG

				outParameterDescriptor3[1] = new OperationOutputParameterTransportDescriptor();
				outParameterDescriptor3[1].setParamIndex(7);
				outParameterDescriptor3[1].setType(new QName(XSD_NAMESPACE, "string"));
				namespaces = new QName[]{ new QName(XSD_NAMESPACE, "xsd"), new QName("http://service3.introduce.cagrid.org/Service3", "ns0"),
						new QName(XSD_NAMESPACE, "xsd")};
				outParameterDescriptor3[1].setQueryNamespaces(namespaces);
				outParameterDescriptor3[1].setLocationQuery("/ns0:GenerateXResponse"); 
//				outParameterDescriptor3[1].setDestinationEPR(new EndpointReferenceType[]{outputMatcherID});  // */
			}

			// Add one output to the workflow outputs
			outputParam = new WorkflowOutputParameterTransportDescriptor();
			paramDescription = new OperationOutputParameterTransportDescriptor();
			paramDescription.setLocationQuery("/ns0:GenerateXResponse");
			paramDescription.setQueryNamespaces(new QName[]{ new QName(XSD_NAMESPACE, "xsd"), new QName("http://service3.introduce.cagrid.org/Service3", "ns0"),
					new QName(XSD_NAMESPACE, "xsd")});
			paramDescription.setType(new QName(XSD_NAMESPACE, "string"));
			outputParam.setParamDescription(paramDescription);
			outputParam.setSourceGUID(currStageID);
			outputParams.add(outputParam);

			outputDescriptor3.setParamDescriptor(outParameterDescriptor3);
			currStageDesc.setOutputTransportDescriptor(outputDescriptor3);
			stagesDescs.add(currStageDesc);
			// END service 3				

			// BEGIN service 5
			currStageDesc = new WorkflowStageDescriptor();
			currStageID = 5;
			currStageDesc.setGlobalUniqueIdentifier(currStageID);

			org.cagrid.workflow.helper.descriptor.WorkflowInvocationHelperDescriptor operation5 = new org.cagrid.workflow.helper.descriptor.WorkflowInvocationHelperDescriptor();

			acess_url = containerBaseURL+"cagrid/Service5";
			operation5.setWorkflowID("GeorgeliusWorkFlow");
			operation5.setOperationQName(new QName("http://service5.introduce.cagrid.org/Service5" , "SecureCheckStringAndItsLengthRequest"));
			operation5.setServiceURL(acess_url);
			operation5.setOutputType(new QName(XSD_NAMESPACE, "boolean"));
			operation5.setWorkflowInvocationSecurityDescriptor(secDescriptor);  // Set security requirements
			currStageDesc.setBasicDescription(operation5);

			// Creating Descriptor of the InputMessage
			org.cagrid.workflow.helper.descriptor.OperationInputMessageDescriptor inputMessage5 = new OperationInputMessageDescriptor();
			InputParameterDescriptor[] inputParams5 = new InputParameterDescriptor[1];
			inputParams5[0] = new InputParameterDescriptor(new QName("http://service1.workflow.cagrid.org/Service1", "stringAndItsLenght"), 
					new QName("http://service1.workflow.cagrid.org/Service1", "StringAndItsLength"), false);
			inputMessage5.setInputParam(inputParams5);
			currStageDesc.setInputsDescription(inputMessage5);
			// End InputMessage Descriptor

			// Creating the outputDescriptor of the first Filter
			OperationOutputTransportDescriptor outputDescriptor5 = new OperationOutputTransportDescriptor();
			OperationOutputParameterTransportDescriptor outParameterDescriptor5 [] = new OperationOutputParameterTransportDescriptor[0];

			outputDescriptor5.setParamDescriptor(outParameterDescriptor5);
			currStageDesc.setOutputTransportDescriptor(outputDescriptor5);
			stagesDescs.add(currStageDesc);
			// END service 5

			// BEGIN service 1			
			currStageDesc = new WorkflowStageDescriptor();
			currStageID = 1;
			currStageDesc.setGlobalUniqueIdentifier(currStageID);

			org.cagrid.workflow.helper.descriptor.WorkflowInvocationHelperDescriptor operation1 = new org.cagrid.workflow.helper.descriptor.WorkflowInvocationHelperDescriptor();
			acess_url = containerBaseURL+"cagrid/Service1";
			operation1.setWorkflowID("GeorgeliusWorkFlow");
			operation1.setOperationQName(new QName("http://service1.introduce.cagrid.org/Service1", "SecureGenerateDataRequest"));
			operation1.setServiceURL(acess_url);
			operation1.setOutputType(new QName(XSD_NAMESPACE, "string"));
			operation1.setWorkflowInvocationSecurityDescriptor(secDescriptor);  // Set security requirements
			currStageDesc.setBasicDescription(operation1);

			// Creating Descriptor of the InputMessage
			org.cagrid.workflow.helper.descriptor.OperationInputMessageDescriptor inputMessage1 = new OperationInputMessageDescriptor();
			InputParameterDescriptor[] inputParams1 = new InputParameterDescriptor[1];
			inputParams1[0] = new InputParameterDescriptor(new QName("info"), new QName(XSD_NAMESPACE, "string"), false);
			inputMessage1.setInputParam(inputParams1);
			currStageDesc.setInputsDescription(inputMessage1);
			// End InputMessage Descriptor

			// Creating the outputDescriptor of the first Filter (Service2)
			OperationOutputTransportDescriptor outputDescriptor1 = new OperationOutputTransportDescriptor();
			OperationOutputParameterTransportDescriptor outParameterDescriptor1 [] = new OperationOutputParameterTransportDescriptor[3];
			outParameterDescriptor1[0] = new OperationOutputParameterTransportDescriptor();
			outParameterDescriptor1[0].setParamIndex(0);
			outParameterDescriptor1[0].setType(new QName("string"));
			namespaces = new QName[]{ new QName(XSD_NAMESPACE, "xsd"), new QName("http://service1.introduce.cagrid.org/Service1", "ns0"),
					new QName("http://service1.workflow.cagrid.org/Service1", "ns1")};
			outParameterDescriptor1[0].setQueryNamespaces(namespaces);
			outParameterDescriptor1[0].setLocationQuery("/ns0:GenerateDataResponse/ns1:StringAndItsLenght/ns1:str"); 
			outParameterDescriptor1[0].setDestinationGlobalUniqueIdentifier(2);
//			outParameterDescriptor1[0].setDestinationEPR(new EndpointReferenceType[]{serviceClient2.getEndpointReference()});

			// Creating the outputDescriptor of the second filter (Service3)
			outParameterDescriptor1[1] = new OperationOutputParameterTransportDescriptor();
			outParameterDescriptor1[1].setParamIndex(0);
			outParameterDescriptor1[1].setType(new QName("int"));
			outParameterDescriptor1[1].setQueryNamespaces(namespaces);
			outParameterDescriptor1[1].setLocationQuery("/ns0:GenerateDataResponse/ns1:StringAndItsLenght/ns1:length");
			outParameterDescriptor1[1].setDestinationGlobalUniqueIdentifier(3);
//			outParameterDescriptor1[1].setDestinationEPR(new EndpointReferenceType[]{serviceClient3.getEndpointReference()});

			// Creating the outputDescriptor of the 3rd filter (Service5)
			outParameterDescriptor1[2] = new OperationOutputParameterTransportDescriptor();
			outParameterDescriptor1[2].setParamIndex(0);
			outParameterDescriptor1[2].setType(new QName("http://service1.workflow.cagrid.org/Service1","StringAndItsLenght"));
			outParameterDescriptor1[2].setQueryNamespaces(namespaces);
			outParameterDescriptor1[2].setLocationQuery("/ns0:GenerateDataResponse/ns1:StringAndItsLenght");
			outParameterDescriptor1[2].setDestinationGlobalUniqueIdentifier(5);
//			outParameterDescriptor1[2].setDestinationEPR(new EndpointReferenceType[]{serviceClient5.getEndpointReference()});

			// Add one output to the workflow outputs
			outputParam = new WorkflowOutputParameterTransportDescriptor();
			outputParam.setSourceGUID(currStageID);
			paramDescription = new OperationOutputParameterTransportDescriptor();
			paramDescription.setLocationQuery("/ns0:GenerateDataResponse/ns1:StringAndItsLenght");
			paramDescription.setQueryNamespaces(namespaces);
			paramDescription.setType(new QName("http://service1.workflow.cagrid.org/Service1","StringAndItsLenght"));
			outputParam.setParamDescription(paramDescription);
			outputParams.add(outputParam);

			// parameters are all set at this point
			outputDescriptor1.setParamDescriptor(outParameterDescriptor1);
			currStageDesc.setOutputTransportDescriptor(outputDescriptor1);
			stagesDescs.add(currStageDesc);

			// set the only one parameter of this service.
			// now it have to run and set one Parameter of the service4
			String workflow_input = "george teadoro gordao que falou";
			System.out.println("Setting input for service 1: '"+workflow_input+"'");
			InputParameter inputService1 = new InputParameter(workflow_input, 0);
			inputParams.add(new WorkflowInputParameter(inputService1, currStageID));
			// END service 1 

			// Build the workflow output descriptor
			logger.info("Setting workflow outputs");
			WorkflowOutputTransportDescriptor outputDesc = new WorkflowOutputTransportDescriptor();
			outputDesc.setParamDescriptor(outputParams.toArray(new WorkflowOutputParameterTransportDescriptor[0]));

			wfPart.setInvocationHelperDescs(stagesDescs.toArray(new WorkflowStageDescriptor[0]));
			WorkflowInputParameters inputParameters = new WorkflowInputParameters(inputParams.toArray(new WorkflowInputParameter[0]));
			wfDesc.setInputs(inputParameters);
			wfDesc.setOutputDesc(outputDesc);
			wfDesc.setLocalWorkflows(new WorkflowPortionsDescriptor(new WorkflowPortionDescriptor[]{ wfPart }));

			logger.info("Creating Manager Instance");
			WorkflowManagerInstanceReference instanceRef = wf_manager.createWorkflowManagerInstanceFromObjectDescriptor(wfDesc);
			WorkflowManagerInstanceClient instanceClient = null;
			try {
				instanceClient = new WorkflowManagerInstanceClient(instanceRef.getEndpointReference());
			} catch (MalformedURIException e) {
				logger.error(e.getMessage(), e);
			}

			this.managerInstances.add(instanceRef.getEndpointReference());

			this.subscribe(TimestampedStatus.getTypeDesc().getXmlType(), instanceClient, workflowID);

			logger.info("Starting execution");
			instanceClient.start();
//			instanceClient.destroy();

			logger.info("Retrieving workflow outputs");
			String[] outputs = instanceClient.getOutputValues();
			for(int i=0; i < outputs.length; i++){

				logger.info("Output #"+ i +" is: "+ outputs[i]);
			}
			return;
		}

		protected void waitForCompletion() {

			System.out.println("Waiting for workflow notification of FINISH status");

			this.isFinishedKey.lock();
			try {

				if( !this.isFinished ){

					try {

						boolean wasSignaled = this.isFinishedCondition.await(45, TimeUnit.SECONDS); 					
						if(wasSignaled) System.out.println("OK. Received notification of FINISH status. Exiting"); 
						else {
							String errMsg = "Timeout exceeded without any notification of FINISH status. Exiting";
							System.err.println(errMsg);
//							this.printMap();
							Assert.fail(errMsg);
						}

					} catch(Throwable t){
						System.err.println("Error while waiting");
						t.printStackTrace();
					}
				}

				//this.printMap(); //DEBUG

			}
			finally {
				this.isFinishedKey.unlock();
			}
		}

		protected void subscribe(QName notificationType, WorkflowManagerInstanceClient  toSubscribe, String stageOperationQName){
			//protected void subscribe(QName notificationType, WorkflowInvocationHelperClient toSubscribe, String stageOperationQName){

			try{

				//System.out.println("[subscribe] Subscribing service: "+ toSubscribe.getEPRString());

				this.stageStatus.put(toSubscribe.getEPRString(), new TimestampedStatus(Status.UNCONFIGURED, 0)); // Register to be monitored for status changes
				toSubscribe.subscribeWithCallback(notificationType, this);

				this.EPR2OperationName.put(toSubscribe.getEPRString(), stageOperationQName);

			}
			catch(Throwable t){
				t.printStackTrace();
			} 

			return;
		}

		private boolean hasFinished() {

			Set<Entry<String, TimestampedStatus>> entries = this.stageStatus.entrySet();
			Iterator<Entry<String, TimestampedStatus>> entries_iter = entries.iterator();

			while( entries_iter.hasNext() ){

				Entry<String, TimestampedStatus> curr_entry = entries_iter.next();
				boolean stageEnded =   curr_entry.getValue().getStatus().equals(Status.FINISHED)
				|| curr_entry.getValue().getStatus().equals(Status.ERROR);

				if( !stageEnded )  return false;

			}

			return true;
		}

		

		public void deliver(List arg0, EndpointReferenceType arg1, Object arg2) {

			org.oasis.wsrf.properties.ResourcePropertyValueChangeNotificationType changeMessage = ((org.globus.wsrf.core.notification.ResourcePropertyValueChangeNotificationElementType) arg2)
			.getResourcePropertyValueChangeNotification();

			MessageElement actual_property = changeMessage.getNewValue().get_any()[0];
			QName message_qname = actual_property.getQName();
			boolean isTimestampedStatusChange = message_qname.equals(TimestampedStatus.getTypeDesc().getXmlType());
			String stageKey = null;
			try {
				stageKey = new WorkflowManagerInstanceClient(arg1).getEPRString();
			} catch (RemoteException e1) {
				e1.printStackTrace();
			} catch (MalformedURIException e1) {
				e1.printStackTrace();
			}   

			//DEBUG
			//PrintStream log = System.out;
			//log.println("[CreateTestWorkflowsStep] Received message of type "+ message_qname.getLocalPart() +" from "+ stageKey);

			// Handle status change notifications
			if(isTimestampedStatusChange){
				TimestampedStatus status = null;;
				try {
					status = (TimestampedStatus) actual_property.getValueAsType(message_qname, TimestampedStatus.class);
				} catch (Exception e) {
					e.printStackTrace();
				}

				logger.info("Received new status value: "+ status.getStatus().toString() + ':' + status.getTimestamp());

				this.isFinishedKey.lock();
				try{

					boolean statusActuallyChanged = false;
					if( this.stageStatus.containsKey(stageKey) ){

						TimestampedStatus curr_status = this.stageStatus.get(stageKey);
						statusActuallyChanged = ( curr_status.getTimestamp() < status.getTimestamp() ); 										

						if(statusActuallyChanged){

							this.stageStatus.remove(stageKey);
							this.stageStatus.put(stageKey, status);
						}

					}
					else logger.warn("Unrecognized stage notified status change: "+ stageKey);

					if( statusActuallyChanged && (status.getStatus().equals(Status.FINISHED) || status.getStatus().equals(Status.ERROR)) ){

						this.isFinished  = this.hasFinished(); 

						if(this.isFinished){

							this.isFinishedCondition.signalAll();
							Assert.assertFalse(this.stageStatus.containsValue(Status.ERROR));

							// Destroy ManagerInstance resources
							Iterator<EndpointReferenceType> instances_iter = this.managerInstances.iterator();
							while( instances_iter.hasNext() ){

								EndpointReferenceType curr_managerInstance = instances_iter.next();
								WorkflowManagerInstanceClient curr_client;
								try {
									curr_client = new WorkflowManagerInstanceClient(curr_managerInstance);
//									curr_client.destroy();
								} catch (MalformedURIException e) {
									logger.error(e.getMessage(), e);
									e.printStackTrace();
								} catch (RemoteException e) {
									logger.error(e.getMessage(), e);
									e.printStackTrace();
								}

							}

						}
					}
				}
				finally {
					this.isFinishedKey.unlock();
				}
			}		
		}
	}
	/***************************************************************/
  

  public org.oasis.wsrf.properties.GetMultipleResourcePropertiesResponse getMultipleResourceProperties(org.oasis.wsrf.properties.GetMultipleResourceProperties_Element params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getMultipleResourceProperties");
    return portType.getMultipleResourceProperties(params);
    }
  }

  public org.oasis.wsrf.properties.GetResourcePropertyResponse getResourceProperty(javax.xml.namespace.QName params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getResourceProperty");
    return portType.getResourceProperty(params);
    }
  }

  public org.oasis.wsrf.properties.QueryResourcePropertiesResponse queryResourceProperties(org.oasis.wsrf.properties.QueryResourceProperties_Element params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"queryResourceProperties");
    return portType.queryResourceProperties(params);
    }
  }

  public org.cagrid.workflow.manager.instance.stubs.types.WorkflowManagerInstanceReference createWorkflowManagerInstanceFromObjectDescriptor(org.cagrid.workflow.manager.descriptor.WorkflowManagerInstanceDescriptor workflowDesc) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"createWorkflowManagerInstanceFromObjectDescriptor");
    org.cagrid.workflow.manager.stubs.CreateWorkflowManagerInstanceFromObjectDescriptorRequest params = new org.cagrid.workflow.manager.stubs.CreateWorkflowManagerInstanceFromObjectDescriptorRequest();
    org.cagrid.workflow.manager.stubs.CreateWorkflowManagerInstanceFromObjectDescriptorRequestWorkflowDesc workflowDescContainer = new org.cagrid.workflow.manager.stubs.CreateWorkflowManagerInstanceFromObjectDescriptorRequestWorkflowDesc();
    workflowDescContainer.setWorkflowManagerInstanceDescriptor(workflowDesc);
    params.setWorkflowDesc(workflowDescContainer);
    org.cagrid.workflow.manager.stubs.CreateWorkflowManagerInstanceFromObjectDescriptorResponse boxedResult = portType.createWorkflowManagerInstanceFromObjectDescriptor(params);
    return boxedResult.getWorkflowManagerInstanceReference();
    }
  }

  public java.lang.String getIdentity() throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getIdentity");
    org.cagrid.workflow.manager.stubs.GetIdentityRequest params = new org.cagrid.workflow.manager.stubs.GetIdentityRequest();
    org.cagrid.workflow.manager.stubs.GetIdentityResponse boxedResult = portType.getIdentity(params);
    return boxedResult.getResponse();
    }
  }

}
