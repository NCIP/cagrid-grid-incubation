package org.cagrid.workflow.manager.client;

import gov.nih.nci.cagrid.introduce.security.client.ServiceSecurityClient;

import java.io.IOException;
import java.io.InputStream;
import java.rmi.RemoteException;

import javax.xml.namespace.QName;

import org.apache.axis.EngineConfiguration;
import org.apache.axis.client.AxisClient;
import org.apache.axis.client.Stub;
import org.apache.axis.configuration.FileProvider;
import org.apache.axis.message.addressing.AttributedURI;
import org.apache.axis.message.addressing.EndpointReferenceType;
import org.apache.axis.types.URI.MalformedURIException;
import org.cagrid.workflow.helper.descriptor.DeliveryPolicy;
import org.cagrid.workflow.helper.descriptor.InputParameterDescriptor;
import org.cagrid.workflow.helper.descriptor.OperationInputMessageDescriptor;
import org.cagrid.workflow.helper.descriptor.OperationOutputParameterTransportDescriptor;
import org.cagrid.workflow.helper.descriptor.OperationOutputTransportDescriptor;
import org.cagrid.workflow.helper.descriptor.WorkflowInstanceHelperDescriptor;
import org.cagrid.workflow.helper.descriptor.WorkflowInvocationHelperDescriptor;
import org.cagrid.workflow.manager.common.WorkflowManagerServiceI;
import org.cagrid.workflow.manager.descriptor.WorkflowManagerInstanceDescriptor;
import org.cagrid.workflow.manager.descriptor.WorkflowPortionDescriptor;
import org.cagrid.workflow.manager.descriptor.WorkflowStageDescriptor;
import org.cagrid.workflow.manager.instance.client.WorkflowManagerInstanceClient;
import org.cagrid.workflow.manager.instance.stubs.types.WorkflowManagerInstanceReference;
import org.cagrid.workflow.manager.stubs.WorkflowManagerServicePortType;
import org.cagrid.workflow.manager.stubs.service.WorkflowManagerServiceAddressingLocator;
import org.cagrid.workflow.manager.util.FileUtil;
import org.globus.gsi.GlobusCredential;

/**
 * This class is autogenerated, DO NOT EDIT GENERATED GRID SERVICE ACCESS METHODS.
 *
 * This client is generated automatically by Introduce to provide a clean unwrapped API to the
 * service.
 *
 * On construction the class instance will contact the remote service and retrieve it's security
 * metadata description which it will use to configure the Stub specifically for each method call.
 * 
 * @created by Introduce Toolkit version 1.1
 */
public class WorkflowManagerServiceClient extends ServiceSecurityClient implements WorkflowManagerServiceI {	
	protected WorkflowManagerServicePortType portType;
	private Object portTypeMutex;

	public WorkflowManagerServiceClient(String url) throws MalformedURIException, RemoteException {
		this(url,null);	
	}

	public WorkflowManagerServiceClient(String url, GlobusCredential proxy) throws MalformedURIException, RemoteException {
		super(url,proxy);
		initialize();
	}

	public WorkflowManagerServiceClient(EndpointReferenceType epr) throws MalformedURIException, RemoteException {
		this(epr,null);
	}

	public WorkflowManagerServiceClient(EndpointReferenceType epr, GlobusCredential proxy) throws MalformedURIException, RemoteException {
		super(epr,proxy);
		initialize();
	}

	private void initialize() throws RemoteException {
		this.portTypeMutex = new Object();
		this.portType = createPortType();
	}

	private WorkflowManagerServicePortType createPortType() throws RemoteException {

		WorkflowManagerServiceAddressingLocator locator = new WorkflowManagerServiceAddressingLocator();
		// attempt to load our context sensitive wsdd file
		InputStream resourceAsStream = getClass().getResourceAsStream("client-config.wsdd");
		if (resourceAsStream != null) {
			// we found it, so tell axis to configure an engine to use it
			EngineConfiguration engineConfig = new FileProvider(resourceAsStream);
			// set the engine of the locator
			locator.setEngine(new AxisClient(engineConfig));
		}
		WorkflowManagerServicePortType port = null;
		try {
			port = locator.getWorkflowManagerServicePortTypePort(getEndpointReference());
		} catch (Exception e) {
			throw new RemoteException("Unable to locate portType:" + e.getMessage(), e);
		}

		return port;
	}

	public static void usage(){
		System.out.println(WorkflowManagerServiceClient.class.getName() + " -url <service url>");
	}

	

	public static void main(String [] args){
		System.out.println("Running the Grid Service Client");
		try{
			if(!(args.length < 2)){
				if(args[0].equals("-url")){
					WorkflowManagerServiceClient client = new WorkflowManagerServiceClient(args[1]);
					// place client calls here if you want to use this main as a
					// test....
//					runBpelTest(client);
					
					
					runCaosDescriptorTest(client);
					
					
					
					System.out.println("End client");

				} else {
					usage();
					System.exit(1);
				}
			} else {
				usage();
				System.exit(1);
			}
		} catch (Exception e) {
			e.printStackTrace();
			System.exit(1);
		}
	}

	
	
	private static void runCaosDescriptorTest(WorkflowManagerServiceClient client) throws RemoteException {
		
		
		WorkflowManagerInstanceDescriptor workflowDesc = new WorkflowManagerInstanceDescriptor();
		
		
		// Create description for the portion of the workflow that will be within the same container
		WorkflowPortionDescriptor[] workflowParts = new WorkflowPortionDescriptor[1];
		workflowParts[0] = new WorkflowPortionDescriptor();
		
		
		WorkflowInstanceHelperDescriptor instanceHelperDesc = new WorkflowInstanceHelperDescriptor();
		String workflowID = "test_workflow_123";
		instanceHelperDesc.setWorkflowID(workflowID);
		EndpointReferenceType managerEPR = client.getEndpointReference();
		instanceHelperDesc.setWorkflowManagerEPR(managerEPR);
		// instanceHelperDesc.setProxyEPR(proxyEPR); // TODO Set the EPRs of each credential that should be managed
		workflowParts[0].setInstanceHelperDesc(instanceHelperDesc);
		
		
		// Build HelperService URL
		
		AttributedURI managerAddress = managerEPR.getAddress();
		String workflowHelperServiceLocation = managerAddress.getScheme() + "://" + managerAddress.getHost() + ':' +
			managerAddress.getPort() + "/wsrf/services/cagrid/WorkflowHelper";
		workflowParts[0].setWorkflowHelperServiceLocation(workflowHelperServiceLocation );
		
		
		
		// Build description of each stage
		WorkflowStageDescriptor[] invocationHelperDescs = new WorkflowStageDescriptor[2];
		
		
		
		/** 2nd stage */
		invocationHelperDescs[1] = new WorkflowStageDescriptor();
		invocationHelperDescs[1].setGlobalUniqueIdentifier(2);
		WorkflowInvocationHelperDescriptor basicDescription = new WorkflowInvocationHelperDescriptor();
		basicDescription.setOperationQName(new QName("http://second.cagrid.org/Second", "ReceiveRequest"));  // Remember this is actually the request name, not the method name 
		basicDescription.setServiceURL(managerAddress.getScheme() + "://" + managerAddress.getHost() + ':' +
				managerAddress.getPort() + "/wsrf/services/cagrid/Second");
		basicDescription.setWorkflowID(workflowID);
		basicDescription.setWorkflowManagerEPR(managerEPR);
		//basicDescription.setWorkflowInvocationSecurityDescriptor(workflowInvocationSecurityDescriptor); // TODO
		invocationHelperDescs[1].setBasicDescription(basicDescription);
		
		
		
		InputParameterDescriptor[] inputDesc = new InputParameterDescriptor[1]; 
		inputDesc[0] = new InputParameterDescriptor();
		inputDesc[0].setParamQName(new QName("input"));
		inputDesc[0].setParamType(new QName("string"));
		OperationInputMessageDescriptor inputsDescription = new OperationInputMessageDescriptor(inputDesc );
		invocationHelperDescs[1].setInputsDescription(inputsDescription);
		
		
		
		OperationOutputTransportDescriptor outputTransportDescriptor = new OperationOutputTransportDescriptor(new OperationOutputParameterTransportDescriptor[0]);
		invocationHelperDescs[1].setOutputTransportDescriptor(outputTransportDescriptor);
		
		
		workflowParts[0].setInvocationHelperDescs(invocationHelperDescs);
		workflowDesc.setWorkflowParts(workflowParts);
		
		
		
		/** 1st stage */
		invocationHelperDescs[0] = new WorkflowStageDescriptor();
		invocationHelperDescs[0].setGlobalUniqueIdentifier(1);
		basicDescription = new WorkflowInvocationHelperDescriptor();
		basicDescription.setOperationQName(new QName("http://first.cagrid.org/First", "PrintRequest"));
		basicDescription.setOutputType(new QName("string"));
		basicDescription.setServiceURL(managerAddress.getScheme() + "://" + managerAddress.getHost() + ':' +
				managerAddress.getPort() + "/wsrf/services/cagrid/First");
		basicDescription.setWorkflowID(workflowID);
		basicDescription.setWorkflowManagerEPR(managerEPR);
		//basicDescription.setWorkflowInvocationSecurityDescriptor(workflowInvocationSecurityDescriptor); // TODO
		invocationHelperDescs[0].setBasicDescription(basicDescription);
		
		
		
		inputDesc = new InputParameterDescriptor[0]; // No input parameters for this stage
		inputsDescription = new OperationInputMessageDescriptor(inputDesc );
		invocationHelperDescs[0].setInputsDescription(inputsDescription);
		
		
		
		outputTransportDescriptor = new OperationOutputTransportDescriptor();
		OperationOutputParameterTransportDescriptor[] paramDescriptor = new OperationOutputParameterTransportDescriptor[1];
		paramDescriptor[0] = new OperationOutputParameterTransportDescriptor();
		paramDescriptor[0].setDeliveryPolicy(DeliveryPolicy.ROUNDROBIN);
		paramDescriptor[0].setDestinationGlobalUniqueIdentifier(2);
		paramDescriptor[0].setQueryNamespaces(new QName[]{ new QName("http://first.cagrid.org/First", "ns1") });
		paramDescriptor[0].setLocationQuery("/ns1:PrintResponse");
		paramDescriptor[0].setParamIndex(0);
		paramDescriptor[0].setType(new QName("string"));
		
		outputTransportDescriptor.setParamDescriptor(paramDescriptor );
		invocationHelperDescs[0].setOutputTransportDescriptor(outputTransportDescriptor);
		
		
		
		
		
		// TODO Configure the data exchange between the user and the workflow
//		workflowDesc.setInputs(inputs);
//		workflowDesc.setOutputDesc(outputDesc);
		
		
		
		WorkflowManagerInstanceReference managerInstance = client.createWorkflowManagerInstance(workflowDesc);
		
		WorkflowManagerInstanceClient managerInstanceClient = null;
		try {
			managerInstanceClient = new WorkflowManagerInstanceClient(managerInstance.getEndpointReference());
		} catch (MalformedURIException e) {
			e.printStackTrace();
		}
		managerInstanceClient.start();
		managerInstanceClient.destroy();
		
	}

	
	
	private static void runBpelTest(WorkflowManagerServiceClient client) throws RemoteException{
		
		String bpelFileName = System.getProperty("bpel.file");
		System.out.println("BPEL file is "+ bpelFileName);
		String extraDescFilename = System.getProperty("extra.file");

		String workflowBpelFileContent = null;
		String workflowExtraDesc = null;
		try{
			workflowBpelFileContent = FileUtil.readTextFile(bpelFileName);
			workflowExtraDesc = FileUtil.readTextFile(extraDescFilename);
		}catch(IOException ioe){
			ioe.printStackTrace();
			System.exit(1);
		}
		System.out.println("File read!");

		
		System.out.println("Before create workflow");
		WorkflowManagerInstanceReference managerInstanceReference = client.createWorkflowManagerInstanceFromBpel(workflowBpelFileContent, workflowExtraDesc, client.getEndpointReference());
		System.out.println("Get reference");
		WorkflowManagerInstanceClient managerInstanceClient = null;
		try {
			managerInstanceClient = new WorkflowManagerInstanceClient(managerInstanceReference.getEndpointReference());
		} catch (MalformedURIException e) {
			e.printStackTrace();
		}
		managerInstanceClient.start();
							
		//String[] outputs = managerInstanceClient.getOutputValues(); // TODO How will the Manager set the parameters' numeric identifier? 

		
	}
	
	
	
	
  public org.oasis.wsrf.properties.GetMultipleResourcePropertiesResponse getMultipleResourceProperties(org.oasis.wsrf.properties.GetMultipleResourceProperties_Element params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getMultipleResourceProperties");
    return portType.getMultipleResourceProperties(params);
    }
  }

  public org.oasis.wsrf.properties.GetResourcePropertyResponse getResourceProperty(javax.xml.namespace.QName params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getResourceProperty");
    return portType.getResourceProperty(params);
    }
  }

  public org.oasis.wsrf.properties.QueryResourcePropertiesResponse queryResourceProperties(org.oasis.wsrf.properties.QueryResourceProperties_Element params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"queryResourceProperties");
    return portType.queryResourceProperties(params);
    }
  }

  public org.cagrid.workflow.manager.instance.stubs.types.WorkflowManagerInstanceReference createWorkflowManagerInstanceFromBpel(java.lang.String bpelDescription,java.lang.String operationsDescription,org.apache.axis.message.addressing.EndpointReferenceType managerEPR) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"createWorkflowManagerInstanceFromBpel");
    org.cagrid.workflow.manager.stubs.CreateWorkflowManagerInstanceFromBpelRequest params = new org.cagrid.workflow.manager.stubs.CreateWorkflowManagerInstanceFromBpelRequest();
    params.setBpelDescription(bpelDescription);
    params.setOperationsDescription(operationsDescription);
    org.cagrid.workflow.manager.stubs.CreateWorkflowManagerInstanceFromBpelRequestManagerEPR managerEPRContainer = new org.cagrid.workflow.manager.stubs.CreateWorkflowManagerInstanceFromBpelRequestManagerEPR();
    managerEPRContainer.setEndpointReference(managerEPR);
    params.setManagerEPR(managerEPRContainer);
    org.cagrid.workflow.manager.stubs.CreateWorkflowManagerInstanceFromBpelResponse boxedResult = portType.createWorkflowManagerInstanceFromBpel(params);
    return boxedResult.getWorkflowManagerInstanceReference();
    }
  }

  public org.cagrid.workflow.manager.instance.stubs.types.WorkflowManagerInstanceReference createWorkflowManagerInstance(org.cagrid.workflow.manager.descriptor.WorkflowManagerInstanceDescriptor workflowDesc) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"createWorkflowManagerInstance");
    org.cagrid.workflow.manager.stubs.CreateWorkflowManagerInstanceRequest params = new org.cagrid.workflow.manager.stubs.CreateWorkflowManagerInstanceRequest();
    org.cagrid.workflow.manager.stubs.CreateWorkflowManagerInstanceRequestWorkflowDesc workflowDescContainer = new org.cagrid.workflow.manager.stubs.CreateWorkflowManagerInstanceRequestWorkflowDesc();
    workflowDescContainer.setWorkflowManagerInstanceDescriptor(workflowDesc);
    params.setWorkflowDesc(workflowDescContainer);
    org.cagrid.workflow.manager.stubs.CreateWorkflowManagerInstanceResponse boxedResult = portType.createWorkflowManagerInstance(params);
    return boxedResult.getWorkflowManagerInstanceReference();
    }
  }

}
