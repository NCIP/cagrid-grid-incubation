package org.cagrid.workflow.manager.client;

import gov.nih.nci.cagrid.introduce.security.client.ServiceSecurityClient;

import java.io.IOException;
import java.io.InputStream;
import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

import javax.xml.namespace.QName;
import javax.xml.rpc.NamespaceConstants;

import org.apache.axis.EngineConfiguration;
import org.apache.axis.client.AxisClient;
import org.apache.axis.client.Stub;
import org.apache.axis.configuration.FileProvider;
import org.apache.axis.message.addressing.EndpointReferenceType;
import org.apache.axis.types.URI.MalformedURIException;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.cagrid.workflow.helper.descriptor.CDSAuthenticationMethod;
import org.cagrid.workflow.helper.descriptor.ChannelProtection;
import org.cagrid.workflow.helper.descriptor.InputParameter;
import org.cagrid.workflow.helper.descriptor.InputParameterDescriptor;
import org.cagrid.workflow.helper.descriptor.OperationInputMessageDescriptor;
import org.cagrid.workflow.helper.descriptor.OperationOutputParameterTransportDescriptor;
import org.cagrid.workflow.helper.descriptor.OperationOutputTransportDescriptor;
import org.cagrid.workflow.helper.descriptor.TLSInvocationSecurityDescriptor;
import org.cagrid.workflow.helper.descriptor.TimestampedStatus;
import org.cagrid.workflow.helper.descriptor.WorkflowInvocationSecurityDescriptor;
import org.cagrid.workflow.manager.common.WorkflowManagerServiceI;
import org.cagrid.workflow.manager.descriptor.WorkflowInputParameter;
import org.cagrid.workflow.manager.descriptor.WorkflowInputParameters;
import org.cagrid.workflow.manager.descriptor.WorkflowManagerInstanceDescriptor;
import org.cagrid.workflow.manager.descriptor.WorkflowOutputParameterTransportDescriptor;
import org.cagrid.workflow.manager.descriptor.WorkflowOutputTransportDescriptor;
import org.cagrid.workflow.manager.descriptor.WorkflowPortionDescriptor;
import org.cagrid.workflow.manager.descriptor.WorkflowStageDescriptor;
import org.cagrid.workflow.manager.instance.client.WorkflowManagerInstanceClient;
import org.cagrid.workflow.manager.instance.stubs.types.WorkflowManagerInstanceReference;
import org.cagrid.workflow.manager.stubs.WorkflowManagerServicePortType;
import org.cagrid.workflow.manager.stubs.service.WorkflowManagerServiceAddressingLocator;
import org.cagrid.workflow.manager.util.FileUtil;
import org.globus.gsi.GlobusCredential;

/**
 * This class is autogenerated, DO NOT EDIT GENERATED GRID SERVICE ACCESS METHODS.
 *
 * This client is generated automatically by Introduce to provide a clean unwrapped API to the
 * service.
 *
 * On construction the class instance will contact the remote service and retrieve it's security
 * metadata description which it will use to configure the Stub specifically for each method call.
 * 
 * @created by Introduce Toolkit version 1.1
 */
public class WorkflowManagerServiceClient extends ServiceSecurityClient implements WorkflowManagerServiceI {	
	protected WorkflowManagerServicePortType portType;
	private Object portTypeMutex;

	
	
	
	// Synchronizes the access to variable 'isFinished' 
	protected static Lock isFinishedKey = new ReentrantLock();
	protected static Condition isFinishedCondition = isFinishedKey.newCondition();
	protected static Map<String, TimestampedStatus> stageStatus = new HashMap<String, TimestampedStatus>() ;


	// Store the operation name for each service subscribed for notification 
	protected static Map<String, String> EPR2OperationName = new HashMap<String, String>();

	protected static boolean isFinished = false;
	protected static List<EndpointReferenceType> managerInstances = new ArrayList<EndpointReferenceType>();


	final static String XSD_NAMESPACE = "http://www.w3.org/2001/XMLSchema";
	final static String SOAPENCODING_NAMESPACE = "http://schemas.xmlsoap.org/soap/encoding/";

	protected final boolean validatorEnabled = false;  // Enable/Disable the output matcher. Should be true when not debugging


	private static int currParamIndex = 0;
	
	
	
	
	
	
	
	
	private static Log logger = LogFactory.getLog(WorkflowManagerServiceClient.class);

	public WorkflowManagerServiceClient(String url) throws MalformedURIException, RemoteException {
		this(url,null);	
	}

	public WorkflowManagerServiceClient(String url, GlobusCredential proxy) throws MalformedURIException, RemoteException {
		super(url,proxy);
		initialize();
	}

	public WorkflowManagerServiceClient(EndpointReferenceType epr) throws MalformedURIException, RemoteException {
		this(epr,null);
	}

	public WorkflowManagerServiceClient(EndpointReferenceType epr, GlobusCredential proxy) throws MalformedURIException, RemoteException {
		super(epr,proxy);
		initialize();
	}

	private void initialize() throws RemoteException {
		this.portTypeMutex = new Object();
		this.portType = createPortType();
	}

	private WorkflowManagerServicePortType createPortType() throws RemoteException {

		WorkflowManagerServiceAddressingLocator locator = new WorkflowManagerServiceAddressingLocator();
		// attempt to load our context sensitive wsdd file
		InputStream resourceAsStream = getClass().getResourceAsStream("client-config.wsdd");
		if (resourceAsStream != null) {
			// we found it, so tell axis to configure an engine to use it
			EngineConfiguration engineConfig = new FileProvider(resourceAsStream);
			// set the engine of the locator
			locator.setEngine(new AxisClient(engineConfig));
		}
		WorkflowManagerServicePortType port = null;
		try {
			port = locator.getWorkflowManagerServicePortTypePort(getEndpointReference());
		} catch (Exception e) {
			throw new RemoteException("Unable to locate portType:" + e.getMessage(), e);
		}

		return port;
	}

	public static void usage(){
		System.out.println(WorkflowManagerServiceClient.class.getName() + " -url <service url>");
	}

	public static void main(String [] args){
		System.out.println("Running the Grid Service Client");
		try{
			if(!(args.length < 2)){
				if(args[0].equals("-url")){
					WorkflowManagerServiceClient client = new WorkflowManagerServiceClient(args[1]);
					// place client calls here if you want to use this main as a
					// test....
//					runBpelTest(client);

					runCaosDescriptorTest(client, client.getEndpointReference(), "http://localhost:8080/wsrf/services/");

					System.out.println("End client");

				} else {
					usage();
					System.exit(1);
				}
			} else {
				usage();
				System.exit(1);
			}
		} catch (Exception e) {
			e.printStackTrace();
			System.exit(1);
		}
	}

	private static void runCaosDescriptorTest(WorkflowManagerServiceClient managerClient, EndpointReferenceType delegatedCredentialProxy, String containerBaseURL) throws RemoteException {


		// Create security descriptor for the stages (in this case, all of them present the same security requirements)
		CDSAuthenticationMethod cds_auth = new CDSAuthenticationMethod(delegatedCredentialProxy);
		TLSInvocationSecurityDescriptor tlsSecDesc = new TLSInvocationSecurityDescriptor(cds_auth , null, ChannelProtection.Privacy, null);
		WorkflowInvocationSecurityDescriptor secDescriptor = new WorkflowInvocationSecurityDescriptor(tlsSecDesc , null, null);
		
	
		
		// Instantiate ManagerDescription
		WorkflowManagerInstanceDescriptor wfDesc = new WorkflowManagerInstanceDescriptor();

		// Describe the single local workflow this workflow is divided in
		WorkflowPortionDescriptor wfPart = new WorkflowPortionDescriptor();
		String workflowHelperServiceLocation = containerBaseURL + "cagrid/WorkflowHelper";
		wfPart.setWorkflowHelperServiceLocation(workflowHelperServiceLocation);

		// Describe the InstanceHelper associated with the local workflow
		org.cagrid.workflow.helper.descriptor.WorkflowInstanceHelperDescriptor workflowDescriptor2 = new org.cagrid.workflow.helper.descriptor.WorkflowInstanceHelperDescriptor();
		String workflowID = "WorkFlow2";
		workflowDescriptor2.setWorkflowID(workflowID);
		wfPart.setInstanceHelperDesc(workflowDescriptor2);


		ArrayList<WorkflowStageDescriptor> stagesDescs = new ArrayList<WorkflowStageDescriptor>();
		ArrayList<WorkflowInputParameter> inputParams = new ArrayList<WorkflowInputParameter>();
		ArrayList<WorkflowOutputParameterTransportDescriptor> outputParams = new ArrayList<WorkflowOutputParameterTransportDescriptor>();



		// BEGIN ReceiveArrayService::ReceiveArrayAndMore
		WorkflowStageDescriptor currStageDesc = new WorkflowStageDescriptor();
		int currStageID = 0;
		currStageDesc.setGlobalUniqueIdentifier(currStageID);


		org.cagrid.workflow.helper.descriptor.WorkflowInvocationHelperDescriptor operation_ram = new org.cagrid.workflow.helper.descriptor.WorkflowInvocationHelperDescriptor();
		operation_ram.setWorkflowID("GeorgeliusWorkFlow");
		operation_ram.setOperationQName(new QName("http://receivearrayservice.introduce.cagrid.org/ReceiveArrayService", "SecureReceiveArrayAndMoreRequest"));
		operation_ram.setServiceURL(containerBaseURL+"cagrid/ReceiveArrayService");
		//operation_ram.setOutputType(); // Service has no output
		operation_ram.setWorkflowInvocationSecurityDescriptor(secDescriptor);  // Set security requirements
		currStageDesc.setBasicDescription(operation_ram);


		// Creating Descriptor of the InputMessage
		org.cagrid.workflow.helper.descriptor.OperationInputMessageDescriptor inputMessage_ram = new OperationInputMessageDescriptor();
		InputParameterDescriptor[] inputParams_ram = new InputParameterDescriptor[3];
		inputParams_ram[0] = new InputParameterDescriptor(new QName("number"), new QName(NamespaceConstants.NSURI_SCHEMA_XSD, "int"));
		inputParams_ram[1] = new InputParameterDescriptor(new QName("strArray"), new QName(NamespaceConstants.NSURI_SCHEMA_XSD, "string[]"));
		inputParams_ram[2] = new InputParameterDescriptor(new QName("booleanValue"), new QName(NamespaceConstants.NSURI_SCHEMA_XSD, "boolean"));
		inputMessage_ram.setInputParam(inputParams_ram);
		currStageDesc.setInputsDescription(inputMessage_ram);
		// End InputMessage Descriptor

		// Creating an empty outputDescriptor
		OperationOutputTransportDescriptor outputDescriptor_ram = new OperationOutputTransportDescriptor();
		OperationOutputParameterTransportDescriptor outParameterDescriptor_ram [] = new OperationOutputParameterTransportDescriptor[0];

		// takes the reference to no service
		outputDescriptor_ram.setParamDescriptor(outParameterDescriptor_ram);
		currStageDesc.setOutputTransportDescriptor(outputDescriptor_ram);
		stagesDescs.add(currStageDesc);


		// Set the values of the two arguments of simple type
		inputParams.add(new WorkflowInputParameter(new InputParameter("999", 0), currStageID));
		inputParams.add(new WorkflowInputParameter(new InputParameter("true",2), currStageID));
		// END ReceiveArrayService::ReceiveArrayAndMore




		// BEGIN CreateArrayService
		currStageDesc = new WorkflowStageDescriptor();
		currStageID++;
		currStageDesc.setGlobalUniqueIdentifier(currStageID);


		org.cagrid.workflow.helper.descriptor.WorkflowInvocationHelperDescriptor operation_cas = new org.cagrid.workflow.helper.descriptor.WorkflowInvocationHelperDescriptor();
		String access_url = containerBaseURL+"cagrid/CreateArrayService";
		operation_cas.setWorkflowID("GeorgeliusWorkFlow");
		operation_cas.setOperationQName(new QName("http://createarrayservice.introduce.cagrid.org/CreateArrayService", "SecureGetArrayRequest"));
		operation_cas.setServiceURL(access_url);
		operation_cas.setOutputType(new QName(NamespaceConstants.NSURI_SOAP_ENCODING, "string[]"));
		operation_cas.setWorkflowInvocationSecurityDescriptor(secDescriptor);  // Set security requirements
		currStageDesc.setBasicDescription(operation_cas);


		// Creating Descriptor of the InputMessage
		org.cagrid.workflow.helper.descriptor.OperationInputMessageDescriptor inputMessage_cas = new OperationInputMessageDescriptor();
		InputParameterDescriptor[] inputParams_cas = new InputParameterDescriptor[0];
		inputMessage_cas.setInputParam(inputParams_cas);
		currStageDesc.setInputsDescription(inputMessage_cas);
		// End InputMessage Descriptor

		// Creating the outputDescriptor of the only service that will receive the output (ReceiveArrayService)
		OperationOutputTransportDescriptor outputDescriptor_cas = new OperationOutputTransportDescriptor();
		int numDestinations = 1;
		OperationOutputParameterTransportDescriptor outParameterDescriptor_cas [] = new OperationOutputParameterTransportDescriptor[numDestinations];

		// First destination: ReceiveArrayService::ReceiveArrayAndMore
		outParameterDescriptor_cas[0] = new OperationOutputParameterTransportDescriptor();
		outParameterDescriptor_cas[0].setParamIndex(1);
		outParameterDescriptor_cas[0].setType(new QName( NamespaceConstants.NSURI_SOAP_ENCODING ,"string[]"));
		outParameterDescriptor_cas[0].setQueryNamespaces(new QName[]{ new QName("http://createarrayservice.introduce.cagrid.org/CreateArrayService", "ns0"),
				new QName(NamespaceConstants.NSURI_SCHEMA_XSD,"xsd")});
		outParameterDescriptor_cas[0].setLocationQuery("/ns0:GetArrayResponse");
		outParameterDescriptor_cas[0].setDestinationGlobalUniqueIdentifier(0);
//		outParameterDescriptor_cas[0].setDestinationEPR(new EndpointReferenceType[]{ serviceClient_ram.getEndpointReference()});


		// Second destination: Output matcher
		if(false){

			//System.out.println("Setting 5th param in the output matcher: "+ outputMatcherEPR); //DEBUG

			outParameterDescriptor_cas[1] = new OperationOutputParameterTransportDescriptor();
			outParameterDescriptor_cas[1].setParamIndex(4);
			outParameterDescriptor_cas[1].setType(new QName( NamespaceConstants.NSURI_SOAP_ENCODING ,"string[]"));
			outParameterDescriptor_cas[1].setQueryNamespaces(new QName[]{ new QName("http://createarrayservice.introduce.cagrid.org/CreateArrayService", "ns0"),
					new QName(NamespaceConstants.NSURI_SCHEMA_XSD,"xsd")});
			outParameterDescriptor_cas[1].setLocationQuery("/ns0:GetArrayResponse");
//			outParameterDescriptor_cas[1].setDestinationEPR(new EndpointReferenceType[]{ outputMatcherID});
		}




		// Add one output to the worklow outputs' description
		WorkflowOutputParameterTransportDescriptor outputParam = new WorkflowOutputParameterTransportDescriptor();
		OperationOutputParameterTransportDescriptor paramDescription = new OperationOutputParameterTransportDescriptor();
		paramDescription.setLocationQuery("/ns0:GetArrayResponse");
		paramDescription.setQueryNamespaces(new QName[]{ new QName("http://createarrayservice.introduce.cagrid.org/CreateArrayService", "ns0"),
				new QName(NamespaceConstants.NSURI_SCHEMA_XSD,"xsd")});
		paramDescription.setType(new QName( NamespaceConstants.NSURI_SOAP_ENCODING ,"string[]"));
		outputParam.setParamDescription(paramDescription );
		outputParam.setSourceGUID(currStageID);
		outputParams.add(outputParam);




		// takes the reference to ReceiveArrayService
		outputDescriptor_cas.setParamDescriptor(outParameterDescriptor_cas);
		currStageDesc.setOutputTransportDescriptor(outputDescriptor_cas);

		stagesDescs.add(currStageDesc);
		// END CreateArrayService 


		logger.info("Configuring workflow inputs and outputs");
		WorkflowInputParameters inputParameters = new WorkflowInputParameters(inputParams.toArray(new WorkflowInputParameter[0]));
		wfDesc.setInputs(inputParameters);
		WorkflowOutputTransportDescriptor outputDesc = new WorkflowOutputTransportDescriptor(outputParams.toArray(new WorkflowOutputParameterTransportDescriptor[0]));
		wfDesc.setOutputDesc(outputDesc);
		wfPart.setInvocationHelperDescs(stagesDescs.toArray(new WorkflowStageDescriptor[0]));
		wfDesc.setWorkflowParts(new WorkflowPortionDescriptor[]{ wfPart });
		WorkflowManagerInstanceReference instanceRef = managerClient.createWorkflowManagerInstanceFromObjectDescriptor(wfDesc);
		WorkflowManagerInstanceClient instanceClient = null;
		try {
			instanceClient = new WorkflowManagerInstanceClient(instanceRef.getEndpointReference());
//			subscribe(TimestampedStatus.getTypeDesc().getXmlType(), instanceClient, workflowID);
		} catch (MalformedURIException e) {
			logger.error(e.getMessage(),e );
		} 

		managerInstances.add(instanceRef.getEndpointReference());

		logger.info("Starting execution");
		instanceClient.start();

		logger.info("Retrieving workflow outputs");
		String[] outputs = instanceClient.getOutputValues();

		for(int i=0; i < outputs.length; i++){

			logger.info("Output #"+ i +" is "+ outputs[i]);
		}


//		this.waitUntilCompletion();
//		instanceClient.destroy();

		logger.info("END");
	}

	private static void runBpelTest(WorkflowManagerServiceClient client) throws RemoteException{

		String bpelFileName = System.getProperty("bpel.file");
		System.out.println("BPEL file is "+ bpelFileName);
		String extraDescFilename = System.getProperty("extra.file");

		String workflowBpelFileContent = null;
		String workflowExtraDesc = null;
		try{
			workflowBpelFileContent = FileUtil.readTextFile(bpelFileName);
			workflowExtraDesc = FileUtil.readTextFile(extraDescFilename);
		}catch(IOException ioe){
			ioe.printStackTrace();
			System.exit(1);
		}
		System.out.println("File read!");

		System.out.println("Before create workflow");
		WorkflowManagerInstanceReference managerInstanceReference = client.createWorkflowManagerInstanceFromBpel(workflowBpelFileContent, workflowExtraDesc, client.getEndpointReference());
		System.out.println("Get reference");
		WorkflowManagerInstanceClient managerInstanceClient = null;
		try {
			managerInstanceClient = new WorkflowManagerInstanceClient(managerInstanceReference.getEndpointReference());
		} catch (MalformedURIException e) {
			e.printStackTrace();
		}
		managerInstanceClient.start();

		//String[] outputs = managerInstanceClient.getOutputValues(); // TODO How will the Manager set the parameters' numeric identifier? 

	}

  public org.oasis.wsrf.properties.GetMultipleResourcePropertiesResponse getMultipleResourceProperties(org.oasis.wsrf.properties.GetMultipleResourceProperties_Element params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getMultipleResourceProperties");
    return portType.getMultipleResourceProperties(params);
    }
  }

  public org.oasis.wsrf.properties.GetResourcePropertyResponse getResourceProperty(javax.xml.namespace.QName params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getResourceProperty");
    return portType.getResourceProperty(params);
    }
  }

  public org.oasis.wsrf.properties.QueryResourcePropertiesResponse queryResourceProperties(org.oasis.wsrf.properties.QueryResourceProperties_Element params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"queryResourceProperties");
    return portType.queryResourceProperties(params);
    }
  }

  public org.cagrid.workflow.manager.instance.stubs.types.WorkflowManagerInstanceReference createWorkflowManagerInstanceFromBpel(java.lang.String bpelDescription,java.lang.String operationsDescription,org.apache.axis.message.addressing.EndpointReferenceType managerEPR) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"createWorkflowManagerInstanceFromBpel");
    org.cagrid.workflow.manager.stubs.CreateWorkflowManagerInstanceFromBpelRequest params = new org.cagrid.workflow.manager.stubs.CreateWorkflowManagerInstanceFromBpelRequest();
    params.setBpelDescription(bpelDescription);
    params.setOperationsDescription(operationsDescription);
    org.cagrid.workflow.manager.stubs.CreateWorkflowManagerInstanceFromBpelRequestManagerEPR managerEPRContainer = new org.cagrid.workflow.manager.stubs.CreateWorkflowManagerInstanceFromBpelRequestManagerEPR();
    managerEPRContainer.setEndpointReference(managerEPR);
    params.setManagerEPR(managerEPRContainer);
    org.cagrid.workflow.manager.stubs.CreateWorkflowManagerInstanceFromBpelResponse boxedResult = portType.createWorkflowManagerInstanceFromBpel(params);
    return boxedResult.getWorkflowManagerInstanceReference();
    }
  }

  public org.cagrid.workflow.manager.instance.stubs.types.WorkflowManagerInstanceReference createWorkflowManagerInstanceFromObjectDescriptor(org.cagrid.workflow.manager.descriptor.WorkflowManagerInstanceDescriptor workflowDesc) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"createWorkflowManagerInstanceFromObjectDescriptor");
    org.cagrid.workflow.manager.stubs.CreateWorkflowManagerInstanceFromObjectDescriptorRequest params = new org.cagrid.workflow.manager.stubs.CreateWorkflowManagerInstanceFromObjectDescriptorRequest();
    org.cagrid.workflow.manager.stubs.CreateWorkflowManagerInstanceFromObjectDescriptorRequestWorkflowDesc workflowDescContainer = new org.cagrid.workflow.manager.stubs.CreateWorkflowManagerInstanceFromObjectDescriptorRequestWorkflowDesc();
    workflowDescContainer.setWorkflowManagerInstanceDescriptor(workflowDesc);
    params.setWorkflowDesc(workflowDescContainer);
    org.cagrid.workflow.manager.stubs.CreateWorkflowManagerInstanceFromObjectDescriptorResponse boxedResult = portType.createWorkflowManagerInstanceFromObjectDescriptor(params);
    return boxedResult.getWorkflowManagerInstanceReference();
    }
  }

  public org.cagrid.workflow.manager.instance.stubs.types.WorkflowManagerInstanceReference createWorkflowManagerInstance(java.lang.String xmlWorkflowDescription) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"createWorkflowManagerInstance");
    org.cagrid.workflow.manager.stubs.CreateWorkflowManagerInstanceRequest params = new org.cagrid.workflow.manager.stubs.CreateWorkflowManagerInstanceRequest();
    params.setXmlWorkflowDescription(xmlWorkflowDescription);
    org.cagrid.workflow.manager.stubs.CreateWorkflowManagerInstanceResponse boxedResult = portType.createWorkflowManagerInstance(params);
    return boxedResult.getWorkflowManagerInstanceReference();
    }
  }

  public java.lang.String getIdentity() throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getIdentity");
    org.cagrid.workflow.manager.stubs.GetIdentityRequest params = new org.cagrid.workflow.manager.stubs.GetIdentityRequest();
    org.cagrid.workflow.manager.stubs.GetIdentityResponse boxedResult = portType.getIdentity(params);
    return boxedResult.getResponse();
    }
  }
}
