package org.cagrid.workflow.manager.client;

import gov.nih.nci.cagrid.introduce.security.client.ServiceSecurityClient;

import java.io.IOException;
import java.io.InputStream;
import java.rmi.RemoteException;

import org.apache.axis.EngineConfiguration;
import org.apache.axis.client.AxisClient;
import org.apache.axis.client.Stub;
import org.apache.axis.configuration.FileProvider;
import org.apache.axis.message.addressing.EndpointReferenceType;
import org.apache.axis.types.URI.MalformedURIException;
import org.cagrid.workflow.manager.common.WorkflowManagerServiceI;
import org.cagrid.workflow.manager.descriptor.WorkflowManagerInstanceDescriptor;
import org.cagrid.workflow.manager.instance.client.WorkflowManagerInstanceClient;
import org.cagrid.workflow.manager.instance.stubs.types.WorkflowManagerInstanceReference;
import org.cagrid.workflow.manager.stubs.WorkflowManagerServicePortType;
import org.cagrid.workflow.manager.stubs.service.WorkflowManagerServiceAddressingLocator;
import org.cagrid.workflow.manager.util.FileUtil;
import org.globus.gsi.GlobusCredential;

/**
 * This class is autogenerated, DO NOT EDIT GENERATED GRID SERVICE ACCESS METHODS.
 *
 * This client is generated automatically by Introduce to provide a clean unwrapped API to the
 * service.
 *
 * On construction the class instance will contact the remote service and retrieve it's security
 * metadata description which it will use to configure the Stub specifically for each method call.
 * 
 * @created by Introduce Toolkit version 1.1
 */
public class WorkflowManagerServiceClient extends ServiceSecurityClient implements WorkflowManagerServiceI {	
	protected WorkflowManagerServicePortType portType;
	private Object portTypeMutex;

	public WorkflowManagerServiceClient(String url) throws MalformedURIException, RemoteException {
		this(url,null);	
	}

	public WorkflowManagerServiceClient(String url, GlobusCredential proxy) throws MalformedURIException, RemoteException {
		super(url,proxy);
		initialize();
	}

	public WorkflowManagerServiceClient(EndpointReferenceType epr) throws MalformedURIException, RemoteException {
		this(epr,null);
	}

	public WorkflowManagerServiceClient(EndpointReferenceType epr, GlobusCredential proxy) throws MalformedURIException, RemoteException {
		super(epr,proxy);
		initialize();
	}

	private void initialize() throws RemoteException {
		this.portTypeMutex = new Object();
		this.portType = createPortType();
	}

	private WorkflowManagerServicePortType createPortType() throws RemoteException {

		WorkflowManagerServiceAddressingLocator locator = new WorkflowManagerServiceAddressingLocator();
		// attempt to load our context sensitive wsdd file
		InputStream resourceAsStream = getClass().getResourceAsStream("client-config.wsdd");
		if (resourceAsStream != null) {
			// we found it, so tell axis to configure an engine to use it
			EngineConfiguration engineConfig = new FileProvider(resourceAsStream);
			// set the engine of the locator
			locator.setEngine(new AxisClient(engineConfig));
		}
		WorkflowManagerServicePortType port = null;
		try {
			port = locator.getWorkflowManagerServicePortTypePort(getEndpointReference());
		} catch (Exception e) {
			throw new RemoteException("Unable to locate portType:" + e.getMessage(), e);
		}

		return port;
	}

	public static void usage(){
		System.out.println(WorkflowManagerServiceClient.class.getName() + " -url <service url>");
	}

	

	public static void main(String [] args){
		System.out.println("Running the Grid Service Client");
		try{
			if(!(args.length < 2)){
				if(args[0].equals("-url")){
					WorkflowManagerServiceClient client = new WorkflowManagerServiceClient(args[1]);
					// place client calls here if you want to use this main as a
					// test....

					String bpelFileName = "C:\\subversion_hawks\\subversion_hawks\\trunk\\grid-incubation\\test\\projects\\workflowManager\\resources\\bpelSamples\\first.bpel";
					String serviceURLFileName = "C:\\subversion_hawks\\subversion_hawks\\trunk\\grid-incubation\\test\\projects\\workflowManager\\resources\\bpelSamples\\first.urls.txt";

					String workflowBpelFileContent = null;
					String workflowServicesURLs = null;
					try{
						workflowBpelFileContent = FileUtil.readTextFile(bpelFileName);
						workflowServicesURLs = FileUtil.readTextFile(serviceURLFileName);
					}catch(IOException ioe){
						ioe.printStackTrace();
						System.exit(1);
					}
					System.out.println("File read!");

					System.out.println("Manager url = "+ args[1]);
					WorkflowManagerInstanceDescriptor workflowDescriptor = new WorkflowManagerInstanceDescriptor();
					workflowDescriptor.setBpelDescription(workflowBpelFileContent);
					workflowDescriptor.setServicesURLs(workflowServicesURLs);
					System.out.println("Before create workflow");
					WorkflowManagerInstanceReference managerInstanceReference = client.createWorkflowManagerInstance(workflowDescriptor, client.getEndpointReference());
					System.out.println("Get reference");
					WorkflowManagerInstanceClient managerInstanceClient = new WorkflowManagerInstanceClient(managerInstanceReference.getEndpointReference());
					
										
					//String[] outputs = managerInstanceClient.getOutputValues(); // TODO How will the Manager set the parameters' numeric identifier? 

					
					
					System.out.println("End client");

				} else {
					usage();
					System.exit(1);
				}
			} else {
				usage();
				System.exit(1);
			}
		} catch (Exception e) {
			e.printStackTrace();
			System.exit(1);
		}
	}

  public org.oasis.wsrf.properties.GetMultipleResourcePropertiesResponse getMultipleResourceProperties(org.oasis.wsrf.properties.GetMultipleResourceProperties_Element params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getMultipleResourceProperties");
    return portType.getMultipleResourceProperties(params);
    }
  }

  public org.oasis.wsrf.properties.GetResourcePropertyResponse getResourceProperty(javax.xml.namespace.QName params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getResourceProperty");
    return portType.getResourceProperty(params);
    }
  }

  public org.oasis.wsrf.properties.QueryResourcePropertiesResponse queryResourceProperties(org.oasis.wsrf.properties.QueryResourceProperties_Element params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"queryResourceProperties");
    return portType.queryResourceProperties(params);
    }
  }

  public org.cagrid.workflow.manager.instance.stubs.types.WorkflowManagerInstanceReference createWorkflowManagerInstance(org.cagrid.workflow.manager.descriptor.WorkflowManagerInstanceDescriptor workflowManagerInstanceDescriptor,org.apache.axis.message.addressing.EndpointReferenceType managerEPR) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"createWorkflowManagerInstance");
    org.cagrid.workflow.manager.stubs.CreateWorkflowManagerInstanceRequest params = new org.cagrid.workflow.manager.stubs.CreateWorkflowManagerInstanceRequest();
    org.cagrid.workflow.manager.stubs.CreateWorkflowManagerInstanceRequestWorkflowManagerInstanceDescriptor workflowManagerInstanceDescriptorContainer = new org.cagrid.workflow.manager.stubs.CreateWorkflowManagerInstanceRequestWorkflowManagerInstanceDescriptor();
    workflowManagerInstanceDescriptorContainer.setWorkflowManagerInstanceDescriptor(workflowManagerInstanceDescriptor);
    params.setWorkflowManagerInstanceDescriptor(workflowManagerInstanceDescriptorContainer);
    org.cagrid.workflow.manager.stubs.CreateWorkflowManagerInstanceRequestManagerEPR managerEPRContainer = new org.cagrid.workflow.manager.stubs.CreateWorkflowManagerInstanceRequestManagerEPR();
    managerEPRContainer.setEndpointReference(managerEPR);
    params.setManagerEPR(managerEPRContainer);
    org.cagrid.workflow.manager.stubs.CreateWorkflowManagerInstanceResponse boxedResult = portType.createWorkflowManagerInstance(params);
    return boxedResult.getWorkflowManagerInstanceReference();
    }
  }

}
