<?xml version="1.0"?>
<!-- ================================================================= -->
<!-- caGrid Master build file                                          -->
<!-- ================================================================= -->
<project name="caGrid-Incubation-Master" basedir="." default="all" xmlns:ivy="antlib:org.apache.ivy.ant">
	<dirname property="caGrid-Incubation-Master.basedir" file="${ant.file.caGrid-Incubation-Master}" />

	<!-- Give user the chance to override properties -->
	<property environment="env" />
	<property file="build.properties" />
	<!-- Load in project listings -->
	<property file="${caGrid-Incubation-Master.basedir}/project.properties" />

	<import file="antfiles/ivy/ivy-def.xml" />

	<!-- Layout info -->
	<property name="projects.dir" location="${caGrid-Incubation-Master.basedir}/projects" />
	<property name="test.dir" location="${caGrid-Incubation-Master.basedir}/test" />
	<property name="build.dir" location="${caGrid-Incubation-Master.basedir}/build" />
	<property name="antfiles.dir" location="${caGrid-Incubation-Master.basedir}/antfiles" />

	<property name="antfiles.lib.dir" location="${antfiles.dir}/lib" />
	<property name="test.lib.dir" location="${test.dir}/lib" />

	<condition property="isJDK1.5" value="true">
		<or>
			<equals arg1="${ant.java.version}" arg2="1.5" />
		</or>
	</condition>
	
	<condition property="isJDK1.6" value="true">
		<or>
			<equals arg1="${ant.java.version}" arg2="1.6" />
		</or>
	</condition>

	<!-- IMPORT THE UTILITIES TARGETS -->
	<import file="${antfiles.dir}/target-grid.xml" />

	<!-- IMPORT THE TEST TARGET -->
	<import file="${test.dir}/test.xml" />


	<target name="checkJDK15">
		<!-- Require Java 1.5 for caGrid 1.2 and 1.3 -->
		<fail message="JDK 1.5 is currently required to build this project!" unless="isJDK1.5" />
	</target>
	
	<target name="checkJDK16">
		<!-- Require Java 1.6 for caGrid 1.4 -->
		<fail message="JDK 1.6 is currently required to build this project!" unless="isJDK1.6" />
	</target>
	
	<!-- =============================================================== -->
	<!-- Bootstrap the build by setting up the structure                 -->
	<!-- =============================================================== -->
	<target name="prepare" depends="define-ant-tasks,build-projects-list">
		<tstamp />
	</target>


	<target name="define-ant-tasks" depends="init-ivy" unless="defined.anttasks">
		<taskdef resource="net/sf/antcontrib/antlib.xml" loaderref="artifact">
			<classpath>
				<fileset dir="${ant.library.dir}">
					<include name="ant.jar" />
				</fileset>
				<fileset dir="${antfiles.lib.dir}">
					<include name="ant-contrib*.jar" />
				</fileset>
			</classpath>
		</taskdef>
		<property name="defined.anttasks" value="true" />
	</target>

	<target name="build-projects-list">
		<ivy:buildlist reference="ivy.projects.list" ivyfilepath="ivy.xml" skipbuildwithoutivy="true">
			<fileset dir="${projects.dir}">
				<include name="*/dependencies-build.xml" />
			</fileset>
		</ivy:buildlist>
	</target>

	<target name="input-project-name">
		<input addproperty="single.project.name" message="Please enter the project name:" />
	</target>
	
	<target name="check-project-name">
		<fail unless="single.project.name" message="The expected property, 'single.project.name' was not defined!" />
		<condition property="single.project.name.invalid">
			<or>
				<equals arg1="${single.project.name}" arg2="" trim="true" />
				<not>
					<available file="${projects.dir}/${single.project.name}" type="dir" />
				</not>
	    	</or>
		</condition>
		<fail if="single.project.name.invalid" message="The expected property, 'single.project.name' was not defined as a valid project name!  The value was: [${single.project.name}]" />
	</target>


	<target name="build-project" depends="prepare,input-project-name,check-project-name">
		<echo message="Building ${single.project.name}, and all its dependencies (as necessary)." />

		<ivy:buildlist reference="single.ivy.project.list" root="${single.project.name}" skipbuildwithoutivy="true" ivyfilepath="ivy.xml">
			<fileset dir="${projects.dir}">
				<include name="*/dependencies-build.xml" />
			</fileset>
		</ivy:buildlist>

		<echo message="Computed build order is: ${ivy.sorted.modules}" />


		<subant target="publish" buildpathref="single.ivy.project.list">
			<property name="target.grid" value="${target.grid}" />
		</subant>

	</target>

	<target name="build-depending-on-project" depends="prepare,input-project-name,check-project-name">
		<echo message="Building all projects depending on ${single.project.name}.  Note, the depending projects' dependencies are not built, this should just be used to propagate changes to the given project for integration." />

		<ivy:buildlist reference="depending.on.single.ivy.project.list" leaf="${single.project.name}" skipbuildwithoutivy="true" ivyfilepath="ivy.xml">
			<fileset dir="${projects.dir}">
				<include name="*/dependencies-build.xml" />
			</fileset>
		</ivy:buildlist>


		<echo message="Computed build order is: ${ivy.sorted.modules}" />


		<subant target="publish" buildpathref="depending.on.single.ivy.project.list">
			<property name="target.grid" value="${target.grid}" />
		</subant>

	</target>

	<target name="set-project-versions" depends="prepare">
		<fail unless="project.version" message="You must provide a a value for the property [project.version]!" />
		<echo message="Setting all project versions to version ${project.version}" />

		<ivy:buildlist reference="ivy.project.properties.list" skipbuildwithoutivy="true" ivyfilepath="ivy.xml">
			<fileset dir="${projects.dir}">
				<include name="*/project.properties" />
			</fileset>
		</ivy:buildlist>

		<for parallel="true" param="project.properties.file" trim="true">
			<path refid="ivy.project.properties.list" />
			<sequential>
				<propertyfile file="@{project.properties.file}">
					<entry key="project.version" value="${project.version}" />
				</propertyfile>
			</sequential>
		</for>
	</target>


	<target name="all" depends="prepare,clean" description="compile, jar and publish all projects in the right order">
		
		<!-- build projects that depend on top-level ant/ivy configuration-->
		<for parallel="false" param="project.buildfile" trim="true">
			<path refid="ivy.projects.list" />
			<sequential>
				<dirname file="@{project.buildfile}" property="@{project.buildfile}.dir" />
				<ant inheritAll="false" inheritrefs="false" dir="${@{project.buildfile}.dir}" antfile="@{project.buildfile}" target="publish">
					<property name="target.grid" value="${target.grid}" />
				</ant>
			</sequential>
		</for>
		
		<!-- build projects that have their own set of projects and ant/ivy configurations -->
		<for list="${independent.projects}" parallel="false" param="project.name" trim="true">
	    	<sequential>
	            <echo message="Build project: @{project.name}." />
	    		<dirname file="@{project.buildfile}" property="@{project.name}.dir" />
	    		<ant inheritAll="false" dir="${basedir}/projects/@{project.name}" antfile="build.xml" target="all" />
	    	</sequential>
      	</for>
		
		<!-- mdr is a special case due to the eXist install -->
		<!--<for list="${mdr.project}" parallel="false" param="project.name" trim="true">
	    	<sequential>
	            <echo message="Testing project @{project.name}." />
	    		<dirname file="@{project.buildfile}" property="@{project.name}.dir" />
	    		<ant inheritAll="false" dir="${basedir}/projects/@{project.name}" antfile="build.xml" target="testBuild" />
	    	</sequential>
      	</for>-->
	</target>
	
	<target name="all:java5" depends="checkJDK15,prepare,clean" description="compile, jar and publish all caGrid 1.2 dependent projects in the right order">		
		<!-- build projects that have their own set of projects and ant/ivy configurations -->
		<for list="${java5.projects}" parallel="false" param="project.name" trim="true">
	    	<sequential>
	            <echo message="Build project: @{project.name}." />
	    		<dirname file="@{project.buildfile}" property="@{project.name}.dir" />
	    		<ant inheritAll="false" dir="${basedir}/projects/@{project.name}" antfile="build.xml" target="all" />
	    	</sequential>
      	</for>
	</target>	
	
	<target name="all:java6" depends="checkJDK16,prepare,clean" description="compile, jar and publish all caGrid 1.4 dependent projects in the right order">
		
		<!-- build projects that have their own set of projects and ant/ivy configurations -->
		<for list="${java6.projects}" parallel="false" param="project.name" trim="true">
	    	<sequential>
	            <echo message="Build project: @{project.name}." />
	    		<dirname file="@{project.buildfile}" property="@{project.name}.dir" />
	    		<ant inheritAll="false" dir="${basedir}/projects/@{project.name}" antfile="build.xml" target="all" />
	    	</sequential>
      	</for>
	</target>

	<target name="clean" depends="prepare" description="Delete repository, ivy cache, and clean all projects's generated and resolved artificats.">
		<delete dir="${integration.repository.dir}" />
		<ivy:cleancache />

		<for parallel="true" param="project.buildfile" trim="true" threadcount="10">
			<path refid="ivy.projects.list" />
			<sequential>
				<dirname file="@{project.buildfile}" property="@{project.buildfile}.dir" />
				<ant inheritAll="false" dir="${@{project.buildfile}.dir}" antfile="@{project.buildfile}" target="clean-dependencies" />
			</sequential>
		</for>
	</target>

    <target name="build-independent-projects" depends="prepare">
    	<for list="${independent.projects}" parallel="false" param="project.name" trim="true">
	    	<sequential>
	            <echo message="Testing project @{project.name}." />
	    		<dirname file="@{project.buildfile}" property="@{project.name}.dir" />
	    		<ant inheritAll="false" dir="${basedir}/projects/@{project.name}" antfile="build.xml" target="all" />
	    	</sequential>
      	</for>
    </target>

</project>
