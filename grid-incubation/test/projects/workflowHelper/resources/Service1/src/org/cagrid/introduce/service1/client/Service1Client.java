/**
*============================================================================
*  Copyright The Ohio State University Research Foundation, The University of Chicago - 
*	Argonne National Laboratory, Emory University, SemanticBits LLC, and 
*	Ekagra Software Technologies Ltd.
*
*  Distributed under the OSI-approved BSD 3-Clause License.
*  See http://ncip.github.com/cagrid-core/LICENSE.txt for details.
*============================================================================
**/
package org.cagrid.introduce.service1.client;

import java.io.InputStream;
import java.rmi.RemoteException;

import javax.xml.namespace.QName;

import org.apache.axis.EngineConfiguration;
import org.apache.axis.client.AxisClient;
import org.apache.axis.client.Stub;
import org.apache.axis.configuration.FileProvider;
import org.apache.axis.message.addressing.EndpointReferenceType;
import org.apache.axis.types.URI.MalformedURIException;

import org.oasis.wsrf.properties.GetResourcePropertyResponse;

import org.globus.gsi.GlobusCredential;

import org.cagrid.introduce.service1.stubs.Service1PortType;
import org.cagrid.introduce.service1.stubs.service.Service1ServiceAddressingLocator;
import org.cagrid.introduce.service1.common.Service1I;
import org.cagrid.worklfow.service1.types.StringAndItsLenght;

import gov.nih.nci.cagrid.introduce.security.client.ServiceSecurityClient;

/**
 * This class is autogenerated, DO NOT EDIT GENERATED GRID SERVICE ACCESS METHODS.
 *
 * This client is generated automatically by Introduce to provide a clean unwrapped API to the
 * service.
 *
 * On construction the class instance will contact the remote service and retrieve it's security
 * metadata description which it will use to configure the Stub specifically for each method call.
 * 
 * @created by Introduce Toolkit version 1.1
 */
public class Service1Client extends ServiceSecurityClient implements Service1I {	
	protected Service1PortType portType;
	private Object portTypeMutex;

	public Service1Client(String url) throws MalformedURIException, RemoteException {
		this(url,null);	
	}

	public Service1Client(String url, GlobusCredential proxy) throws MalformedURIException, RemoteException {
	   	super(url,proxy);
	   	initialize();
	}
	
	public Service1Client(EndpointReferenceType epr) throws MalformedURIException, RemoteException {
	   	this(epr,null);
	}
	
	public Service1Client(EndpointReferenceType epr, GlobusCredential proxy) throws MalformedURIException, RemoteException {
	   	super(epr,proxy);
		initialize();
	}
	
	private void initialize() throws RemoteException {
	    this.portTypeMutex = new Object();
		this.portType = createPortType();
	}

	private Service1PortType createPortType() throws RemoteException {

		Service1ServiceAddressingLocator locator = new Service1ServiceAddressingLocator();
		// attempt to load our context sensitive wsdd file
		InputStream resourceAsStream = getClass().getResourceAsStream("client-config.wsdd");
		if (resourceAsStream != null) {
			// we found it, so tell axis to configure an engine to use it
			EngineConfiguration engineConfig = new FileProvider(resourceAsStream);
			// set the engine of the locator
			locator.setEngine(new AxisClient(engineConfig));
		}
		Service1PortType port = null;
		try {
			port = locator.getService1PortTypePort(getEndpointReference());
		} catch (Exception e) {
			throw new RemoteException("Unable to locate portType:" + e.getMessage(), e);
		}

		return port;
	}
	

	public static void usage(){
		System.out.println(Service1Client.class.getName() + " -url <service url>");
	}
	
	public static void main(String [] args){
	    System.out.println("Running the Grid Service Client");
		try{
		if(!(args.length < 2)){
			if(args[0].equals("-url")){
			  Service1Client client = new Service1Client(args[1]);
			  // place client calls here if you want to use this main as a
			  // test....
			
			  
			  String input = "andre cardoso de souza";
			  
			  System.out.println("Sending string: "+input);
			  
			  StringAndItsLenght output = client.generateData(input);
			  
			  System.out.println("Received:");
			  System.out.println("string: "+output.getStr());
			  System.out.println("lenght: "+output.getLength());
			
			
			} else {
				usage();
				System.exit(1);
			}
		} else {
			usage();
			System.exit(1);
		}
		} catch (Exception e) {
			e.printStackTrace();
			System.exit(1);
		}
	}

  public org.cagrid.worklfow.service1.types.StringAndItsLenght generateData(java.lang.String info) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"generateData");
    org.cagrid.introduce.service1.stubs.GenerateDataRequest params = new org.cagrid.introduce.service1.stubs.GenerateDataRequest();
    params.setInfo(info);
    org.cagrid.introduce.service1.stubs.GenerateDataResponse boxedResult = portType.generateData(params);
    return boxedResult.getStringAndItsLenght();
    }
  }

  public org.cagrid.worklfow.service1.types.StringAndItsLenght secureGenerateData(java.lang.String info) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"secureGenerateData");
    org.cagrid.introduce.service1.stubs.SecureGenerateDataRequest params = new org.cagrid.introduce.service1.stubs.SecureGenerateDataRequest();
    params.setInfo(info);
    org.cagrid.introduce.service1.stubs.SecureGenerateDataResponse boxedResult = portType.secureGenerateData(params);
    return boxedResult.getStringAndItsLenght();
    }
  }

}
