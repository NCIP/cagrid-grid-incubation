/**
*============================================================================
*  The Ohio State University Research Foundation, Emory University,
*  the University of Minnesota Supercomputing Institute
*
*  Distributed under the OSI-approved BSD 3-Clause License.
*  See http://ncip.github.com/cagrid-grid-incubation/LICENSE.txt for details.
*============================================================================
**/
/**
*============================================================================
*============================================================================
**/
package org.cagrid.introduce.service4.client;

import java.io.InputStream;
import java.rmi.RemoteException;

import javax.xml.namespace.QName;

import org.apache.axis.EngineConfiguration;
import org.apache.axis.client.AxisClient;
import org.apache.axis.client.Stub;
import org.apache.axis.configuration.FileProvider;
import org.apache.axis.message.addressing.EndpointReferenceType;
import org.apache.axis.types.URI.MalformedURIException;

import org.oasis.wsrf.properties.GetResourcePropertyResponse;

import org.globus.gsi.GlobusCredential;

import org.cagrid.introduce.service4.stubs.Service4PortType;
import org.cagrid.introduce.service4.stubs.service.Service4ServiceAddressingLocator;
import org.cagrid.introduce.service4.common.Service4I;
import gov.nih.nci.cagrid.introduce.security.client.ServiceSecurityClient;

/**
 * This class is autogenerated, DO NOT EDIT GENERATED GRID SERVICE ACCESS METHODS.
 *
 * This client is generated automatically by Introduce to provide a clean unwrapped API to the
 * service.
 *
 * On construction the class instance will contact the remote service and retrieve it's security
 * metadata description which it will use to configure the Stub specifically for each method call.
 * 
 * @created by Introduce Toolkit version 1.1
 */
public class Service4Client extends ServiceSecurityClient implements Service4I {	
	protected Service4PortType portType;
	private Object portTypeMutex;

	public Service4Client(String url) throws MalformedURIException, RemoteException {
		this(url,null);	
	}

	public Service4Client(String url, GlobusCredential proxy) throws MalformedURIException, RemoteException {
	   	super(url,proxy);
	   	initialize();
	}
	
	public Service4Client(EndpointReferenceType epr) throws MalformedURIException, RemoteException {
	   	this(epr,null);
	}
	
	public Service4Client(EndpointReferenceType epr, GlobusCredential proxy) throws MalformedURIException, RemoteException {
	   	super(epr,proxy);
		initialize();
	}
	
	private void initialize() throws RemoteException {
	    this.portTypeMutex = new Object();
		this.portType = createPortType();
	}

	private Service4PortType createPortType() throws RemoteException {

		Service4ServiceAddressingLocator locator = new Service4ServiceAddressingLocator();
		// attempt to load our context sensitive wsdd file
		InputStream resourceAsStream = getClass().getResourceAsStream("client-config.wsdd");
		if (resourceAsStream != null) {
			// we found it, so tell axis to configure an engine to use it
			EngineConfiguration engineConfig = new FileProvider(resourceAsStream);
			// set the engine of the locator
			locator.setEngine(new AxisClient(engineConfig));
		}
		Service4PortType port = null;
		try {
			port = locator.getService4PortTypePort(getEndpointReference());
		} catch (Exception e) {
			throw new RemoteException("Unable to locate portType:" + e.getMessage(), e);
		}

		return port;
	}
	

	public static void usage(){
		System.out.println(Service4Client.class.getName() + " -url <service url>");
	}
	
	public static void main(String [] args){
	    System.out.println("Running the Grid Service Client");
		try{
		if(!(args.length < 2)){
			if(args[0].equals("-url")){
			  Service4Client client = new Service4Client(args[1]);
			  // place client calls here if you want to use this main as a
			  // test....
			  
			  
			  String str1 = "result1";
			  String str2 = "result2";
			  
			  System.out.println("Sending strings: ");
			  System.out.println(str1);
			  System.out.println(str2);
			  
			  String output = client.printResults(str1, str2);
			  
			  System.out.println("Received string: ");
			  System.out.println(output);
			  
			  
			} else {
				usage();
				System.exit(1);
			}
		} else {
			usage();
			System.exit(1);
		}
		} catch (Exception e) {
			e.printStackTrace();
			System.exit(1);
		}
	}

  public java.lang.String securePrintResults(java.lang.String result1,java.lang.String result2) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"securePrintResults");
    org.cagrid.introduce.service4.stubs.SecurePrintResultsRequest params = new org.cagrid.introduce.service4.stubs.SecurePrintResultsRequest();
    params.setResult1(result1);
    params.setResult2(result2);
    org.cagrid.introduce.service4.stubs.SecurePrintResultsResponse boxedResult = portType.securePrintResults(params);
    return boxedResult.getResponse();
    }
  }

  public java.lang.String printResults(java.lang.String result1,java.lang.String result2) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"printResults");
    org.cagrid.introduce.service4.stubs.PrintResultsRequest params = new org.cagrid.introduce.service4.stubs.PrintResultsRequest();
    params.setResult1(result1);
    params.setResult2(result2);
    org.cagrid.introduce.service4.stubs.PrintResultsResponse boxedResult = portType.printResults(params);
    return boxedResult.getResponse();
    }
  }

}
