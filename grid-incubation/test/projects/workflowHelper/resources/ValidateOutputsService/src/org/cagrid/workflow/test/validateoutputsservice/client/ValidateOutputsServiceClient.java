package org.cagrid.workflow.test.validateoutputsservice.client;

import java.io.InputStream;
import java.rmi.RemoteException;

import javax.xml.namespace.QName;

import org.apache.axis.EngineConfiguration;
import org.apache.axis.client.AxisClient;
import org.apache.axis.client.Stub;
import org.apache.axis.configuration.FileProvider;
import org.apache.axis.message.addressing.EndpointReferenceType;
import org.apache.axis.types.URI.MalformedURIException;

import org.oasis.wsrf.properties.GetResourcePropertyResponse;
import org.workflow.systemtests.types.ComplexType;

import org.globus.gsi.GlobusCredential;

import org.cagrid.workflow.test.validateoutputsservice.stubs.ValidateOutputsServicePortType;
import org.cagrid.workflow.test.validateoutputsservice.stubs.service.ValidateOutputsServiceAddressingLocator;
import org.cagrid.workflow.test.validateoutputsservice.common.ValidateOutputsServiceI;
import gov.nih.nci.cagrid.introduce.security.client.ServiceSecurityClient;

/**
 * This class is autogenerated, DO NOT EDIT GENERATED GRID SERVICE ACCESS METHODS.
 *
 * This client is generated automatically by Introduce to provide a clean unwrapped API to the
 * service.
 *
 * On construction the class instance will contact the remote service and retrieve it's security
 * metadata description which it will use to configure the Stub specifically for each method call.
 * 
 * @created by Introduce Toolkit version 1.2
 */
public class ValidateOutputsServiceClient extends ValidateOutputsServiceClientBase implements ValidateOutputsServiceI {	

	public ValidateOutputsServiceClient(String url) throws MalformedURIException, RemoteException {
		this(url,null);	
	}

	public ValidateOutputsServiceClient(String url, GlobusCredential proxy) throws MalformedURIException, RemoteException {
		super(url,proxy);
	}

	public ValidateOutputsServiceClient(EndpointReferenceType epr) throws MalformedURIException, RemoteException {
		this(epr,null);
	}

	public ValidateOutputsServiceClient(EndpointReferenceType epr, GlobusCredential proxy) throws MalformedURIException, RemoteException {
		super(epr,proxy);
	}

	public static void usage(){
		System.out.println(ValidateOutputsServiceClient.class.getName() + " -url <service url>");
	}

	public static void main(String [] args){
		System.out.println("Running the Grid Service Client");
		try{
			if(!(args.length < 2)){
				if(args[0].equals("-url")){
					ValidateOutputsServiceClient client = new ValidateOutputsServiceClient(args[1]);
					// place client calls here if you want to use this main as a
					// test....
					int length = 6;
					ComplexType[] test1Param2 = new ComplexType[length];
					String[] test2Param2 = new String[length];
					for(int i=0; i < length; i++){
						
						
						test1Param2[i] = new ComplexType(i, "Element "+i);
						test2Param2[i] = "number "+i;
					}
					client.validateTestOutput(999, test1Param2, true, 999, test2Param2, true);

				} else {
					usage();
					System.exit(1);
				}
			} else {
				usage();
				System.exit(1);
			}
		} catch (Exception e) {
			e.printStackTrace();
			System.exit(1);
		}
	}

  public org.oasis.wsrf.properties.GetMultipleResourcePropertiesResponse getMultipleResourceProperties(org.oasis.wsrf.properties.GetMultipleResourceProperties_Element params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getMultipleResourceProperties");
    return portType.getMultipleResourceProperties(params);
    }
  }

  public org.oasis.wsrf.properties.GetResourcePropertyResponse getResourceProperty(javax.xml.namespace.QName params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getResourceProperty");
    return portType.getResourceProperty(params);
    }
  }

  public org.oasis.wsrf.properties.QueryResourcePropertiesResponse queryResourceProperties(org.oasis.wsrf.properties.QueryResourceProperties_Element params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"queryResourceProperties");
    return portType.queryResourceProperties(params);
    }
  }

  public void validateTestOutput(int test1Param1,org.workflow.systemtests.types.ComplexType[] test1Param2,boolean test1Param3,int test2Param1,java.lang.String[] test2Param2,boolean test2Param3) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"validateTestOutput");
    org.cagrid.workflow.test.validateoutputsservice.stubs.ValidateTestOutputRequest params = new org.cagrid.workflow.test.validateoutputsservice.stubs.ValidateTestOutputRequest();
    params.setTest1Param1(test1Param1);
    org.cagrid.workflow.test.validateoutputsservice.stubs.ValidateTestOutputRequestTest1Param2 test1Param2Container = new org.cagrid.workflow.test.validateoutputsservice.stubs.ValidateTestOutputRequestTest1Param2();
    test1Param2Container.setComplexType(test1Param2);
    params.setTest1Param2(test1Param2Container);
    params.setTest1Param3(test1Param3);
    params.setTest2Param1(test2Param1);
    params.setTest2Param2(test2Param2);
    params.setTest2Param3(test2Param3);
    org.cagrid.workflow.test.validateoutputsservice.stubs.ValidateTestOutputResponse boxedResult = portType.validateTestOutput(params);
    }
  }

}
