package org.cagrid.introduce.service5.client;

import java.io.InputStream;
import java.rmi.RemoteException;

import javax.xml.namespace.QName;

import org.apache.axis.EngineConfiguration;
import org.apache.axis.client.AxisClient;
import org.apache.axis.client.Stub;
import org.apache.axis.configuration.FileProvider;
import org.apache.axis.message.addressing.EndpointReferenceType;
import org.apache.axis.types.URI.MalformedURIException;

import org.oasis.wsrf.properties.GetResourcePropertyResponse;

import org.globus.gsi.GlobusCredential;

import org.cagrid.introduce.service5.stubs.Service5PortType;
import org.cagrid.introduce.service5.stubs.service.Service5ServiceAddressingLocator;
import org.cagrid.introduce.service5.common.Service5I;
import org.cagrid.workflow.service1.types.StringAndItsLenght;

import gov.nih.nci.cagrid.introduce.security.client.ServiceSecurityClient;

/**
 * This class is autogenerated, DO NOT EDIT GENERATED GRID SERVICE ACCESS METHODS.
 *
 * This client is generated automatically by Introduce to provide a clean unwrapped API to the
 * service.
 *
 * On construction the class instance will contact the remote service and retrieve it's security
 * metadata description which it will use to configure the Stub specifically for each method call.
 * 
 * @created by Introduce Toolkit version 1.1
 */
public class Service5Client extends ServiceSecurityClient implements Service5I {	
	protected Service5PortType portType;
	private Object portTypeMutex;

	public Service5Client(String url) throws MalformedURIException, RemoteException {
		this(url,null);	
	}

	public Service5Client(String url, GlobusCredential proxy) throws MalformedURIException, RemoteException {
		super(url,proxy);
		initialize();
	}

	public Service5Client(EndpointReferenceType epr) throws MalformedURIException, RemoteException {
		this(epr,null);
	}

	public Service5Client(EndpointReferenceType epr, GlobusCredential proxy) throws MalformedURIException, RemoteException {
		super(epr,proxy);
		initialize();
	}

	private void initialize() throws RemoteException {
		this.portTypeMutex = new Object();
		this.portType = createPortType();
	}

	private Service5PortType createPortType() throws RemoteException {

		Service5ServiceAddressingLocator locator = new Service5ServiceAddressingLocator();
		// attempt to load our context sensitive wsdd file
		InputStream resourceAsStream = getClass().getResourceAsStream("client-config.wsdd");
		if (resourceAsStream != null) {
			// we found it, so tell axis to configure an engine to use it
			EngineConfiguration engineConfig = new FileProvider(resourceAsStream);
			// set the engine of the locator
			locator.setEngine(new AxisClient(engineConfig));
		}
		Service5PortType port = null;
		try {
			port = locator.getService5PortTypePort(getEndpointReference());
		} catch (Exception e) {
			throw new RemoteException("Unable to locate portType:" + e.getMessage(), e);
		}

		return port;
	}

	public static void usage(){
		System.out.println(Service5Client.class.getName() + " -url <service url>");
	}

	public static void main(String [] args){
		System.out.println("Running the Grid Service Client");
		try{
			if(!(args.length < 2)){
				if(args[0].equals("-url")){
					Service5Client client = new Service5Client(args[1]);
					// place client calls here if you want to use this main as a
					// test....

					String str = "My length is 15";
					int len = str.length();
					StringAndItsLenght string_len = new StringAndItsLenght(len, str);
					boolean valid = client.checkStringAndItsLength(string_len);

					if( valid ) System.out.println("The length of '" + str + "' is "+ len);
					else System.out.println("The length of '" + str + "' is NOT "+ len);

					len = str.length() + 1;
					string_len = new StringAndItsLenght(len, str);
					valid = client.checkStringAndItsLength(string_len);

					if( valid ) System.out.println("The length of '" + str + "' is "+ len);
					else System.out.println("The length of '" + str + "' is NOT "+ len);

				} else {
					usage();
					System.exit(1);
				}
			} else {
				usage();
				System.exit(1);
			}
		} catch (Exception e) {
			e.printStackTrace();
			System.exit(1);
		}
	}

  public boolean checkStringAndItsLength(org.cagrid.workflow.service1.types.StringAndItsLenght stringAndItsLenght) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"checkStringAndItsLength");
    org.cagrid.introduce.service5.stubs.CheckStringAndItsLengthRequest params = new org.cagrid.introduce.service5.stubs.CheckStringAndItsLengthRequest();
    org.cagrid.introduce.service5.stubs.CheckStringAndItsLengthRequestStringAndItsLenght stringAndItsLenghtContainer = new org.cagrid.introduce.service5.stubs.CheckStringAndItsLengthRequestStringAndItsLenght();
    stringAndItsLenghtContainer.setStringAndItsLenght(stringAndItsLenght);
    params.setStringAndItsLenght(stringAndItsLenghtContainer);
    org.cagrid.introduce.service5.stubs.CheckStringAndItsLengthResponse boxedResult = portType.checkStringAndItsLength(params);
    return boxedResult.isResponse();
    }
  }

}
