<?xml version="1.0" encoding="UTF-8" ?>
<process name="simpleWorflowProcess" targetNamespace="urn:gauss:gaussService" xmlns:tns="urn:gauss:gaussService" xmlns:add="http://www.mindswap.org/2002/services/add.wsdl" xmlns:multi="http://www.xmethods.net/sd/2001/multi.wsdl" xmlns:div="http://www.xmethods.net/sd/2001/div.wsdl" xmlns="http://schemas.xmlsoap.org/ws/2003/03/business-process/">
	<!--The <variables> section defines the data variables used by the process, providing their definitions in terms of WSDL message types, XML Schema simple types, or XML Schema elements. Variables allow processes to maintain state data and process history based on messages exchanged.-->
	<variables>
		<variable name="userRequest" messageType="tns:userRequest" />
		<variable name="userResponse" messageType="tns:userResponse" />
		<variable name="addReceive" messageType="add:AddRequest" />
		<variable name="addResponse" messageType="add:AddResponse" />
		<variable name="multiReceive" messageType="multi:MultiplyRequest" />
		<variable name="multiResponse" messageType="multi:MultiplyResponse" />
		<variable name="divReceive" messageType="div:DivideRequest" />
		<variable name="divResponse" messageType="div:DivideResponse" />
	</variables>
	<partnerLinks>
		<partnerLink name="User" partnerLinkType="tns:UserSLT" />
		<partnerLink name="addService" partnerLinkType="tns:addSLT" />
		<partnerLink name="multiService" partnerLinkType="tns:multiSLT" />
		<partnerLink name="divService" partnerLinkType="tns:divSLT" />
	</partnerLinks>
	<sequence name="sequence">
		- <!--get news request from the user-->
		<receive name="receiveRequest" partnerLink="User" portType="tns:gaussPT" operation="gauss" variable="userRequest" createInstance="yes" />
		<assign>
			<copy>
				<from expression="'1'" />
				<to variable="addReceive" part="op1" />
			</copy>
			<copy>
				<from variable="userRequest" part="input" />
				<to variable="addReceive" part="op2" />
			</copy>
		</assign>
		
		<!-- create input message required by news service -->
		<invoke name="invokeAdd" partnerLink="addService" portType="add:AddService" operation="Add" inputVariable="addReceive" outputVariable="addResponse" />
		<assign name="add2multi">
			<copy>
				<from variable="addResponse" part="AddReturn" />
				<to variable="multiReceive" part="op1" />
			</copy>
			<copy>
				<from variable="userRequest" part="input" />
				<to variable="multiReceive" part="op2" />
			</copy>
		</assign>

		<invoke name="invokeMulti" partnerLink="multiService" portType="multi:multiService" operation="Multiply" inputVariable="multiReceive" outputVariable="multiResponse" />
		<assign name="multi2div">
			<copy>
				<from variable="multiResponse" part="MultiplyReturn" />
				<to variable="divReceive" part="op1" />
			</copy>
			<copy>
				<from expression="'2'" />
				<to variable="divReceive" part="op2" />
			</copy>
		</assign>

		<invoke name="invokeDiv" partnerLink="divService" portType="div:divService" operation="Divide" inputVariable="divReceive" outputVariable="userResponse" />
				<!-- respond to the user -->
		<reply name="sendResult" partnerLink="User" portType="tns:gaussPT" operation="gauss" variable="userResponse" />
	</sequence>
</process>	
