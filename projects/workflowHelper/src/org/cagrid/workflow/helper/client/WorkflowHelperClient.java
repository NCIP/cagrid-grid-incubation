package org.cagrid.workflow.helper.client;

import gov.nih.nci.cagrid.common.security.ProxyUtil;

import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.List;

import javax.xml.namespace.QName;

import org.apache.axis.client.Stub;
import org.apache.axis.message.addressing.EndpointReference;
import org.apache.axis.message.addressing.EndpointReferenceType;
import org.apache.axis.types.URI.MalformedURIException;
import org.cagrid.gaards.cds.client.ClientConstants;
import org.cagrid.gaards.cds.client.DelegationUserClient;
import org.cagrid.gaards.cds.common.AllowedParties;
import org.cagrid.gaards.cds.common.IdentityDelegationPolicy;
import org.cagrid.gaards.cds.common.ProxyLifetime;
import org.cagrid.gaards.cds.delegated.stubs.types.DelegatedCredentialReference;
import org.cagrid.gaards.cds.stubs.types.CDSInternalFault;
import org.cagrid.gaards.cds.stubs.types.DelegationFault;
import org.cagrid.gaards.cds.stubs.types.PermissionDeniedFault;
import org.cagrid.workflow.helper.common.WorkflowHelperI;
import org.cagrid.workflow.helper.descriptor.AnonymousAuthenticationMethod;
import org.cagrid.workflow.helper.descriptor.CDSAuthenticationMethod;
import org.cagrid.workflow.helper.descriptor.ChannelProtection;
import org.cagrid.workflow.helper.descriptor.InputParameter;
import org.cagrid.workflow.helper.descriptor.InputParameterDescriptor;
import org.cagrid.workflow.helper.descriptor.OperationInputMessageDescriptor;
import org.cagrid.workflow.helper.descriptor.OperationOutputParameterTransportDescriptor;
import org.cagrid.workflow.helper.descriptor.OperationOutputTransportDescriptor;
import org.cagrid.workflow.helper.descriptor.SecureMessageInvocationSecurityDescriptor;
import org.cagrid.workflow.helper.descriptor.TLSInvocationSecurityDescriptor;
import org.cagrid.workflow.helper.descriptor.WorkflowInstanceHelperDescriptor;
import org.cagrid.workflow.helper.descriptor.WorkflowInvocationHelperDescriptor;
import org.cagrid.workflow.helper.descriptor.WorkflowInvocationSecurityDescriptor;
import org.cagrid.workflow.helper.instance.client.WorkflowInstanceHelperClient;
import org.cagrid.workflow.helper.invocation.client.WorkflowInvocationHelperClient;
import org.cagrid.workflow.helper.util.ServiceInvocationUtil;
import org.globus.gsi.GlobusCredential;
import org.globus.wsrf.impl.security.authorization.Authorization;

/**
 * This class is autogenerated, DO NOT EDIT GENERATED GRID SERVICE ACCESS METHODS.
 *
 * This client is generated automatically by Introduce to provide a clean unwrapped API to the
 * service.
 *
 * On construction the class instance will contact the remote service and retrieve it's security
 * metadata description which it will use to configure the Stub specifically for each method call.
 * 
 * @created by Introduce Toolkit version 1.2
 */
public class WorkflowHelperClient extends WorkflowHelperClientBase implements WorkflowHelperI {	

	public WorkflowHelperClient(String url) throws MalformedURIException, RemoteException {
		this(url,null);	
	}

	public WorkflowHelperClient(String url, GlobusCredential proxy) throws MalformedURIException, RemoteException {
		super(url,proxy);
	}

	public WorkflowHelperClient(EndpointReferenceType epr) throws MalformedURIException, RemoteException {
		this(epr,null);
	}

	public WorkflowHelperClient(EndpointReferenceType epr, GlobusCredential proxy) throws MalformedURIException, RemoteException {
		super(epr,proxy);
	}

	public static void usage(){
		System.out.println(WorkflowHelperClient.class.getName() + " -url <service url>");
	}

	public static void main(String [] args){
		System.out.println("Running the Grid Service Client");
		try{
			if(!(args.length < 2)){
				if(args[0].equals("-url")){
					WorkflowHelperClient client = new WorkflowHelperClient(args[1]);
					// place client calls here if you want to use this main as a
					// test....
					WorkflowHelperClient wf_helper = new WorkflowHelperClient(args[1]);

					System.out.println("args[0] = "+args[0]);
					System.out.println("args[1] = "+args[1]);
					// place client calls here if you want to use this main as a
					// test....

					//final String SOAP_NAMESPACE = "http://schemas.xmlsoap.org/soap/envelope/";
					final String XSD_NAMESPACE = "http://www.w3.org/2001/XMLSchema";
					final String SOAPENCODING_NAMESPACE = "http://schemas.xmlsoap.org/soap/encoding/";

					
					// Retrieve Helper credential
					String serviceCredentialFile = "C:\\Documents and Settings\\hawks\\Desktop\\caOSSecurityTests\\HelperCredential.txt";
					FileInputStream fis = new FileInputStream(new File(serviceCredentialFile));
					GlobusCredential serviceCredential = new GlobusCredential(fis);
					ProxyUtil.saveProxyAsDefault(serviceCredential);

					// Manager role: Delegate user credential to the Manager 
					String cds_URL = "https://localhost:8443/wsrf/services/cagrid/CredentialDelegationService";
					String userCredentialFile = "C:\\Documents and Settings\\hawks\\Desktop\\caOSSecurityTests\\credential.bin" ;
					InputStream is = new FileInputStream(new File(userCredentialFile));
					GlobusCredential userCredential = new GlobusCredential(is);
					System.out.println("Delegating user credential to the Helper"); //DEBUG
					EndpointReferenceType proxyEPR = delegateCredential(userCredential, wf_helper.getIdentity(), cds_URL, new ProxyLifetime(5,0,0), 
							new ProxyLifetime(6,0,0), 3, 2);

					
					// Get delegated credential from the user
					System.out.println("FakeManager retrieving delegated user credential"); //DEBUG
					GlobusCredential myCredential = ServiceInvocationUtil.getDelegatedCredential(new EndpointReference(proxyEPR));
					int containerPort = 8443;  // Unsecure container=8080 ; Secure container=8443
					wf_helper.setProxy(myCredential);

					ProxyLifetime delegationLifetime = new ProxyLifetime(4,0,0);
					ProxyLifetime issuedCredentialLifetime = new ProxyLifetime(5,0,0);
					int delegationPath = 1;
					int issuedCredentialPath = 0; 

					EndpointReference manager_epr = null; 

					/*** Testing arrays as services' input ***/

					/** complex type arrays **/
					/*org.cagrid.workflow.helper.descriptor.WorkflowInstanceHelperDescriptor workflowDescriptor1 = new org.cagrid.workflow.helper.descriptor.WorkflowInstanceHelperDescriptor();

					workflowDescriptor1.setWorkflowID("WorkFlow1");
					workflowDescriptor1.setWorkflowManagerEPR(manager_epr);

					// Get helper client so we can create the invocation helpers
					WorkflowInstanceHelperClient wf_instance1 = wf_helper.createWorkflowInstanceHelper(workflowDescriptor1);

					// BEGIN ReceiveArrayService::ReceiveComplexArray	

					String access_url = "http://localhost:"+containerPort+"/wsrf/services/cagrid/ReceiveArrayService";
					WorkflowInvocationHelperDescriptor operation2 = new WorkflowInvocationHelperDescriptor();
					operation2.setOperationQName(new QName("http://receivearrayservice.introduce.cagrid.org/ReceiveArrayService", "ReceiveComplexArrayRequest"));
					operation2.setServiceURL(access_url);
					//operation2.setOutput(); // This service has no output

					// DEBUG
					printDescriptor(operation2);

					// create ReceiveArrayService
					WorkflowInvocationHelperClient client2 = wf_instance1.createWorkflowInvocationHelper(operation2);

					// Creating Descriptor of the InputMessage
					org.cagrid.workflow.helper.descriptor.OperationInputMessageDescriptor inputMessage_ras = new OperationInputMessageDescriptor();
					InputParameterDescriptor[] inputParams_ras = new InputParameterDescriptor[3];
					inputParams_ras[0] = new InputParameterDescriptor(new QName("number"), new QName(XSD_NAMESPACE, "int"));
					inputParams_ras[1] = new InputParameterDescriptor(new QName("complexArray"), new QName("http://systemtests.workflow.cagrid.org/SystemTests", "ComplexType[]"));
					inputParams_ras[2] = new InputParameterDescriptor(new QName("booleanValue"), new QName(XSD_NAMESPACE, "boolean"));
					inputMessage_ras.setInputParam(inputParams_ras);
					client2.configureInput(inputMessage_ras);
					// End InputMessage Descriptor

					// Creating an empty outputDescriptor
					OperationOutputTransportDescriptor outputDescriptor_ras = new OperationOutputTransportDescriptor();
					OperationOutputParameterTransportDescriptor outParameterDescriptor_ras [] = new OperationOutputParameterTransportDescriptor[0];

					// takes the reference to no service
					outputDescriptor_ras.setParamDescriptor(outParameterDescriptor_ras);
					client2.configureOutput(outputDescriptor_ras);

					// Set the GlobusCredential to use on InstanceHelper
					GlobusCredential credential_instance1 = wf_instance1.getProxy();
					String instance1_id = credential_instance1.getIdentity();
					EndpointReferenceType delegationEPR1 = delegateCredential(instance1_id, cds_URL, delegationLifetime, myCredential, issuedCredentialLifetime, 
							delegationPath, issuedCredentialPath);
					wf_instance1.addCredential(client2.getEndpointReference(), delegationEPR1);

					// Set the values of its simple-type arguments
					client2.setParameter(new InputParameter("999", 0)); // number
					client2.setParameter(new InputParameter("true",2));  // booleanValue
					// END ReceiveArrayService::ReceiveComplexArray

					// BEGIN CreateArrayService::getComplexArray				
					org.cagrid.workflow.helper.descriptor.WorkflowInvocationHelperDescriptor operation_ca = new org.cagrid.workflow.helper.descriptor.WorkflowInvocationHelperDescriptor();
					access_url = "http://localhost:"+containerPort+"/wsrf/services/cagrid/CreateArrayService";
					operation_ca.setWorkflowID("GeorgeliusWorkFlow");
					operation_ca.setOperationQName(new QName("http://createarrayservice.introduce.cagrid.org/CreateArrayService", "GetComplexArrayRequest"));
					operation_ca.setServiceURL(access_url);
					operation_ca.setOutputType(new QName("http://systemtests.workflow.cagrid.org/SystemTests", "ComplexType[]"));

					// DEBUG
					printDescriptor(operation_ca);

					// create ReceiveArrayService		
					WorkflowInvocationHelperClient client_ca = wf_instance1.createWorkflowInvocationHelper(operation_ca);

					// Creating Descriptor of the InputMessage
					org.cagrid.workflow.helper.descriptor.OperationInputMessageDescriptor inputMessage_ca = new OperationInputMessageDescriptor();
					InputParameterDescriptor[] inputParams_ca = new InputParameterDescriptor[0];
					inputMessage_ca.setInputParam(inputParams_ca);
					client_ca.configureInput(inputMessage_ca);
					// End InputMessage Descriptor

					// Creating the outputDescriptor of the only service that will receive the output (ReceiveArrayService)
					OperationOutputTransportDescriptor outputDescriptor_ca = new OperationOutputTransportDescriptor();
					OperationOutputParameterTransportDescriptor outParameterDescriptor_ca [] = new OperationOutputParameterTransportDescriptor[1];

					// First destination: ReceiveArrayService::ReceiveComplexArray
					outParameterDescriptor_ca[0] = new OperationOutputParameterTransportDescriptor();
					outParameterDescriptor_ca[0].setParamIndex(1);
					outParameterDescriptor_ca[0].setType(new QName( SOAPENCODING_NAMESPACE ,"string[]"));
					outParameterDescriptor_ca[0].setQueryNamespaces(new QName[]{ new QName("http://createarrayservice.introduce.cagrid.org/CreateArrayService", "ns0"),
							new QName(XSD_NAMESPACE,"xsd")});
					outParameterDescriptor_ca[0].setLocationQuery("/ns0:GetComplexArrayResponse");
					outParameterDescriptor_ca[0].setDestinationEPR(new EndpointReferenceType[]{ client2.getEndpointReference() });

					// takes the reference to ReceiveComplexArrayService
					outputDescriptor_ca.setParamDescriptor(outParameterDescriptor_ca);
					client_ca.configureOutput(outputDescriptor_ca);

					// Set the GlobusCredential to use on InstanceHelper
					wf_instance1.addCredential(client_ca.getEndpointReference(), delegationEPR1);

					// END CreateArrayService::getComplexArray // */

					/** simple type arrays **/
					/*org.cagrid.workflow.helper.descriptor.WorkflowInstanceHelperDescriptor workflowDescriptor2 = new org.cagrid.workflow.helper.descriptor.WorkflowInstanceHelperDescriptor();

					workflowDescriptor2.setWorkflowID("WorkFlow2");
					workflowDescriptor2.setWorkflowManagerEPR(manager_epr);

					// Get helper client so we can create the invocation helpers
					WorkflowInstanceHelperClient wf_instance2 = wf_helper.createWorkflowInstanceHelper(workflowDescriptor2);

					// BEGIN ReceiveArrayService::ReceiveArrayAndMore
					org.cagrid.workflow.helper.descriptor.WorkflowInvocationHelperDescriptor operation_ram = new org.cagrid.workflow.helper.descriptor.WorkflowInvocationHelperDescriptor();
					operation_ram.setWorkflowID("GeorgeliusWorkFlow");
					operation_ram.setOperationQName(new QName("http://receivearrayservice.introduce.cagrid.org/ReceiveArrayService", "ReceiveArrayAndMoreRequest"));
					operation_ram.setServiceURL("http://localhost:8080/wsrf/services/cagrid/ReceiveArrayService");
					//operation_ram.setOutputType(); // Service has no output

					// DEBUG
					printDescriptor(operation_ram);

					// create ReceiveArrayService				
					WorkflowInvocationHelperClient serviceClient_ram = wf_instance2.createWorkflowInvocationHelper(operation_ram);

					// Creating Descriptor of the InputMessage
					org.cagrid.workflow.helper.descriptor.OperationInputMessageDescriptor inputMessage_ram = new OperationInputMessageDescriptor();
					InputParameterDescriptor[] inputParams_ram = new InputParameterDescriptor[3];
					inputParams_ram[0] = new InputParameterDescriptor(new QName("number"), new QName(XSD_NAMESPACE, "int"));
					inputParams_ram[1] = new InputParameterDescriptor(new QName("strArray"), new QName(XSD_NAMESPACE, "string[]"));
					inputParams_ram[2] = new InputParameterDescriptor(new QName("booleanValue"), new QName(XSD_NAMESPACE, "boolean"));
					inputMessage_ram.setInputParam(inputParams_ram);
					serviceClient_ram.configureInput(inputMessage_ram);
					// End InputMessage Descriptor

					// Creating an empty outputDescriptor
					OperationOutputTransportDescriptor outputDescriptor_ram = new OperationOutputTransportDescriptor();
					OperationOutputParameterTransportDescriptor outParameterDescriptor_ram [] = new OperationOutputParameterTransportDescriptor[0];

					// takes the reference to no service
					outputDescriptor_ram.setParamDescriptor(outParameterDescriptor_ram);
					serviceClient_ram.configureOutput(outputDescriptor_ram);

					// Set the GlobusCredential to use on InstanceHelper
					GlobusCredential credential_instance2 = wf_instance2.getProxy();
					String instance2_id = credential_instance2.getIdentity();
					EndpointReferenceType delegationEPR2 = delegateCredential(instance2_id, cds_URL, delegationLifetime, myCredential, issuedCredentialLifetime, 
							delegationPath, issuedCredentialPath);
					wf_instance2.addCredential(serviceClient_ram.getEndpointReference(), delegationEPR2);

					// Set the values of the two arguments of simple type
					serviceClient_ram.setParameter(new InputParameter("999", 0));
					serviceClient_ram.setParameter(new InputParameter("true",2));
					// END ReceiveArrayService::ReceiveArrayAndMore

					// BEGIN CreateArrayService				
					org.cagrid.workflow.helper.descriptor.WorkflowInvocationHelperDescriptor operation_cas = new org.cagrid.workflow.helper.descriptor.WorkflowInvocationHelperDescriptor();
					access_url = "http://localhost:8080/wsrf/services/cagrid/CreateArrayService";
					operation_cas.setWorkflowID("GeorgeliusWorkFlow");
					operation_cas.setOperationQName(new QName("http://createarrayservice.introduce.cagrid.org/CreateArrayService", "GetArrayRequest"));
					operation_cas.setServiceURL(access_url);
					operation_cas.setOutputType(new QName(SOAPENCODING_NAMESPACE, "string[]"));

					// DEBUG
					printDescriptor(operation_cas);

					// create ReceiveArrayService				
					WorkflowInvocationHelperClient serviceClient_cas = wf_instance2.createWorkflowInvocationHelper( operation_cas);

					// Creating Descriptor of the InputMessage
					org.cagrid.workflow.helper.descriptor.OperationInputMessageDescriptor inputMessage_cas = new OperationInputMessageDescriptor();
					InputParameterDescriptor[] inputParams_cas = new InputParameterDescriptor[0];
					inputMessage_cas.setInputParam(inputParams_cas);
					serviceClient_cas.configureInput(inputMessage_cas);
					// End InputMessage Descriptor

					// Creating the outputDescriptor of the only service that will receive the output (ReceiveArrayService)
					OperationOutputTransportDescriptor outputDescriptor_cas = new OperationOutputTransportDescriptor();
					OperationOutputParameterTransportDescriptor outParameterDescriptor_cas [] = new OperationOutputParameterTransportDescriptor[1];

					// First destination: ReceiveArrayService::ReceiveArrayAndMore
					outParameterDescriptor_cas[0] = new OperationOutputParameterTransportDescriptor();
					outParameterDescriptor_cas[0].setParamIndex(1);
					outParameterDescriptor_cas[0].setType(new QName( SOAPENCODING_NAMESPACE ,"string[]"));
					outParameterDescriptor_cas[0].setQueryNamespaces(new QName[]{ new QName("http://createarrayservice.introduce.cagrid.org/CreateArrayService", "ns0"),
							new QName(XSD_NAMESPACE,"xsd")});
					outParameterDescriptor_cas[0].setLocationQuery("/ns0:GetArrayResponse");
					outParameterDescriptor_cas[0].setDestinationEPR(new EndpointReferenceType[]{ serviceClient_ram.getEndpointReference()});

					// takes the reference to ReceiveArrayService
					outputDescriptor_cas.setParamDescriptor(outParameterDescriptor_cas);
					serviceClient_cas.configureOutput(outputDescriptor_cas);

					// Set the GlobusCredential to use on InstanceHelper
					wf_instance2.addCredential(serviceClient_cas.getEndpointReference(), delegationEPR2);

					// END CreateArrayService // */
					/** END test arrays **/

					/** FAN IN AND FAN OUT TEST **/
					/*org.cagrid.workflow.helper.descriptor.WorkflowInstanceHelperDescriptor workflowDescriptor3 = new org.cagrid.workflow.helper.descriptor.WorkflowInstanceHelperDescriptor();

					workflowDescriptor3.setWorkflowID("WorkFlow2");
					workflowDescriptor3.setWorkflowManagerEPR(manager_epr);

					// Get helper client so we can create the invocation helpers
					WorkflowInstanceHelperClient wf_instance3 = wf_helper.createWorkflowInstanceHelper(workflowDescriptor3);

					// BEGIN service 4				
					org.cagrid.workflow.helper.descriptor.WorkflowInvocationHelperDescriptor operation4 = new org.cagrid.workflow.helper.descriptor.WorkflowInvocationHelperDescriptor();

					java.lang.String acess_url = "http://localhost:8080/wsrf/services/cagrid/Service4";
					operation4.setWorkflowID("GeorgeliusWorkFlow");
					operation4.setOperationQName(new QName("http://service4.introduce.cagrid.org/Service4", "PrintResultsRequest"));
					operation4.setServiceURL(acess_url);

					// DEBUG
					printDescriptor(operation4);

					// Creating client of service 4
					WorkflowInvocationHelperClient serviceClient4 = wf_instance3.createWorkflowInvocationHelper(operation4);

					// Creating Descriptor of the InputMessage
					org.cagrid.workflow.helper.descriptor.OperationInputMessageDescriptor inputMessage4 = new OperationInputMessageDescriptor();
					InputParameterDescriptor[] inputParams4 = new InputParameterDescriptor[2];
					inputParams4[0] = new InputParameterDescriptor(new QName("result1"), new QName(XSD_NAMESPACE, "string"));
					inputParams4[1] = new InputParameterDescriptor(new QName("result2"), new QName(XSD_NAMESPACE, "string"));
					inputMessage4.setInputParam(inputParams4);
					serviceClient4.configureInput(inputMessage4);
					// End InputMessage Descriptor

					// Creating the outputDescriptor of the first Filter
					OperationOutputTransportDescriptor outputDescriptor4 = new OperationOutputTransportDescriptor();
					OperationOutputParameterTransportDescriptor outParameterDescriptor4 [] = new OperationOutputParameterTransportDescriptor[0];
					QName namespaces[] = null;

					// takes the reference to no service
					outputDescriptor4.setParamDescriptor(outParameterDescriptor4);
					serviceClient4.configureOutput(outputDescriptor4);

					// Set the GlobusCredential to use on InstanceHelper
					GlobusCredential credential_instance3 = wf_instance3.getProxy();
					String instance3_id = credential_instance3.getIdentity();
					EndpointReferenceType delegationEPR3 = delegateCredential(instance3_id, cds_URL, delegationLifetime, myCredential, issuedCredentialLifetime, 
							delegationPath, issuedCredentialPath);
					wf_instance3.addCredential(serviceClient4.getEndpointReference(), delegationEPR3);

					// TODO Get the output of this service
					// END service 4

					// BEGIN service 2				
					org.cagrid.workflow.helper.descriptor.WorkflowInvocationHelperDescriptor operation_2 = new org.cagrid.workflow.helper.descriptor.WorkflowInvocationHelperDescriptor();
					acess_url = "http://localhost:8080/wsrf/services/cagrid/Service2";
					operation_2.setWorkflowID("GeorgeliusWorkFlow");
					operation_2.setOperationQName(new QName("http://service2.introduce.cagrid.org/Service2", "CapitalizeRequest"));
					operation_2.setServiceURL(acess_url);
					operation_2.setOutputType(new QName(XSD_NAMESPACE, "string"));

					// DEBUG
					printDescriptor(operation_2);

					// create service 2				
					WorkflowInvocationHelperClient serviceClient2 = wf_instance3.createWorkflowInvocationHelper(operation_2);

					// Creating Descriptor of the InputMessage
					org.cagrid.workflow.helper.descriptor.OperationInputMessageDescriptor inputMessage_2 = new OperationInputMessageDescriptor();
					InputParameterDescriptor[] inputParams_2 = new InputParameterDescriptor[1];
					inputParams_2[0] = new InputParameterDescriptor( new QName("uncapitalized"), new QName(XSD_NAMESPACE, "string"));
					inputMessage_2.setInputParam(inputParams_2);
					serviceClient2.configureInput(inputMessage_2);
					// End InputMessage Descriptor

					// Creating the outputDescriptor of the first Filter
					OperationOutputTransportDescriptor outputDescriptor2 = new OperationOutputTransportDescriptor();
					OperationOutputParameterTransportDescriptor outParameterDescriptor2 [] = new OperationOutputParameterTransportDescriptor[1];
					outParameterDescriptor2[0] = new OperationOutputParameterTransportDescriptor();
					outParameterDescriptor2[0].setParamIndex(0);
					outParameterDescriptor2[0].setType(new QName("string"));
					namespaces = new QName[]{ new QName(XSD_NAMESPACE, "xsd"), new QName("http://service2.introduce.cagrid.org/Service2", "ns0"),
							new QName(XSD_NAMESPACE, "xsd")};
					outParameterDescriptor2[0].setQueryNamespaces(namespaces);
					outParameterDescriptor2[0].setLocationQuery("/ns0:CapitalizeResponse");

					// takes the reference to the service 4
					outParameterDescriptor2[0].setDestinationEPR(new EndpointReferenceType[]{ serviceClient4.getEndpointReference()});
					outputDescriptor2.setParamDescriptor(outParameterDescriptor2);
					serviceClient2.configureOutput(outputDescriptor2);

					// Set the GlobusCredential to use on InstanceHelper
					wf_instance3.addCredential(serviceClient2.getEndpointReference(), delegationEPR3);

					// END service 2

					// BEGIN service 3
					org.cagrid.workflow.helper.descriptor.WorkflowInvocationHelperDescriptor operation3 = new org.cagrid.workflow.helper.descriptor.WorkflowInvocationHelperDescriptor();
					acess_url = "http://localhost:8080/wsrf/services/cagrid/Service3";

					// This is the greek version of my name...
					operation3.setWorkflowID("GeorgeliusWorkFlow");
					operation3.setOperationQName(new QName("http://service3.introduce.cagrid.org/Service3", "GenerateXRequest"));
					operation3.setServiceURL(acess_url);
					operation3.setOutputType(new QName(XSD_NAMESPACE, "string"));

					printDescriptor(operation3);

					// create service 3				
					WorkflowInvocationHelperClient serviceClient3 = wf_instance3.createWorkflowInvocationHelper(operation3	);

					// Creating Descriptor of the InputMessage
					org.cagrid.workflow.helper.descriptor.OperationInputMessageDescriptor inputMessage3 = new OperationInputMessageDescriptor();
					InputParameterDescriptor[] inputParams3 = new InputParameterDescriptor[1];
					inputParams3[0] = new InputParameterDescriptor(new QName("str_length"), new QName(XSD_NAMESPACE, "int"));
					inputMessage3.setInputParam(inputParams3);
					serviceClient3.configureInput(inputMessage3);
					// End InputMessage Descriptor

					// Creating the outputDescriptor of the first Filter
					OperationOutputTransportDescriptor outputDescriptor3 = new OperationOutputTransportDescriptor();
					OperationOutputParameterTransportDescriptor outParameterDescriptor3 [] = new OperationOutputParameterTransportDescriptor[1];
					outParameterDescriptor3[0] = new OperationOutputParameterTransportDescriptor();
					outParameterDescriptor3[0].setParamIndex(1);
					outParameterDescriptor3[0].setType(new QName(XSD_NAMESPACE, "string"));
					namespaces = new QName[]{ new QName(XSD_NAMESPACE, "xsd"), new QName("http://service3.introduce.cagrid.org/Service3", "ns0"),
							new QName(XSD_NAMESPACE, "xsd")};
					outParameterDescriptor3[0].setQueryNamespaces(namespaces);
					outParameterDescriptor3[0].setLocationQuery("/ns0:GenerateXResponse"); 

					// takes the reference to the service 4
					outParameterDescriptor3[0].setDestinationEPR(new EndpointReferenceType[]{serviceClient4.getEndpointReference()});
					outputDescriptor3.setParamDescriptor(outParameterDescriptor3);
					serviceClient3.configureOutput(outputDescriptor3);

					// Set the GlobusCredential to use on InstanceHelper
					wf_instance3.addCredential(serviceClient3.getEndpointReference(), delegationEPR3);
					// END service 3				

					// BEGIN service 5				
					org.cagrid.workflow.helper.descriptor.WorkflowInvocationHelperDescriptor operation5 = new org.cagrid.workflow.helper.descriptor.WorkflowInvocationHelperDescriptor();

					acess_url = "http://localhost:8080/wsrf/services/cagrid/Service5";
					operation5.setWorkflowID("GeorgeliusWorkFlow");
					operation5.setOperationQName(new QName("http://service5.introduce.cagrid.org/Service5" , "CheckStringAndItsLengthRequest"));
					operation5.setServiceURL(acess_url);
					operation5.setOutputType(new QName(XSD_NAMESPACE, "boolean"));

					// DEBUG
					printDescriptor(operation5);

					// Creating client of service 5
					WorkflowInvocationHelperClient serviceClient5 = wf_instance3.createWorkflowInvocationHelper(operation5);

					// Creating Descriptor of the InputMessage
					org.cagrid.workflow.helper.descriptor.OperationInputMessageDescriptor inputMessage5 = new OperationInputMessageDescriptor();
					InputParameterDescriptor[] inputParams5 = new InputParameterDescriptor[1];
					inputParams5[0] = new InputParameterDescriptor(new QName("http://service1.workflow.cagrid.org/Service1", "stringAndItsLenght"), 
							new QName("http://service1.workflow.cagrid.org/Service1", "StringAndItsLength"));
					inputMessage5.setInputParam(inputParams5);
					serviceClient5.configureInput(inputMessage5);
					// End InputMessage Descriptor

					// Creating the outputDescriptor of the first Filter
					OperationOutputTransportDescriptor outputDescriptor5 = new OperationOutputTransportDescriptor();
					OperationOutputParameterTransportDescriptor outParameterDescriptor5 [] = new OperationOutputParameterTransportDescriptor[1];
					outParameterDescriptor5[0] = new OperationOutputParameterTransportDescriptor();
					outParameterDescriptor5[0].setParamIndex(0);
					outParameterDescriptor5[0].setType(new QName("string"));
					namespaces = new QName[]{ new QName(XSD_NAMESPACE, "xsd"), new QName("http://service5.introduce.cagrid.org/Service5", "ns0")};
					outParameterDescriptor5[0].setQueryNamespaces(namespaces);
					outParameterDescriptor5[0].setLocationQuery("/ns0:CheckStringAndItsLengthResponse");

					// takes the reference to no service
					outParameterDescriptor5[0].setDestinationEPR(null);
					outputDescriptor5.setParamDescriptor(outParameterDescriptor5);
					serviceClient5.configureOutput(outputDescriptor5);

					// Set the GlobusCredential to use on InstanceHelper
					wf_instance3.addCredential(serviceClient5.getEndpointReference(), delegationEPR3);

					// TODO Get the output of this service
					// END service 5

					// BEGIN service 1				
					org.cagrid.workflow.helper.descriptor.WorkflowInvocationHelperDescriptor operation1 = new org.cagrid.workflow.helper.descriptor.WorkflowInvocationHelperDescriptor();
					acess_url = "http://localhost:8080/wsrf/services/cagrid/Service1";
					operation1.setWorkflowID("GeorgeliusWorkFlow");
					operation1.setOperationQName(new QName("GenerateDataRequest"));
					operation1.setServiceURL(acess_url);
					operation1.setOutputType(new QName(XSD_NAMESPACE, "string"));

					// DEBUG
					printDescriptor(operation1);

					// create service 1				
					WorkflowInvocationHelperClient serviceClient1 = wf_instance3.createWorkflowInvocationHelper(operation1);

					// Creating Descriptor of the InputMessage
					org.cagrid.workflow.helper.descriptor.OperationInputMessageDescriptor inputMessage1 = new OperationInputMessageDescriptor();
					InputParameterDescriptor[] inputParams1 = new InputParameterDescriptor[1];
					inputParams1[0] = new InputParameterDescriptor(new QName("info"), new QName(XSD_NAMESPACE, "string"));
					inputMessage1.setInputParam(inputParams1);
					serviceClient1.configureInput(inputMessage1);
					// End InputMessage Descriptor

					// Creating the outputDescriptor of the first Filter (Service2)
					OperationOutputTransportDescriptor outputDescriptor1 = new OperationOutputTransportDescriptor();
					OperationOutputParameterTransportDescriptor outParameterDescriptor1 [] = new OperationOutputParameterTransportDescriptor[3];
					outParameterDescriptor1[0] = new OperationOutputParameterTransportDescriptor();
					outParameterDescriptor1[0].setParamIndex(0);
					outParameterDescriptor1[0].setType(new QName("string"));
					namespaces = new QName[]{ new QName(XSD_NAMESPACE, "xsd"), new QName("http://service1.introduce.cagrid.org/Service1", "ns0"),
							new QName("http://service1.workflow.cagrid.org/Service1", "ns1")};
					outParameterDescriptor1[0].setQueryNamespaces(namespaces);
					outParameterDescriptor1[0].setLocationQuery("/ns0:GenerateDataResponse/ns1:StringAndItsLenght/ns1:str"); 
					// takes the reference to the service 2
					outParameterDescriptor1[0].setDestinationEPR(new EndpointReferenceType[]{serviceClient2.getEndpointReference()});

					// Creating the outputDescriptor of the second filter (Service3)
					outParameterDescriptor1[1] = new OperationOutputParameterTransportDescriptor();
					outParameterDescriptor1[1].setParamIndex(0);
					outParameterDescriptor1[1].setType(new QName("int"));
					outParameterDescriptor1[1].setQueryNamespaces(namespaces);
					outParameterDescriptor1[1].setLocationQuery("/ns0:GenerateDataResponse/ns1:StringAndItsLenght/ns1:length");
					// takes the reference to the service 3
					outParameterDescriptor1[1].setDestinationEPR(new EndpointReferenceType[]{serviceClient3.getEndpointReference()});

					// Creating the outputDescriptor of the second filter (Service5)
					outParameterDescriptor1[2] = new OperationOutputParameterTransportDescriptor();
					outParameterDescriptor1[2].setParamIndex(0);
					outParameterDescriptor1[2].setType(new QName("http://service1.workflow.cagrid.org/Service1","StringAndItsLenght"));
					outParameterDescriptor1[2].setQueryNamespaces(namespaces);
					outParameterDescriptor1[2].setLocationQuery("/ns0:GenerateDataResponse/ns1:StringAndItsLenght");
					// takes the reference to the service 5
					outParameterDescriptor1[2].setDestinationEPR(new EndpointReferenceType[]{serviceClient5.getEndpointReference()});

					// parameters are all set at this point
					outputDescriptor1.setParamDescriptor(outParameterDescriptor1);
					serviceClient1.configureOutput(outputDescriptor1);

					// Set the GlobusCredential to use on InstanceHelper
					wf_instance3.addCredential(serviceClient1.getEndpointReference(), delegationEPR3);

					// set the only one parameter of this service.
					// now it have to run and set one Parameter of the service4
					String workflow_input = "george teadoro gordao que falou";
					System.out.println("Setting input for service 1: '"+workflow_input+"'");
					InputParameter inputService1 = new InputParameter(workflow_input, 0);
					serviceClient1.setParameter(inputService1);
					// END service 1 // */
					/** END FAN IN AND FAN OUT TEST **/

					/** BEGIN streaming test **/

					/* Streaming simple types */
					/*org.cagrid.workflow.helper.descriptor.WorkflowInstanceHelperDescriptor workflowDescriptor5 = new org.cagrid.workflow.helper.descriptor.WorkflowInstanceHelperDescriptor();

					workflowDescriptor5.setWorkflowID("WorkFlow5");
					workflowDescriptor5.setWorkflowManagerEPR(manager_epr);

					// Get helper client so we can create the invocation helpers
					WorkflowInstanceHelperClient wf_instance5 = wf_helper.createWorkflowInstanceHelper(workflowDescriptor5);

					// BEGIN service 4
					WorkflowInvocationHelperDescriptor operation_4 = new WorkflowInvocationHelperDescriptor();
					operation_4.setOperationQName(new QName("http://service4.introduce.cagrid.org/Service4", "PrintResultsRequest"));
					operation_4.setServiceURL("http://localhost:8080/wsrf/services/cagrid/Service4");
					// operation_4.setOutputType(); // Void output expected

					// Creating client of service 4
					WorkflowInvocationHelperClient serviceClient_4 = wf_instance5.createWorkflowInvocationHelper(operation_4);

					// Creating Descriptor of the InputMessage
					OperationInputMessageDescriptor inputMessage_4 = new OperationInputMessageDescriptor();
					InputParameterDescriptor[] inputParam_4 = new InputParameterDescriptor[2];
					inputParam_4[0] = new InputParameterDescriptor(new QName("result1"), new QName(XSD_NAMESPACE, "string"));
					inputParam_4[1] = new InputParameterDescriptor(new QName("result2"), new QName(XSD_NAMESPACE, "string"));
					inputMessage_4.setInputParam(inputParam_4);
					serviceClient_4.configureInput(inputMessage_4);
					// End InputMessage Descriptor

					OperationOutputTransportDescriptor outputDescriptor_4 = new OperationOutputTransportDescriptor(); 
					OperationOutputParameterTransportDescriptor[] outParameterDescriptor_4 = new OperationOutputParameterTransportDescriptor[0];

					// Setting output descriptor
					outputDescriptor_4.setParamDescriptor(outParameterDescriptor_4);
					serviceClient_4.configureOutput(outputDescriptor_4);

					// Set the GlobusCredential to use on InstanceHelper
					GlobusCredential credential_instance5 = wf_instance5.getProxy();
					String instance5_id = credential_instance5.getIdentity();
					EndpointReferenceType delegationEPR5 = delegateCredential(instance5_id, cds_URL, delegationLifetime, myCredential, issuedCredentialLifetime, 
							delegationPath, issuedCredentialPath);
					wf_instance5.addCredential(serviceClient_4.getEndpointReference(), delegationEPR5);

					// Setting second parameter
					serviceClient_4.setParameter(new InputParameter("simple type's streaming", 1));
					// END service 4

					// BEGIN service 2				
					// create service 2
					WorkflowInvocationHelperDescriptor operation__2 = new WorkflowInvocationHelperDescriptor();
					operation__2.setOperationQName(new QName("http://service2.introduce.cagrid.org/Service2", "CapitalizeRequest"));
					operation__2.setServiceURL("http://localhost:8080/wsrf/services/cagrid/Service2");
					operation__2.setOutputType(new QName(XSD_NAMESPACE, "string"));
					WorkflowInvocationHelperClient serviceClient_2 = wf_instance5.createWorkflowInvocationHelper(operation__2);

					// Creating Descriptor of the InputMessage
					OperationInputMessageDescriptor inputMessage__2 = new OperationInputMessageDescriptor();
					InputParameterDescriptor[] inputParam__2 = new InputParameterDescriptor[1];
					inputParam__2[0] = new InputParameterDescriptor(new QName("uncapitalized"), new QName(XSD_NAMESPACE, "string"));
					inputMessage__2.setInputParam(inputParam__2 );
					serviceClient_2.configureInput(inputMessage__2);
					// End InputMessage Descriptor

					// takes the reference to Service4
					OperationOutputTransportDescriptor outputDescriptor__2 = new OperationOutputTransportDescriptor();
					OperationOutputParameterTransportDescriptor outParameterDescriptor__2 [] = new OperationOutputParameterTransportDescriptor[1];
					outParameterDescriptor__2[0] = new OperationOutputParameterTransportDescriptor();
					outParameterDescriptor__2[0].setParamIndex(0);
					outParameterDescriptor__2[0].setType(new QName(XSD_NAMESPACE, "string"));
					QName[] namespaces__2 = new QName[]{ new QName(XSD_NAMESPACE, "xsd"), new QName("http://service2.introduce.cagrid.org/Service2", "ns0"),
							new QName(XSD_NAMESPACE, "xsd")};
					outParameterDescriptor__2[0].setQueryNamespaces(namespaces__2);
					outParameterDescriptor__2[0].setLocationQuery("/ns0:CapitalizeResponse");
					outParameterDescriptor__2[0].setDestinationEPR(new EndpointReferenceType[]{serviceClient_4.getEndpointReference()});

					outputDescriptor__2.setParamDescriptor(outParameterDescriptor__2);
					serviceClient_2.configureOutput(outputDescriptor__2);

					// Set the GlobusCredential to use on InstanceHelper
					wf_instance5.addCredential(serviceClient_2.getEndpointReference(), delegationEPR5);

					// END service 2

					// BEGIN CreateArrayService				
					// create CreateArrayService	
					org.cagrid.workflow.helper.descriptor.WorkflowInvocationHelperDescriptor operation__cas = new org.cagrid.workflow.helper.descriptor.WorkflowInvocationHelperDescriptor();
					operation__cas.setWorkflowID("GeorgeliusWorkFlow");
					operation__cas.setOperationQName(new QName("http://createarrayservice.introduce.cagrid.org/CreateArrayService", "GetArrayRequest"));
					operation__cas.setServiceURL("http://localhost:8080/wsrf/services/cagrid/CreateArrayService");
					operation__cas.setOutputType(new QName(SOAPENCODING_NAMESPACE, "string[]"));
					WorkflowInvocationHelperClient serviceClient_cs = wf_instance5.createWorkflowInvocationHelper(operation__cas);

					// Creating Descriptor of the InputMessage
					org.cagrid.workflow.helper.descriptor.OperationInputMessageDescriptor inputMessage__cas = new OperationInputMessageDescriptor();
					InputParameterDescriptor[] inputParams__cas = new InputParameterDescriptor[0];
					inputMessage__cas.setInputParam(inputParams__cas);
					serviceClient_cs.configureInput(inputMessage__cas);
					// End InputMessage Descriptor

					// Creating the outputDescriptor of the only service that will receive the output (Service2::capitalize)
					OperationOutputTransportDescriptor outputDescriptor_cs = new OperationOutputTransportDescriptor();
					OperationOutputParameterTransportDescriptor outParameterDescriptor_cs [] = new OperationOutputParameterTransportDescriptor[1];

					// First destination: Service2::capitalize
					outParameterDescriptor_cs[0] = new OperationOutputParameterTransportDescriptor();
					outParameterDescriptor_cs[0].setParamIndex(0);
					outParameterDescriptor_cs[0].setType(new QName( SOAPENCODING_NAMESPACE, "string"));
					outParameterDescriptor_cs[0].setQueryNamespaces(new QName[]{ new QName("http://createarrayservice.introduce.cagrid.org/CreateArrayService", "ns0"),
							new QName(XSD_NAMESPACE,"xsd")});
					outParameterDescriptor_cs[0].setLocationQuery("/ns0:GetArrayResponse");
					outParameterDescriptor_cs[0].setDestinationEPR(new EndpointReferenceType[]{serviceClient_2.getEndpointReference()});  // takes the reference to Service2::capitalize

					outputDescriptor_cs.setParamDescriptor(outParameterDescriptor_cs);
					serviceClient_cs.configureOutput(outputDescriptor_cs);

					// Set the GlobusCredential to use on InstanceHelper
					wf_instance5.addCredential(serviceClient_cs.getEndpointReference(), delegationEPR5);

					// END CreateArrayService // */

					/* Streaming complex types */

					// BEGIN service 4				
					// Creating client of service 4
					/*WorkflowInvocationHelperClient serviceClient__4 = wf_instance5.createWorkflowInvocationHelper(operation4);

					// Creating Descriptor of the InputMessage
					serviceClient__4.configureInput(inputMessage4);
					// End InputMessage Descriptor

					// Setting output descriptor
					outputDescriptor4.setParamDescriptor(outParameterDescriptor4);
					serviceClient__4.configureOutput(outputDescriptor4);

					// Set the GlobusCredential to use on InstanceHelper
					wf_instance5.addCredential(serviceClient__4.getEndpointReference(), delegationEPR5);

					// Setting second parameter
					serviceClient__4.setParameter(new InputParameter("complex type's streaming", 1));
					// END service 4

					// BEGIN CreateArrayService::getComplexArray				
					org.cagrid.workflow.helper.descriptor.WorkflowInvocationHelperDescriptor operation__ca = new org.cagrid.workflow.helper.descriptor.WorkflowInvocationHelperDescriptor();
					access_url = "http://localhost:8080/wsrf/services/cagrid/CreateArrayService";
					operation__ca.setWorkflowID("GeorgeliusWorkFlow");
					operation__ca.setOperationQName(new QName("http://createarrayservice.introduce.cagrid.org/CreateArrayService", "GetComplexArrayRequest"));
					operation__ca.setServiceURL(access_url);
					operation__ca.setOutputType(new QName("http://systemtests.workflow.cagrid.org/SystemTests", "ComplexType[]"));

					// DEBUG
					printDescriptor(operation__ca);

					// create ReceiveArrayService				
					WorkflowInvocationHelperClient serviceClient__ca = wf_instance5.createWorkflowInvocationHelper(operation__ca);

					// Creating Descriptor of the InputMessage
					org.cagrid.workflow.helper.descriptor.OperationInputMessageDescriptor inputMessage__ca = new OperationInputMessageDescriptor();
					InputParameterDescriptor[] inputParams__ca = new InputParameterDescriptor[0];
					inputMessage__ca.setInputParam(inputParams__ca);
					serviceClient__ca.configureInput(inputMessage__ca);
					// End InputMessage Descriptor

					// Creating the outputDescriptor of the only service that will receive the output (ReceiveArrayService)
					OperationOutputTransportDescriptor outputDescriptor__ca = new OperationOutputTransportDescriptor();
					OperationOutputParameterTransportDescriptor outParameterDescriptor__ca [] = new OperationOutputParameterTransportDescriptor[1];

					// First destination: ReceiveArrayService::ReceiveComplexArray
					outParameterDescriptor__ca[0] = new OperationOutputParameterTransportDescriptor();
					outParameterDescriptor__ca[0].setParamIndex(0);
					outParameterDescriptor__ca[0].setType(new QName(XSD_NAMESPACE ,"string"));
					outParameterDescriptor__ca[0].setQueryNamespaces(new QName[]{ new QName("http://createarrayservice.introduce.cagrid.org/CreateArrayService", "ns0"),
							new QName(XSD_NAMESPACE,"xsd"), new QName("http://systemtests.workflow.cagrid.org/SystemTests", "abc")});
					outParameterDescriptor__ca[0].setLocationQuery("/ns0:GetComplexArrayResponse/abc:ComplexType/abc:message");
					outParameterDescriptor__ca[0].setDestinationEPR(new EndpointReferenceType[]{serviceClient__4.getEndpointReference()});

					// takes the reference to ReceiveComplexArrayService
					outputDescriptor__ca.setParamDescriptor(outParameterDescriptor__ca);
					serviceClient__ca.configureOutput(outputDescriptor__ca);

					// Set the GlobusCredential to use on InstanceHelper
					wf_instance5.addCredential(serviceClient__ca.getEndpointReference(), delegationEPR5);

					// END CreateArrayService::getComplexArray // */

					/** END streaming test **/

					
					
					
					
					
					/** SecureHelloWorld invocation **/
					WorkflowInstanceHelperDescriptor workflowDescriptor6 = new WorkflowInstanceHelperDescriptor();
					workflowDescriptor6.setWorkflowID("WorkFlow1");
					workflowDescriptor6.setWorkflowManagerEPR(manager_epr);

					// Get helper client so we can create the invocation helpers
					WorkflowInstanceHelperClient wf_instance6 = wf_helper.createWorkflowInstanceHelper(workflowDescriptor6);


					
					String access_url6 = "http://localhost:8443/wsrf/services/cagrid/HelloWorldSecure";
					WorkflowInvocationHelperDescriptor operation6 = new WorkflowInvocationHelperDescriptor();
					operation6.setOperationQName(new QName("http://helloworld.cagrid.org/HelloWorldSecure", "NewMethodSecureRequest"));
					operation6.setServiceURL(access_url6);
					operation6.setOutputType(new QName(XSD_NAMESPACE, "byte"));
					
					// Configure security for service-operation invocation
					WorkflowInvocationSecurityDescriptor sec_desc = new WorkflowInvocationSecurityDescriptor(); 
					TLSInvocationSecurityDescriptor tls = new TLSInvocationSecurityDescriptor();
					CDSAuthenticationMethod CDSAuthenticationMethod = new CDSAuthenticationMethod(new EndpointReference(cds_URL)); // TODO What this EPR actually stands for?
					tls.setChannelProtection(ChannelProtection.Privacy);
					tls.setCDSAuthenticationMethod(CDSAuthenticationMethod);

					operation6.setWorkflowInvocationSecurityDescriptor(sec_desc);

					
					// DEBUG
					printDescriptor(operation6);

										// create ReceiveArrayService
					WorkflowInvocationHelperClient client6 = wf_instance6.createWorkflowInvocationHelper(operation6);

					// Creating Descriptor of the InputMessage
					org.cagrid.workflow.helper.descriptor.OperationInputMessageDescriptor inputMessage6 = new OperationInputMessageDescriptor();
					InputParameterDescriptor[] inputParams6 = new InputParameterDescriptor[1];
					inputParams6[0] = new InputParameterDescriptor(new QName("_byte"), new QName(XSD_NAMESPACE, "byte"));
					inputMessage6.setInputParam(inputParams6);
					client6.configureInput(inputMessage6);
					// End InputMessage Descriptor

					// Creating an empty outputDescriptor
					OperationOutputTransportDescriptor outputDescriptor6 = new OperationOutputTransportDescriptor();
					OperationOutputParameterTransportDescriptor outParameterDescriptor6 [] = new OperationOutputParameterTransportDescriptor[0];

					// takes the reference to no service
					outputDescriptor6.setParamDescriptor(outParameterDescriptor6);
					client6.configureOutput(outputDescriptor6);

					
					//DEBUG
					System.out.println("I/O configuration done, proceeding to add the credential");
					System.out.flush();

					
					// Set the GlobusCredential to use on InstanceHelper
					String instance6_id = wf_helper.getIdentity();
					System.out.println("Delegating helper's credential to the InstanceHelper"); //DEBUG
					EndpointReferenceType delegationEPR6 = delegateCredential(myCredential, instance6_id, cds_URL, delegationLifetime, issuedCredentialLifetime, 
							delegationPath, issuedCredentialPath);
					
					wf_instance6.addCredential(client6.getEndpointReference(), delegationEPR6);

					//DEBUG
					System.out.println("Credential added");
					System.out.flush();

					// Set the single parameter of this service
					client6.setParameter(new InputParameter("121", 0));

					//DEBUG
					System.out.println("Parameter set");
					System.out.flush();
					/** END SecureHelloWorld invocation **/

					return;

				} else {
					usage();
					System.exit(1);
				}
			} else {
				usage();
				System.exit(1);
			}
		} catch (Exception e) {
			e.printStackTrace();
			System.exit(1);
		}
	}

	
	
	/** Delegate a credential to a specific grid identity
	 * 
	 * @param delegatee Grid identity of the service the credential will be delegated to
	 * @param cdsURL The Service URL of the Credential Delegation Service (CDS)
	 * @param toDelegate GlobusCredential to delegate
	 * @param issuedCredentialLifetime Specifies the how long credentials issued to allowed parties will be valid for. 
	 * @param delegationPathLength Path length of the credential being delegated. The minimum is 1.
	 * @param issuedCredentialPathLength Path length of the credentials issued to allowed parties. A path length of 0 means that the requesting party cannot further delegate the credential.
	 * @return 
	 * */
	private static EndpointReferenceType delegateCredential(GlobusCredential toDelegate, String delegatee, String cdsURL, ProxyLifetime delegationLifetime, 
			ProxyLifetime issuedCredentialLifetime, int delegationPathLength, int issuedCredentialPathLength){

		//DEBUG
		System.out.println("BEGIN delegateCredential");
		System.out.println("delegatee: "+ delegatee);
		System.out.println("delegator: "+ toDelegate.getIdentity());
		System.out.println("Delegation lenght: "+ delegationPathLength);
		System.out.println("Issued Credential lenght: "+ issuedCredentialPathLength);
		

		//Specifies the key length of the delegated credential
		int keySize = ClientConstants.DEFAULT_KEY_SIZE;

		//The policy stating which parties will be allowed to obtain a delegated credential. The CDS will only 
		//issue credentials to parties listed in this policy.

		List<String> parties = new ArrayList<String>();
		parties.add(delegatee);  
		AllowedParties allowed_parties = new AllowedParties(parties.toArray(new String[parties.size()]));
		IdentityDelegationPolicy policy = new IdentityDelegationPolicy(allowed_parties );  

		//Create an instance of the delegation client, specifies the CDS Service URL and the credential 
		//to be delegated.

		DelegationUserClient client = null;
		try {
			client = new DelegationUserClient(cdsURL, toDelegate);
		} catch (Exception e) {
			e.printStackTrace();
		}

		//Delegates the credential and returns a reference which can later be used by allowed parties to 
		//obtain a credential.
		DelegatedCredentialReference ref = null;
		try {
			ref = client.delegateCredential(delegationLifetime, delegationPathLength, policy,
					issuedCredentialLifetime, issuedCredentialPathLength, keySize);
		} catch (CDSInternalFault e) {
			e.printStackTrace();
		} catch (DelegationFault e) {
			e.printStackTrace();
		} catch (PermissionDeniedFault e) {
			e.printStackTrace();
		} catch (RemoteException e) {
			e.printStackTrace();
		} catch (MalformedURIException e) {
			e.printStackTrace();
		}

		//DEBUG
		System.out.println("END delegateCredential");

		return ref.getEndpointReference();
	}

	public static void printDescriptor(org.cagrid.workflow.helper.descriptor.WorkflowInvocationHelperDescriptor workflowDescriptor){
		System.out.println("Printing Descriptor content");
		System.out.println("ID = "+workflowDescriptor.getWorkflowID());
		System.out.println("URL = "+workflowDescriptor.getServiceURL());
		if(workflowDescriptor.getOperationQName() != null){
			System.out.println( "OperationQname = "+ workflowDescriptor.getOperationQName().toString());
		}else{
			return;
		}
	}

  public org.oasis.wsrf.properties.GetMultipleResourcePropertiesResponse getMultipleResourceProperties(org.oasis.wsrf.properties.GetMultipleResourceProperties_Element params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getMultipleResourceProperties");
    return portType.getMultipleResourceProperties(params);
    }
  }

  public org.oasis.wsrf.properties.GetResourcePropertyResponse getResourceProperty(javax.xml.namespace.QName params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getResourceProperty");
    return portType.getResourceProperty(params);
    }
  }

  public org.oasis.wsrf.properties.QueryResourcePropertiesResponse queryResourceProperties(org.oasis.wsrf.properties.QueryResourceProperties_Element params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"queryResourceProperties");
    return portType.queryResourceProperties(params);
    }
  }

  public org.cagrid.workflow.helper.instance.client.WorkflowInstanceHelperClient createWorkflowInstanceHelper(org.cagrid.workflow.helper.descriptor.WorkflowInstanceHelperDescriptor workflowInstanceHelperDescriptor) throws RemoteException, org.apache.axis.types.URI.MalformedURIException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"createWorkflowInstanceHelper");
    org.cagrid.workflow.helper.stubs.CreateWorkflowInstanceHelperRequest params = new org.cagrid.workflow.helper.stubs.CreateWorkflowInstanceHelperRequest();
    org.cagrid.workflow.helper.stubs.CreateWorkflowInstanceHelperRequestWorkflowInstanceHelperDescriptor workflowInstanceHelperDescriptorContainer = new org.cagrid.workflow.helper.stubs.CreateWorkflowInstanceHelperRequestWorkflowInstanceHelperDescriptor();
    workflowInstanceHelperDescriptorContainer.setWorkflowInstanceHelperDescriptor(workflowInstanceHelperDescriptor);
    params.setWorkflowInstanceHelperDescriptor(workflowInstanceHelperDescriptorContainer);
    org.cagrid.workflow.helper.stubs.CreateWorkflowInstanceHelperResponse boxedResult = portType.createWorkflowInstanceHelper(params);
    EndpointReferenceType ref = boxedResult.getWorkflowInstanceHelperReference().getEndpointReference();
    return new org.cagrid.workflow.helper.instance.client.WorkflowInstanceHelperClient(ref);
    }
  }

  public java.lang.String getIdentity() throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getIdentity");
    org.cagrid.workflow.helper.stubs.GetIdentityRequest params = new org.cagrid.workflow.helper.stubs.GetIdentityRequest();
    org.cagrid.workflow.helper.stubs.GetIdentityResponse boxedResult = portType.getIdentity(params);
    return boxedResult.getResponse();
    }
  }

}
