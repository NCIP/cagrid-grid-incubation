<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns="gme://gov.nih.nci.cagrid.introduce/1/Namespace" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:extension="gme://gov.nih.nci.cagrid.introduce/1/Extension"
	targetNamespace="gme://gov.nih.nci.cagrid.introduce/1/Namespace" elementFormDefault="qualified"
	attributeFormDefault="unqualified">
	<xs:import namespace="gme://gov.nih.nci.cagrid.introduce/1/Extension" schemaLocation="./Extension.xsd"/>
	
	<xs:attributeGroup name="BasicSchemaDervivedType">
		<xs:attribute name="type" type="xs:string" use="required">
			<xs:annotation>
				<xs:documentation>Indicates the QName of the metadata.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="packageName" type="xs:string" use="optional">
			<xs:annotation>
				<xs:documentation>Indicates a posible packageName change from parent</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:attributeGroup>
	<xs:attributeGroup name="CustomSchemaDervivedType">
		<xs:attributeGroup ref="BasicSchemaDervivedType"/>
		<xs:attribute name="className" type="xs:string" use="optional">
			<xs:annotation>
				<xs:documentation>Used to specify the class name of an existing object that can serialize to, and
					deserialize from, the document defined by the namespace:type attributes.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="serializer" type="xs:string" use="optional">
			<xs:annotation>
				<xs:documentation>The Axis serializer factory class to use</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="deserializer" type="xs:string" use="optional">
			<xs:annotation>
				<xs:documentation>The Axis deserializer factory class to use</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:attributeGroup>
	<xs:element name="Namespaces" type="NamespacesType">
		<xs:annotation>
			<xs:documentation>List of methods for this interface.</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:complexType name="NamespacesType">
		<xs:sequence>
			<xs:element name="Namespace" type="NamespaceType" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="NamespaceType">
		<xs:sequence>
			<xs:element name="SchemaElement" type="SchemaElementType" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element ref="extension:Extensions" minOccurs="0" maxOccurs="1"></xs:element>
		</xs:sequence>
		<xs:attribute name="namespace" type="xs:string" use="required">
			<xs:annotation>
				<xs:documentation>Used to specify the package to be use when the object is created of by use of an
					already existing object. </xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="packageName" type="xs:string" use="optional">
			<xs:annotation>
				<xs:documentation>Used to specify the package to be use when the object is created of by use of an
					already existing object. </xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="location" type="xs:string" use="optional">
			<xs:annotation>
				<xs:documentation>Used to specify the location schema or wsdl on the local filesystem. If it is omitted,
					it is assumed it can be retrieved from a GME.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="generateStubs" type="xs:boolean" use="optional">
			<xs:annotation>
				<xs:documentation>Used to specify whether or not stubs/beans should be generated for the given
					namespace. If omiited, "true" is assumed. If set to "false" no beans will be created for any of the
					types defined in the corresponding schema, nor any of the types in any schemas imported by this
					schema.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<xs:complexType name="SchemaElementType">
		<!-- Stupid xsd won't let you have a choice of attribute groups, 
		so need to be of the cutstom type and make the added attributes all optional
		(when they should all be required).
		What I'd really like here is a choice between Basic and Custom -->
		<xs:attributeGroup ref="CustomSchemaDervivedType"/>
	</xs:complexType>
</xs:schema>
